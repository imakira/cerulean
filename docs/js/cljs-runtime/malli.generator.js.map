{"version":3,"sources":["malli/generator.cljc"],"mappings":";AAgBA,AAAA;AAAA;AAAA;AAAA;AAAA,AAEA,AAAA;AAAA;;;4BAAA,5BAAaO;;AAAb,IAAAP,kDAAA,WACeQ,MAAKC;AADpB,AAAA,IAAAR,kBAAA,EAAA,UAAA,OAAA,hBACeO,qBAAAA;IADfN,kBAAA,CAAAC,2BAAA,AAAAC,YAAAH;AAAA,AAAA,GAAA,GAAA,CAAAC,mBAAA;AAAA,QAAAA,gDAAAA,+DAAAA,jBACeM,2CAAAA,rCAAKC,2CAAAA;;AADpB,IAAAJ,kBAAA,CAAAF,2BAAA;AAAA,AAAA,GAAA,GAAA,CAAAE,mBAAA;AAAA,QAAAA,gDAAAA,+DAAAA,jBACeG,2CAAAA,rCAAKC,2CAAAA;;AADpB,MAAA,AAAAH,2BAAA,uBACeE;;;;AADf,AAAA;;;6BAAA,7BACGL,kEAAYK,MAAKC;AADpB,AAAA,GAAA,EAAA,GAAA,UAAA,aAAA,GAAA,CAAA,sDAAA,hFACeD,0BAAAA;AADf,OACeA,mDAAAA,MAAKC;;AADpB,OAAAT,gDACeQ,MAAKC;;;;AADpB,AAkCA,AAAKC,0BAAQ,sCAAA,tCAACC;AAEd,yBAAA,zBAAOC,0DAAQC,OAAOJ;AAAtB,AAA+B,OAACK,gBAAM,AAACC,kDAAWF,OAAOJ;;AACzD,6BAAA,7BAAOO,kEAAYH,OAAOJ;AAA1B,AAAmC,IAAAQ,YAAW,AAACL,uBAAOC,OAAOJ;IAA1BS,YAAmCT;AAAnC,AAAA,0HAAAQ,UAAAC,iDAAAD,UAAAC,vLAACC,0DAAAA,+EAAAA;;AAEpC;;;6BAAA,qCAAAC,lEAAMI;AAAN,AAAA,IAAAH,cAAAD;IAAAC,kBAAA,AAAAC,4BAAAD;eAAAA,XAE2CK;gCAF3C,AAAAH,4CAAAF,gBAAA,xFAEYI;AAFZ,AAGE,OAACE,oBAAU,AAACC,oCAAU,WAAKC;AAAL,AACE,4DAAA,rDAACC,sKACS,iBAAAC,YAAA;AAAA,AAAA,oBACEN;AAA0B,qDAAAM,UAAA,xDAACC,kHAAcP;;AAD3CM;;;IAFlC,2CAAA,4FAAA,KAAA,6HAKwCN;;AAE1C;;;0CAAA,1CAAMQ,4FAEHC;AAFH,AAEM,0BAAA,AAAA,0HAAI,AAACC,eAAKD,5JAAeE;;AAE/B,mCAAA,nCAAMC,8EAAkBH;AAAxB,AAA2B,GAAU,AAACD,wCAAkBC;AAA7B;;AAAA,AAAgCA;;;AAC3D,+BAAA,/BAAMI,sEAAcJ;AAApB,AAAuB,GAAM,AAACD,wCAAkBC;AAAzB,AAA4BA;;AAA5B;;;AAEvB,0BAAA,1BAAOK,4DAASC;AAAhB,AAAsB,oBAAIA;AAAK,OAACC,oEAAmBD;;AAAM,OAACC;;;AAE1D,2BAAA,3BAAMC,8DAAU7B,OAAOJ;AAAvB,AACE,IAAAkC,cAA0D,AAACK,oDAAanC,OAAOJ;IAA/EkC,kBAAA,AAAArB,4BAAAqB;cAAA,AAAApB,4CAAAoB,gBAAA,tEAAuBG;cAAvB,AAAAvB,4CAAAoB,gBAAA,tEAAwCI;UAAxC,AAAAxB,4CAAAoB,gBAAA,lEAAcC;UAAd,AAAArB,4CAAAoB,gBAAA,lEAAkBE;AAAlB,AACE,oBAAM,iBAAAI,oBAAKL;AAAL,AAAA,oBAAAK;AAAA,IAAAA,wBAASH;AAAT,AAAA,oBAAAG;AAAiB,QAAGH,UAAQF;;AAA5BK;;;AAAAA;;;AAAN,AACE,qDAAA,0GAAA,2CAAA,oDAAA,uDAAA,8DAAA,nXAACnB,2WAAmDgB,0DAAcF;;AADpE;;AAEA,oBAAM,iBAAAK,oBAAKJ;AAAL,AAAA,oBAAAI;AAAA,IAAAA,wBAASF;AAAT,AAAA,oBAAAE;AAAiB,QAAGF,UAAQF;;AAA5BI;;;AAAAA;;;AAAN,AACE,qDAAA,0GAAA,2CAAA,oDAAA,sDAAA,8DAAA,lXAACnB,0WAAmDgB,yDAAcF;;AADpE;;AAHF,kDAAA,kDAKQ,iBAAAM,mBAAIJ;AAAJ,AAAA,oBAAAI;AAAAA;;AAAYN;;KALpB,iDAMQ,iBAAAM,mBAAIH;AAAJ,AAAA,oBAAAG;AAAAA;;AAAYL;;;;AAEtB,0BAAA,1BAAOM,4DAAStC,OAAOJ;AAAvB,AACE,IAAA2C,cAAmC,AAACJ,oDAAanC;IAAjDuC,kBAAA,AAAA9B,4BAAA8B;sBAAA,AAAA7B,4CAAA6B,gBAAA,9EAAkBC;iBAAlB,AAAA9B,4CAAA6B,gBAAA,zEAA4BE;AAA5B,AAAA,kDAAA,gFAAA,hBACcD,sEAAgBC;;AAEhC,2BAAA,3BAAOC,8DAAUC,EAAEC;AAAnB,AAAwB,IAAAP,mBAAI,AAACZ,6BAAamB;AAAlB,AAAA,oBAAAP;AAAAA;;AAAuB,OAACQ,mCAASF,EAAEC;;;AAC3D,2BAAA,3BAAOE,8DAAUF;AAAjB,AAAsB,gCAAA,WAAAG,pCAACL;AAAD,AAAW,sEAAAK,/DAACC,8CAAMC;GAAUL;;AAClD,4BAAA,5BAAOM,gEAAWC;AAAlB,AAAwB,IAAAd,mBAAI,AAACe,eAAK3B,6BAAa0B;AAAvB,AAAA,oBAAAd;AAAAA;;AAA6B,OAACW,8CAAMK,oCAAUF;;;AACtE,4BAAA,5BAAOG,gEAAWjC;AAAlB,AAAqB,GAAI,AAACD,wCAAkBC;AAAGxB;;AAAQ,4CAAA,rCAAC0D,wHAAY1D,wBAAQwB;;;AAC5E,iCAAA,2CAAA,gEAAA,MAAA,sDAAA,xMAAemC;AACf,6BAAA,7BAAOC,kEAAYC;AAAnB,AAAyB,OAACC,yIAAgB,AAACC,6CAAKJ,+BAAeE,3HAAM,iIAAA,kDAAA,WAAAG,9LAACC,/CAAgC,AAACA;AAAlC,AAAc,IAAAC,YAAAF;AAAA,AAAA,GAAA,CAAAE,aAAA;AAAA;;AAAAA;;IAAmB,iDAAA,WAAAC;AAAA,AAAc,IAAAC,YAAAD;AAAA,AAAA,GAAA,CAAAC,aAAA;AAAA;;AAAAA;;;;AAEpH,6BAAA,qCAAAC,lEAAOE,4EAA8B/C;AAArC,AAAA,IAAA8C,cAAAD;IAAAC,kBAAA,AAAA1D,4BAAA0D;UAAA,AAAAzD,4CAAAyD,gBAAA,lEAA2BpC;UAA3B,AAAArB,4CAAAyD,gBAAA,lEAA+BnC;AAA/B,AACE,GACE,AAACZ,wCAAkBC;AAAG,GAAI,CAAO,iBAAAgB,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAA;;SAAP;AAAmB,6CAAA,tCAACvC;;AAAeuB;;;AAD/D,oBAEE,iBAAAe,oBAAKL;AAAL,AAAA,oBAAAK;AAAS,OAACiC,6CAAEtC,IAAIC;;AAAhBI;;;AAAsB,OAACkC,mEAAWjD,EAAEU;;AAFtC,oBAGE,iBAAAK,oBAAKL;AAAL,AAAA,oBAAAK;AAASJ;;AAATI;;;AAAc,OAACkC,mEAAWjD,EAAEU,IAAIC;;AAHlC,oBAIED;AAAI,OAACwC,kDAAU,oCAAA,WAAAC,/CAACzD;AAAD,AAAY,OAACuD,mEAAWjD,EAAEU,IAAI,OAAAyC,NAAGzC;oBAA5C,qGAAA,2CAAA,kDAAA,kEAAA,iEAAA,rVAAqD0C,mVAAkDpD,oDAAOU;;AAJpH,oBAKEC;AAAI,4EAAA,rEAACsC,mEAAWjD,MAAIW;;AALtB,AAMQ,OAACsC,mEAAWjD;;;;;;;;AAEtB,yCAAA,wDAAAqD,jGAAOE,0FAAwB5E,iBAA2B2C,EAAEtB;AAA5D,AAAA,IAAAsD,cAAAD;IAAAC,kBAAA,AAAAlE,4BAAAkE;QAAAA,JAAuDE;UAAvD,AAAAnE,4CAAAiE,gBAAA,lEAA8C5C;AAA9C,AACE,GAAI,AAACX,wCAAkBC;AACrB,GAAI,6CAAA,7CAACgD,iDAAI,iBAAAhC,mBAAIN;AAAJ,AAAA,oBAAAM;AAAAA;;AAAA;;;AAAY,6CAAA,tCAACvC;;AAAeuB;;;AACrC,OAACyD,+EAAuBnC,EAAEtB,EAAM,AAACF,8CAAM,kBAAI,iBAAAiB,oBAAKL;AAAL,AAAA,oBAAAK;AAAS,OAACiC,6CAAEtC,IAAIiD;;AAAhB5C;;4bAAX,uDAAA,WAAA2C,xfAAO,2CAAA,qEACiBhD,YACf,0BAAA,2CAAA,kDAAA,oEAAA,iDAAA,5OAACkD,wBAAgBJ;AAF1B,AAGe,6BAAA,tBAACK,qJAA0C,8CAAAH,kBAAA,hEAAC5D,0HAAgBnB;;;;AAE/G,8BAAA,9BAAOmF,oEAAanF,OAAOJ;AAA3B,AACE,OAAC8C,yBAAS0C,oBAAS,AAAChB,2BAAW,AAACvC,yBAAS7B,OAAOJ,SAASyF;;AAE3D,AAAA,4BAAA,oCAAAC,hEAAOE;AAAP,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAOD,qEACHxF,OAAOJ;AADX,AACoB,OAAC8F,wDAAU1F,OAAO2F,mBAAS/F;;;AAD/C,CAAA,0DAAA,1DAAO4F,qEAEHxF,OAAO2C,EAAE/C;AAFb,AAEsB,OAAC8C,yBAASC,EAAE,AAACyB,2BAAW,AAACvC,yBAAS7B,OAAOJ,SAAS,AAACO,2BAAWH,OAAOJ;;;AAF3F,CAAA,oDAAA,pDAAO4F;;AAAP,AAIA,sCAAA,tCAAOI,oFAAqB5F,OAAO6E,EAAExD;AAArC,AAAwC,OAACuD,uCAAuB5E,OAAO6E,EAAEc,mBAAStE;;AAElF,qCAAA,rCAAOwE,kFAAoB7F,OAAO2C,EAAE/C;AAApC,AACE,OAAC8C,yBAASC,EAAE,AAACiD,oCAAoB5F,OAAO,AAAC6B,yBAAS7B,OAAOJ,SAAS,AAACO,2BAAWH,OAAOJ;;AAEvF,sCAAA,tCAAOmG,oFAAkB/F;AAAzB,AAAA,kDAAA,gEAAA,MAAA,uDAAA,WAAA8F;AAAA,AAAyD,6BAAA,tBAACZ,iIAAiC,8CAAAY,kBAAA,hEAAC3E,0HAAgBnB;;;AAC5G,gCAAA,hCAAOgG,wEAAehG,OAAOiG,KAAKrD;AAAlC,AAAuC,IAAAP,mBAAI,AAACZ,6BAAamB;AAAlB,AAAA,oBAAAP;AAAAA;;AAAuB,OAAC6D,sEAAcD,KAAKrD,IAAI,AAACmD,oCAAiB/F;;;AAExG,2BAAA,3BAAMmG,8DAAUnG,OAAOJ;AAAvB,AACE,OAACoG,8BAAchG,OAAO,AAACoG,mDAAYpG,OAAOJ,SAAS,AAACO,2BAAWH,OAAOJ;;AAExE,6BAAA,7BAAOyG,kEAAYzG,QAAQ0G;AAA3B,AACE,IAAAC,qBAAa,AAACC,oBAAU,6CAAA,7CAAC5C,8EAAQ,AAAC6C,6CAAKjF,kCAAkB8E;AAAzD,AAAA,GAAA,CAAAC,sBAAA;AAEE,OAAC5F,2BAAWf;;AAFd,aAAA2G,TAAUD;AAAV,AACE,GAAI,6CAAA,7CAACjC,iDAAI,AAACqC,gBAAMJ;AAAK,0DAAA,nDAACK,4CAAIL;;AAAM,OAAC/C,qCAAW+C;;;;AAGhD,+BAAA,/BAAOM,sEAAc5G,OAAOJ;AAA5B,AACE,IAAAiH,cAAoB,AAAChF,yBAAS7B,OAAOJ;IAArCiH,kBAAA,AAAApG,4BAAAoG;UAAA,AAAAnG,4CAAAmG,gBAAA,lEAAc9E;IACR+E,KAAG,AAAC/G,uBAAOC,OAAOJ;AADxB,AAEE,OAACyG,2BACAzG,+HAEI,iBAAAmH,YAAA,1EAGA,AAACnD,7CAED,AAACoD,7BACD,iBAAAQ;AANA,AAAA,GACE,EAAI,QAAA,PAAMzF,kBAAK,SAAA,RAAOA;AACtB,oDAAAgF,7CAACC,uDAAKnH;;AAFRkH;;KAGM,4CAAA,WAAAG,vDAACC;AAAD,AAAM,sEAAAD,/DAACxB,wDAAU1F,yBAASJ;IAAhC,uIAAA,WAAAqH,/DACOtB,mBAASyB,cAAIC;AADpB,AAC8B,0DAAAJ,nDAACK;YACzB,AAACzB,mCAAmB7F,OAAOuH,cAAI3H;AACrC,AAAA,GACE,EAAK,6CAAA,7CAACyE,oGAAS,AAACoD,8CAAOX,UAClB,6CAAA,7CAACzC,iDAAI,AAACqC,gBAAM,AAACxG,kDAAW4G;AAC7B,oDAAAU,7CAACR,uDAAK,iBAAAU,cAAY,AAACxH,kDAAW4G;QAAxB,AAAAH,4CAAAe,YAAA,IAAA,hEAAOC;QAAP,AAAAhB,4CAAAe,YAAA,IAAA,hEAASE;AAAT,AACE,IAAAC,YAAA,mFAAA,yDAAoB,iBAAAxF,mBAAI,AAACF,oDAAanC;AAAlB,AAAA,oBAAAqC;AAAAA;;AAAA;;KAA8BsF,EAAEC;IAApDE,YAAuDlI;AAAvD,AAAA,0HAAAiI,UAAAC,iDAAAD,UAAAC,vLAACxH,0DAAAA,+EAAAA;;;AAJXkH;;;;AAMT,0BAAA,1BAAMO,4DAAS/H,OAAOJ;AAAtB,AACE,OAACyG,2BAAWzG,QAAQ,4CAAA,WAAAoI,vDAACb;AAAD,AAAM,0HAAAa,iEAAAA,nLAAC1H,0DAAAA,qFAAAA,XAAYV,iEAAAA;GAAS,AAACM,kDAAWF,OAAOJ;;AAErE,2DAAA,3DAAOqI,8HAA0CjI;AAAjD,AACE,IAAMkI,WAAS,AAAA,2FAAA,oDAAIlI,pDAAOmC;AAA1B,AACE,IAAAgG,YAAQnI;AAAR,AAAA,GACE,qBAAAoI,pBAAUF;AACV,kEAAAC,UAAA,WAAAE,hFAACC;AAAD,AACE,OAACnB,4CAAI,WAAAoB;AAAA,AAAA,IAAAC,cAAAD;QAAA,AAAA5B,4CAAA6B,YAAA,IAAA,hEAAMb;QAANa,JAAYC;AAAZ,AACE,IAAAC,YAAQD;AAAR,AAAA,GACE,gDAAA,hDAACE,+HAAiBhB;AAClB,sDAAAe,UAAA,qBAAA,mFAAA,mDAAA,4FAAA,mFAAA,+CAAA,lbAAC5E,6DAAS8E,0OAAgBV,gJAAiBP;;AAF7Ce;;GADPL;GAID,AAACQ,iDAAU7I;;AAPdmI;;;AASJ,6BAAA,7BAAMW,kEAAY9I,OAAOJ;AAAzB,AACE,OAACyG,2BAAWzG,QAAQ,4CAAA,WAAAmJ,vDAAC5B;AAAD,AAAM,IAAA6B,YAAW,eAAAD,fAACG;IAAZD,YAAoBrJ;AAApB,AAAA,0HAAAoJ,UAAAC,iDAAAD,UAAAC,vLAAC3I,0DAAAA,+EAAAA;GAA4B,AAAC6I,iDAAU,AAAClB,yDAAyCjI,QAAQJ;;AAEtH,6BAAA,7BAAOwJ,kEAAYC;AAAnB,AACE,OAACC,2BACA,AAACC,+CACA,eAAAC,JAAKE;AAAL,AAAA,IAAAD,cAAAD;QAAA,AAAA7C,4CAAA8C,YAAA,IAAA,hEAAU9B;QAAV,AAAAhB,4CAAA8C,YAAA,IAAA,hEAAY7B;AAAZ,AACE,GAAM,EAAK,+CAAA,/CAACvD,6CAAEsD,uFAAe,AAACgC,qBAAK/B;AAAI,OAACgC,oBAAUC,sBAAOH,IAAI9B;;AAA7D,GACM,MAAA,LAAMD;AAAG+B;;AADf,AAEY,OAACI,oDAAOJ,IAAI/B,EAAEC;;;;GAC5B,qBAAA,rBAACmC,yDAAcV;;AAEnB,6BAAA,qCAAAW,lEAAOE,4EAAkBtK;AAAzB,AAAA,IAAAqK,cAAAD;QAAA,AAAArD,4CAAAsD,YAAA,IAAA,hEAAoBtC;QAApB,AAAAhB,4CAAAsD,YAAA,IAAA,hEAAsBE;AAAtB,AACE,IAAAC,YAAS,yBAAA,WAAAC,pCAAC3H;AAAD,AAAW,AAAA,4FAAA2H,FAAK1C;GAAM,CAACrH,0DAAAA,qEAAAA,bAAU6J,iDAAAA,/CAAEvK,iDAAAA;AAA5C,AAAA,oBAAsD,AAAA,2FAAA,oDAAIuK,pDAAEhI;AAA5D,iCAAAiI,1BAAoF9G;;AAApF8G;;;AAEF,2BAAA,3BAAME,8DAAUtK,OAAOJ;AAAvB,qFACwB,4CAAA,WAAA2K,vDAACpD,1BAA6BjE,3DAAU,2DAAA,pDAACR,yBAAS0G;AAAlD,AAAM,kCAAAmB,3BAACL,6CAAatK;oDAArCI,jDAAOmJ,AAAU;;AAExB,8BAAA,9BAAMqB,oEAAaxK,OAAOJ;AAA1B,AAGO,gCAAA,WAAA+K,pCAACjI;AAAD,AAAW,oDAAA,mCAAAiI,hFAAC/G;GADZ,uFAAA,WAAA8G,lGAAC9F,uCAAuB5E,OAAO,AAAC6B,yBAAS7B,OAAOJ;AAAhD,AAA0D,mDAAA8K,kBAAA,9DAAC/D;GAD3D,AAACzD,0BAAU,4CAAA,WAAAuH,vDAACtD;AAAD,AAAM,0HAAAsD,iEAAAA,nLAACnK,0DAAAA,qFAAAA,XAAYV,iEAAAA;GAAS,AAACM,kDAAWF,OAAOJ;;AA6GjE,uCAAA,vCAAOgL,sFAAsB5K;AAA7B,AAAA,kDAAA,gKAAA,zGACU,wBAAA,mDAAA,oBAAIA,pBAAO6K,nDAAWC,xBAAYC,8JACnC,AAACC,gBAAOhL;;AAEjB,2BAAA,3BAAMiL,8DAAUjL,OAAOJ;AAAvB,AACE,IAAMsL,SAAO,AAACN,qCAAqB5K;AAAnC,AACE,IAAAqC,mBAAI,AAAC8I,gBAAM,uDAAA,mFAAA,1IAACC,+CAAOxL,iLAAmBsL;AAAtC,AAAA,oBAAA7I;AAAAA;;AACI,IAAMgJ,iBAAe,KAAAC,gBAAA;AAAA,AAAO,OAAC3K,2BAAWf;GAAnB;IACf2L,UAAQ,AAACC,+CAAQxL;AADvB,AAEE,IAAAyL,YAAS,iBAAAC,YAAWH;IAAXI,YAAmB,2BAAA,mFAAA,9GAACC,mBAAShM,iLAAmBsL,eAAQG;AAAxD,AAAA,0HAAAK,UAAAC,iDAAAD,UAAAC,vLAACrL,0DAAAA,+EAAAA;;AAAV,AAAA,GACE,AAACuL,0BAAUR;AAAgB,mDAAA,WAAAS,vDAACC;AAAD,AACE,IAAAC,YAAWT;IAAXU,YAAmB,2BAAA,mFAAA,qGAAAH,nNAACF,mBAAShM,iLAAmBsL;AAAhD,AAAA,0HAAAc,UAAAC,iDAAAD,UAAAC,vLAAC3L,0DAAAA,+EAAAA;GADHmL;;AAD7BA;;;;AAIV,gCAAA,hCAAMS,wEAASlM,OAAOJ;AAAtB,AACE,IAAMuM,mBAAiB,iBAAAC,YAAW,AAAA,wFAAS,AAACE,0BAAiBtM;IAAtCqM,YAA+CzM;AAA/C,AAAA,0HAAAwM,UAAAC,iDAAAD,UAAAC,vLAAC/L,0DAAAA,+EAAAA;;AAAxB,AACE,OAACR,sCAAW,qDAAA,2CAAA,hGAACyM,0JAAuBvM,eAAQ;oCAAOgB;AAAP,AAAU,QAACwL,yDAAAA,mFAAAA,5BAASL,+DAAAA,9CAAiBvM,+DAAAA;;;IAA9BoB;;;;EAAAA;;qCAAAA;;;IAAAA;2BAAAA;;;;;;;AAEvD,gCAAA,hCAAMyL,wEAAezM,OAAOJ;AAA5B,AACE,OAACE,sCAAW,qDAAA,2CAAA,iEAAA,kDAAA,WAAA4M,9NAACH,0JAAuBvM;AAAxB,AAAsC,wHAAA0M,gEAAAA,hLAACF,yDAAAA,oFAAAA,XAAW5M,gEAAAA;WAAlD,KAAgEA;;AAE9E,mCAAA,nCAAM+M,8EAAkB3M,OAAOJ;AAA/B,AACE,IAAAgN,YAAQ,CAACtM,0DAAAA,0EAAAA,lBAAUN,sDAAAA,/CAAOJ,sDAAAA;AAA1B,AAAA,GAAmC,AAACiN,cAAI,AAACC,4BAAa9M;AAAS,iCAAA,KAAA+M,2BAAA,KAAA,EAAA,IAAA,AAAAA,sCAAA,CAAAH,WAAA,vHAAW1J;;AAA1E0J;;;AAEF,gCAAA,hCAAOI,wEAAevE,EAAE7I;AAAxB,AAAiC,OAAC+M,iCAAiB,EAAI,AAACM,wBAAQxE,IAAG,8CAAA,9CAAC/H,4CAAI+H,OAAKA,GAAG7I;;AAEhF,2BAAA,3BAAMsN,8DAAUlN,OAAOJ;AAAvB,AACE,gCAAA,0BAAiC,4CAAA,WAAAuN,vDAAChG,1BAAgCjE,zBAAUJ;AAA3C,AAAM,qCAAAqK,9BAACH,gDAAgBpN;GAAnD,AAACM,kDAAWF,OAAOJ;;AAE1B,2BAAA,3BAAMwN,8DAAUpN,OAAOJ;AAAvB,0CACmC,4CAAA,WAAAyN,vDAAClG,1CAAgC,OAACd,2BAAWzG;AAA7C,AAAM,qCAAAyN,9BAACL,gDAAgBpN;GAAnD,AAACM,kDAAWF,OAAOJ;;AAE1B,+BAAA,/BAAM0N,sEAAQtN,OAAOJ;AAArB,AACE,IAAM2N,QAAM,AAACxN,uBAAOC,OAAOJ;AAA3B,AACE,IAAA2G,qBAAY,AAAC/E,iCAAiB,CAAClB,0DAAAA,yEAAAA,jBAAUiN,qDAAAA,/CAAM3N,qDAAAA;AAA/C,AAAA,GAAA,CAAA2G,sBAAA;AAIE,6CAAA,tCAACzG;;AAJH,QAAAyG,JAAUlF;AAAV,AACE,oBAAI,AAACyL,4BAAaS;AAChB,4CAAA,rCAAChK,wHAAYlC,EAAE,sCAAA,tCAACvB;;AAChB,4EAAA,IAAA,zEAACwE,mEAAWjD;;;;AAGpB,8BAAA,9BAAMmM,oEAAQxN,OAAOJ;AAArB,AACE,IAAM2N,QAAM,AAACxN,uBAAOC,OAAOJ;AAA3B,AACE,IAAA6N,YAAS,AAACrJ,2BAAW,uOAAA,AAAA,2CAAA,kDAAA,YAAA,9UAAM,6CAAA,7CAACC,4FAAK,AAAA,8HAAezE,0HAAoB,iBAAA8N,YAAWH;IAAXI,YAAiB,uDAAA,vDAACC,+CAAOhO;AAAzB,AAAA,0HAAA8N,UAAAC,iDAAAD,UAAAC,vLAACrN,0DAAAA,+EAAAA;;AAArE,AAAA,oBACE,AAACwM,4BAAaS;AADhB,gCAAAE,zBACuB3K;;AADvB2K;;;AAGJ,8BAAA,9BAAMI,oEAAQ7N,OAAOJ;AAArB,AACE,OAAC4N,4BAAOxN,OAAO,sDAAA,gGAAA,tJAACmB,8CAAMvB;;AAExB,8BAAA,9BAAMkO,oEAAa9N,OAAOJ;AAA1B,AACE,IAAAyC,mBAAI,iBAAA0L,YAAQ,AAACrI,wDAAU1F,OAAOJ;IAA1BmO,gBAAA,EAAA,CAAAA,aAAA,OAAA,KAAA,iCAAAA,jCAAmCvM;AAAnC,AAAA,GAAA,CAAAuM,iBAAA;AAAA;;AAAoD,IAAAC,YAAAD;AAAA,AAAA,oBAAQ,AAACjB,4BAAa,AAAC/M,uBAAOC,OAAOJ;AAArC,gCAAAoO,zBAA+ClL;;AAA/CkL;;;;AAAxD,AAAA,oBAAA3L;AAAAA;;AACI,6CAAA,tCAACvC;;;AAEP,uCAAA,vCAAMmO,sFAAsBjO,OAAOkO,iBAAiBC,uBAAuBlI,KAAKrD;AAAhF,AACE,IAAAwL,qBAA4B,AAAA,6FAAY,AAACjM,oDAAanC;AAAtD,AAAA,oBAAAoO;AAAA,yBAAAA,rBAASC;AAAT,AACE,OAAC3L,yBAAS,WAAKiF;AAAL,AAAQ,IAAA2G,YAAkB,AAACE,eAAKH;IAAxBE,YAA4C,AAACC,eAAK7G;AAAlD,AAAA,wGAAA2G,UAAAC,wCAAAD,UAAAC,5JAACL,iDAAAA,sEAAAA;GAAsDC;;AACzE,OAACnI,8BAAchG,OAAOiG,KAAKrD;;;AAE/B,yCAAA,zCAAM6L,0FAAwBzO;AAA9B,AACE,OAACiO,qCAAqBjO,OAAO0O,kBAAQC,sCAAYC,mCAAmBC;;AAEtE,wCAAA,xCAAMC,wFAAuB9O;AAA7B,AACE,OAACiO,qCAAqBjO,OAAO+O,iBAAOC,qCAAWC,kCAAkBC;;AAEnE,+BAAA,/BAAOC,sEAAcC;AAArB,AACE,GAAI,6CAAA,7CAAC/K,iDAAI,AAACqC,gBAAM0I;AACd,OAACtP,sCAAW,AAACG,gBAAMmP;;AACnB,OAACC,uCAAaD;;;AAElB,6BAAA,7BAAOE,kEAAYtP,OAAOJ;AAA1B,AACE,OAAC+D,2CAAY,AAAC4L,uGAAM,iBAAMC,QAAM,AAACrN,oDAAanC,OAAOJ;AAAjC,AAAA,kDAAA,8LAAA,9HACc,kDAAA,qEAAA,vHAACc,4CAAI8O,wIACV,kDAAA,2DAAA,7GAAC9O,4CAAI8O;mGACV,AAAC3N,yBAAS7B,OAAOJ,/EACjB,wFAAA,kDAAA,WAAA6P,rJAAC3L,/CACD,AAACA;AADD,AAAc,IAAA4L,YAAAD;AAAA,AAAA,GAAA,CAAAC,aAAA;AAAA;;AAAAA;;IACd,iDAAA,WAAAC;AAAA,AAAc,IAAAC,YAAAD;AAAA,AAAA,GAAA,CAAAC,aAAA;AAAA;;AAAAA;;;;AAExC,GAAA,QAAAC,kCAAAC,4CAAAC;AAAA;AAAA,AAAA,oCAAA,iBAAAC,6BAAA,AAAAC,6CAAA,/HAAUQ;IAAVP,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAA3P,4CAAA,2CAAA,4DAAA,gGAAA,gEAAA,iBAAA4P,gBAAA;AAAA,AAAA,QAAAA,8CAAAA,gDAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,kBAAA,qBAA4B,WAAKxQ,OAAOJ;AAAZ,AAAqB,OAAC6H,8CAAOzH,OAAOJ;GAAhE,wFAAAyQ,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,AAAAK,8EAAA,wFAAA,WAAwCzQ,OAAOJ;AAA/C,AAAwD,OAAC8Q,iCAAgB,AAACtK,mDAAYpG,OAAOJ;;AAE7F,AAAA6Q,8EAAA,+CAAA,WAAiCzQ,OAAOJ;AAAxC,AAAiD,kCAAA,2CAAA,tEAAC6D,wHAAiB,0CAAA,zCAAK,AAAC1D,uBAAOC,OAAOJ;;AACvF,AAAA6Q,8EAAA,iDAAA,WAAkCzQ,OAAOJ;AAAzC,AAAkD,kCAAA,2CAAA,tEAAC6D,wHAAiB,AAAC1D,uBAAOC,OAAOJ;;AACnF,AAAA6Q,8EAAA,+CAAA,WAAiCzQ,OAAOJ;AAAxC,AAAiD,kCAAA,2CAAA,tEAAC6D,uHAAiB,0CAAA,zCAAK,AAAC1D,uBAAOC,OAAOJ;;AACvF,AAAA6Q,8EAAA,iDAAA,WAAkCzQ,OAAOJ;AAAzC,AAAkD,kCAAA,2CAAA,tEAAC6D,uHAAiB,AAAC1D,uBAAOC,OAAOJ;;AACnF,AAAA6Q,8EAAA,+CAAA,WAAiCzQ,OAAOJ;AAAxC,AAAiD,OAACE,sCAAW,AAACC,uBAAOC,OAAOJ;;AAC5E,AAAA6Q,8EAAA,qDAAA,WAAoCzQ,OAAOJ;AAA3C,AAAoD,4CAAA,WAAA+Q,hDAAC3K,8BAAchG;AAAf,AAAuB,uDAAA2Q,hDAAChI,kEAAO,AAAC5I,uBAAOC,OAAOJ;GAAUgR;;AAC5G,AAAAH,8EAAA,AAAA,yDAAA,WAAoCzP,EAAEpB;AAAtC,AAA+C,4CAAA,rCAAC2D,wHAAY,2BAAA,2CAAA,kDAAA,xHAACE,wIAA2B,AAACf,yBAASmO,cAAIC;;AACtG,AAAAL,8EAAA,AAAA,0DAAA,WAAoCzP,EAAEpB;AAAtC,AAA+C,4CAAA,rCAAC2D,wHAAY,2BAAA,2CAAA,iDAAA,vHAACE,wIAA4B,AAACf,yBAAS,AAACqO,6CAAKC,cAAIC,aAAGH;;AAChH,AAAAL,8EAAA,mDAAA,WAAmCzQ,OAAOJ;AAA1C,AAAmD,OAACoG,8BAAchG,OAAO,AAACoG,mDAAYpG,OAAOJ,SAAS,AAAC8Q,iCAAgBQ;;AACvH,AAAAT,8EAAA,mDAAA,WAAmCzQ,OAAOJ;AAA1C,AAAmD,OAACuG,yBAASnG,OAAOJ;;AACpE,AAAA6Q,8EAAA,gDAAA,WAAkCzQ,OAAOJ;AAAzC,AAAkD,OAACmI,wBAAQ/H,OAAOJ;;AAClE,AAAA6Q,8EAAA,kDAAA,WAAmCzQ,OAAOJ;AAA1C,AAAmD,OAACmI,wBAAQ,qDAAA,rDAACoJ,qGAAkB,AAAChP,oDAAanC,QAAQ,AAACmH,4CAAI+B,eAAK,AAAChJ,kDAAWF,SAAS,AAAC6I,iDAAU7I,SAASJ;;AACxJ,AAAA6Q,8EAAA,oEAAA,WAAsCzQ,OAAOJ;AAA7C,AAAsD,OAACO,2BAAWH,OAAOJ;;AACzE,AAAA6Q,8EAAA,mDAAA,WAAmCzQ,OAAOJ;AAA1C,AAAmD,OAAC0K,yBAAStK,OAAOJ;;AACpE,AAAA6Q,8EAAA,yDAAA,WAAsCzQ,OAAOJ;AAA7C,AAAsD,OAAC4K,4BAAYxK,OAAOJ;;AAC1E,AAAA6Q,8EAAA,uDAAA,WAAqCzQ,OAAOJ;AAA5C,AAAqD,OAACkJ,2BAAW9I,OAAOJ;;AACxE,AAAA6Q,8EAAA,yDAAA,WAAsCzQ,OAAOJ;AAA7C,AAAsD,OAAC8F,wDAAU1F,OAAOJ;;AACxE,AAAA6Q,8EAAA,kEAAA,WAA0CzQ,OAAOJ;AAAjD,AAA0D,OAAC8F,wDAAU1F,OAAOJ;;AAC5E,AAAA6Q,8EAAA,kDAAA,WAAmCzQ,OAAOJ;AAA1C,AAAmD,OAACiG,mCAAmB7F,OAAOuH,cAAI3H;;AAClF,AAAA6Q,8EAAA,qDAAA,WAAoCzQ,OAAOJ;AAA3C,AAAoD,OAACuP,6BAAa,AAACjP,kDAAWF,OAAOJ;;AACrF,AAAA6Q,8EAAA,4DAAA,WAAuCzQ,OAAOJ;AAA9C,AAAuD,OAACgH,6BAAa5G,OAAOJ;;AAC5E,AAAA6Q,8EAAA,wDAAA,WAAqCzQ,OAAOJ;AAA5C,AAAqD,OAACgH,6BAAa5G,OAAOJ;;AAC1E,AAAA6Q,8EAAA,uDAAA,WAAqCzQ,OAAOJ;AAA5C,AAAqD,OAAC0D,0BAAU,AAACnD,2BAAWH,OAAOJ;;AACnF,AAAA6Q,8EAAA,uDAAA,WAAqCzQ,OAAOJ;AAA5C,AAAqD,OAACsD,0BAAU,4CAAA,WAAAkO,vDAACjK;AAAD,AAAM,0HAAAiK,iEAAAA,nLAAC9Q,0DAAAA,qFAAAA,XAAYV,iEAAAA;GAAS,AAACM,kDAAWF,OAAOJ;;AAE/G,AAAA6Q,8EAAA,mDAAA,WAAmCzP,EAAEA;AAArC,AAAwC,OAAC0P,iCAAgBQ;;AACzD,AAAAT,8EAAA,sDAAA,WAAoCzP,EAAEA;AAAtC,AAAyC4P;;AACzC,AAAAH,8EAAA,iDAAA,WAAmCzP,EAAEA;AAArC,AAAwCnB;;AACxC,AAAA4Q,8EAAA,0DAAA,WAAsCzQ,OAAOJ;AAA7C,AAAsD,OAACuF,4BAAYnF,OAAOJ;;AAC1E,AAAA6Q,8EAAA,oDAAA,WAAmCzQ,OAAOJ;AAA1C,AAAmD,OAACyR,kDAAmB,AAACxP,yBAAS7B,OAAOJ;;AACxF,AAAA6Q,8EAAA,wDAAA,WAAsCzQ,OAAOJ;AAA7C,AAAsD,OAAC0P,2BAAWtP,OAAOJ;;AACzE,AAAA6Q,8EAAA,wDAAA,WAAqCzQ,OAAOJ;AAA5C,AAAqD,OAAC0P,2BAAWtP,OAAOJ;;AACxE,AAAA6Q,8EAAA,4DAAA,WAAuCzP,EAAEA;AAAzC,AAA4CsQ;;AAC5C,AAAAb,8EAAA,0DAAA,WAAuCzP,EAAEA;AAAzC,AAA4C2N;;AAC5C,AAAA8B,8EAAA,0DAAA,WAAsCzP,EAAEA;AAAxC,AAA2CgO;;AAC3C,AAAAyB,8EAAA,8EAAA,WAAiDzQ,OAAOgB;AAAxD,AAA2D,OAACyN,uCAAuBzO;;AACnF,AAAAyQ,8EAAA,6EAAA,WAAgDzQ,OAAOgB;AAAvD,AAA0D,OAAC8N,sCAAsB9O;;AACjF,AAAAyQ,8EAAA,sDAAA,WAAoCzP,EAAEA;AAAtC,AAAyCuQ;;AAEzC,AAAAd,8EAAA,iDAAA,WAAkCzQ,OAAOJ;AAAzC,AAAkD,OAACsM,8BAAQlM,OAAOJ;;AAClE,AAAA6Q,8EAAA,gDAAA,WAAkCzQ,OAAOJ;AAAzC,AAAkD,OAACsM,8BAAQlM,OAAOJ;;AAClE,AAAA6Q,8EAAA,8DAAA,WAAwCzQ,OAAOJ;AAA/C,AAAwD,OAAC6M,8BAAczM,OAAOJ;;AAC9E,AAAA6Q,8EAAA,AAAA,0DAAA,WAAoCzP,EAAEA;AAAtC,AAAyC2N;;AACzC,AAAA8B,8EAAA,mDAAA,WAAmCzQ,OAAOJ;AAA1C,AAAmD,OAACqL,yBAASjL,OAAOJ;;AACpE,AAAA6Q,8EAAA,0DAAA,WAAsCzQ,OAAOJ;AAA7C,AAAsD,IAAA4R,YAAW,AAAChG,+CAAQxL;IAApByR,YAA4B7R;AAA5B,AAAA,0HAAA4R,UAAAC,iDAAAD,UAAAC,vLAACnR,0DAAAA,+EAAAA;;AACvD,AAAAmQ,8EAAA,6EAAA,WAAyCzQ,OAAOJ;AAAhD,AAAyD,IAAA8R,YAAW,AAAClG,+CAAQxL;IAApB2R,YAA4B/R;AAA5B,AAAA,0HAAA8R,UAAAC,iDAAAD,UAAAC,vLAACrR,0DAAAA,+EAAAA;;AAE1D,AAAAmQ,8EAAA,wDAAA,WAAqCzQ,OAAOJ;AAA5C,AAAqD,IAAAgS,YAAW,AAACpG,+CAAQxL;IAApB6R,YAA4BjS;AAA5B,AAAA,0HAAAgS,UAAAC,iDAAAD,UAAAC,vLAACvR,0DAAAA,+EAAAA;;AACtD,AAAAmQ,8EAAA,uDAAA,WAAqCzQ,OAAOJ;AAA5C,AAAqD,IAAAkS,YAAW,AAACtG,+CAAQxL;IAApB+R,YAA4BnS;AAA5B,AAAA,0HAAAkS,UAAAC,iDAAAD,UAAAC,vLAACzR,0DAAAA,+EAAAA;;AACtD,AAAAmQ,8EAAA,mEAAA,WAA2CzQ,OAAOJ;AAAlD,AAA2D,IAAAoS,YAAW,AAACxG,+CAAQxL;IAApBiS,YAA4BrS;AAA5B,AAAA,0HAAAoS,UAAAC,iDAAAD,UAAAC,vLAAC3R,0DAAAA,+EAAAA;;AAE5D,AAAAmQ,8EAAA,oDAAA,WAAmCzQ,OAAOJ;AAA1C,AAAmD,OAACsN,yBAASlN,OAAOJ;;AACpE,AAAA6Q,8EAAA,oDAAA,WAAoCzQ,OAAOJ;AAA3C,AAAoD,OAACsN,yBAASlN,OAAOJ;;AACrE,AAAA6Q,8EAAA,iDAAA,WAAmCzQ,OAAOJ;AAA1C,AAAmD,OAACwN,yBAASpN,OAAOJ;;AACpE,AAAA6Q,8EAAA,qDAAA,WAAoCzQ,OAAOJ;AAA3C,AAAoD,OAACwN,yBAASpN,OAAOJ;;AAErE,AAAA6Q,8EAAA,gDAAA,WAAiCzQ,OAAOJ;AAAxC,AAAiD,OAAC0N,6BAAOtN,OAAOJ;;AAChE,AAAA6Q,8EAAA,gDAAA,WAAiCzQ,OAAOJ;AAAxC,AAAiD,OAAC4N,4BAAOxN,OAAOJ;;AAChE,AAAA6Q,8EAAA,+CAAA,WAAiCzQ,OAAOJ;AAAxC,AAAiD,OAACiO,4BAAO7N,OAAOJ;;AAChE,AAAA6Q,8EAAA,wDAAA,WAAsCzQ,OAAOJ;AAA7C,AAAsD,OAACkO,4BAAY9N,OAAOJ;;AAM1E,sCAAA,tCAAOsS,oFAAqB1C;AAA5B,AACE,GAAM,gCAAA,hCAAC2C,0BAAU3C;AAAjB,AACE,OAAC1P,sCAAW,AAAA,6FAAa0P;;AAD3B;;;AAGF,wCAAA,xCAAO4C,wFAAuB5C;AAA9B,AACE,IAAA6C,YAAQ,AAAA,+FAAe7C;AAAvB,AAAA,GAAA,CAAA6C,aAAA;AAAA;;AAAA,oCAAAA,7BAA8BlD;;;AAEhC,AAAA,AAAA,CAAAzP,0BAAA,OAAA;;AAAA,CAAAJ,2BAAA,OAEE,WAAaU,OAAOJ;AAApB,AACE,OAAC6Q,gEAAkBzQ,OAAO,sDAAA,tDAACmB,8CAAMvB,qIAAoCI;;AAEzE,mCAAA,nCAAOsS,8EACJ9C,MAAMxP,OAAOJ;AADhB,AAEE,IAAAyC,mBAAI,AAAA,qFAAUmN;AAAd,AAAA,oBAAAnN;AAAAA;;AACI,oBAAU,AAAA,+FAAemN;AAAzB;;AAAA,AACE,OAAClQ,2BAAWU,OAAOJ;;;;AAE3B,sCAAA,tCAAO2S,oFAAqB/C,MAAM5P;AAAlC,AACE,IAAA4S,YAAQ,AAAA,6FAAahD;AAArB,AAAA,GAAA,CAAAgD,aAAA;AAAA;;AAA4B,0HAAAA,yDAAAA,3KAAClS,0DAAAA,6EAAAA,XAAUV,yDAAAA;;;AAEzC,oCAAA,pCAAO6S,gFAAmB7P,IAAI4M,MAAMxP,OAAOJ;AAA3C,AACE,IAAA8S,qBAAiB,AAAA,yFAAWlD;AAA5B,AAAA,GAAA,CAAAkD,sBAAA;AAAA;;AAAA,WAAAA,PAAYC;AAAZ,AACE,OAAC9P,mCAAS,AAAC+P,8CAAOD,KAAK,iBAAAtQ,mBAAIzC;AAAJ,AAAA,oBAAAyC;AAAAA;;AAAY,OAACwG,iDAAU7I;;MACpC4C;;;AAEd,0BAAA,1BAAOiQ,4DAAS7S,OAAOJ;AAAvB,AACE,IAAM4P,QAAM,AAACsD,uBAAO,AAACC,yDAAkB/S,QACnB,AAACmC,oDAAanC;IAC5B4C,MAAI,iBAAAP,mBAAI,AAAC6P,oCAAoB1C;AAAzB,AAAA,oBAAAnN;AAAAA;;AAAA,IAAAA,uBACI,AAAC+P,sCAAsB5C;AAD3B,AAAA,oBAAAnN;AAAAA;;AAAA,IAAAA,uBAEI,AAACkQ,oCAAoB/C,MAAM5P;AAF/B,AAAA,oBAAAyC;AAAAA;;AAAA,IAAAA,uBAGI,AAACiQ,iCAAiB9C,MAAMxP,OAAOJ;AAHnC,AAAA,oBAAAyC;AAAAA;;AAII,4DAAA,iGAAA,2CAAA,iEAAA,lQAACpB,0PAAkCrB,kEACDI;;;;;;AAPhD,AAQE,IAAAqC,mBAAI,AAACoQ,kCAAkB7P,IAAI4M,MAAMxP,OAAOJ;AAAxC,AAAA,oBAAAyC;AAAAA;;AACIO;;;AAMR,AAAA,4BAAA,oCAAA0C,hEAAMhF;AAAN,AAAA,IAAA0S,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAA1S,wDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,wDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAmF,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,0DAAA,1DAAMnF,qEACF2S;AADJ,AAEG,6EAAA,tEAACC,wDAAUD;;;AAFd,CAAA,0DAAA,1DAAM3S,qEAGF2S,cAAQrT;AAHZ,AAIG,oBAAI,AAAA,oHAAWA;AAEb,OAACiT,wBAAQ,AAACM,gDAASF,cAAQrT,SAASA;;AACpC,iGAAA,+DAAA,WAAAwT,pKAACC,mBAAU,AAACF,gDAASF,cAAQrT;AAA7B,AAAkD,+BAAAwT,xBAACP,0CAAUjT;;;;;AAPlE,CAAA,oDAAA,pDAAMU;;AAAN,AASA,AAAA,2BAAA,mCAAAgF,9DAAMkH;AAAN,AAAA,IAAA8G,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAA9G,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA/G,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yDAAA,zDAAM+G,oEACFiH;AADJ,AAEG,mFAAA,5EAACC,uDAASD;;;AAFb,CAAA,yDAAA,gCAAAF,zFAAM/G,oEAGFiH;AAHJ,AAAA,IAAAD,cAAAD;IAAAC,kBAAA,AAAA/S,4BAAA+S;cAAAA,VAGwD5T;WAHxD,AAAAc,4CAAA8S,gBAAA,nEAG2B7R;WAH3B,AAAAjB,4CAAA8S,gBAAA,qDAAA,xHAGgCG;AAHhC,AAIG,IAAM/Q,MAAI,EAAI,AAACgR,+CAAeH,uBAAgBA,qBAAe,AAACP,wDAAUO,qBAAe7T;AAAvF,AACE,OAACiU,kCAAU,AAACC,uCAAalR,IAAI,AAAClB,wBAAQC,MAAMgS;;;AALjD,CAAA,mDAAA,nDAAMnH;;AAAN,AAOA,AAAA,yBAAA,iCAAAlH,1DAAM0O;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,qDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,qDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAvO,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,uDAAA,vDAAMuO,kEACFP;AADJ,AAEG,iFAAA,1EAACU,qDAAOV;;;AAFX,CAAA,uDAAA,gCAAAQ,vFAAMD,kEAGFP;AAHJ,AAAA,IAAAS,cAAAD;IAAAC,kBAAA,AAAAzT,4BAAAyT;cAAAA,VAGwDtU;WAHxD,AAAAc,4CAAAwT,gBAAA,nEAG2BvS;WAH3B,AAAAjB,4CAAAwT,gBAAA,qDAAA,xHAGgCP;AAHhC,AAIG,IAAM/Q,MAAI,EAAI,AAACgR,+CAAeH,uBAAgBA,qBAAe,AAACP,wDAAUO,qBAAe7T;AAAvF,yDAEO,4CAAA,WAAAyU,kBAAAC,zEAACnN,zDAED,OAACqN,6CAAKb;AAFN,AAAM,OAACE,kCAAU,2CAAAQ,kBAAAC,7DAACR,uCAAalR;mFAD/B,AAACwR,kDAAwBT,lIAEpB,AAACY,iDAAuB,AAAC7S,wBAAQC;;;AAPhD,CAAA,iDAAA,jDAAMqS;;AAAN,AAcA,AAAA,mCAAA,2CAAA1O,9EAAMoP;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,+DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,+DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAjP,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,iEAAA,jEAAMiP,4EACFzB;AADJ,AACa,oFAAA,7EAAC4B,+DAAiB5B;;;AAD/B,CAAA,iEAAA,yBAAA0B,1FAAMD,4EAEFzB;AAFJ,AAAA,IAAA2B,cAAAD;IAAAC,kBAAA,AAAAnU,4BAAAmU;cAAAA,VAE8DhV;yBAF9D,AAAAc,4CAAAkU,gBAAA,mGAAA,pLAEqBE;AAFrB,AAGG,IAAM9U,SAAO,AAACmT,gDAASF,cAAQrT;IACzBmV,OAAK,WAAKpS;AAAL,AAAQ,IAAA,AAAA,+KAAA,rFAAM,CAACA,kCAAAA,oCAAAA;iBAAP,GAAA,CAAAqS,mBAAgDvP;AAAhD,QAAAuP,JAA0DvM;AAA1D,AAAA,4FAAA,FAA6DA;;AAA7D,AAAA,MAAAuM;;;;IACbC,QAAM,WAAKjV;AAAL,AACE,IAAAkV,cAAmC,AAAC5I,0BAAiBtM;IAArDkV,kBAAA,AAAAzU,4BAAAyU;YAAA,AAAAxU,4CAAAwU,gBAAA,pEAAcC;aAAd,AAAAzU,4CAAAwU,gBAAA,rEAAoBE;YAApB,AAAA1U,4CAAAwU,gBAAA,pEAA2BG;IACrBC,kBAAgB,AAACpC,wDAAUiC,MAAMvV;IACjC2V,sBAAc,AAACnP,mDAAYgP,OAAOxV;IAClC4V,qBAAa,kBAAIH,OAAM,AAACjP,mDAAYiP,MAAMzV,SAAS,qBAAA,rBAAC6V;IACpDC,WAAS,WAAK/S,EAAEgT;AAAP,AAAa,QAAM,AAAC3S,8CAAML,EAAEgT,pDAAMC;AAArB,AAAuB,IAAAxT,oBAAK,CAACmT,oDAAAA,uDAAAA,LAAcK,mCAAAA;AAApB,AAAA,oBAAAxT;AAAuB,IAAAyT,YAAA,mFAAeF,KAAKC;AAApB,AAAA,4GAAAC,0CAAAA,9IAACL,mDAAAA,8DAAAA;;AAAxBpT;;;AAJnD,AAKE,kBAAKO;AAAL,AACE,IAAAmT,gEAAmC,4CAAA,2GAAA,WAAAG,lKAACC,+HAAeZ,jLAChB,AAACa,+BAAkBrB;AADnB,AAAkC,kBAAAmB,XAACP,SAAS/S;;IAA/EmT,kBAAA,AAAArV,4BAAAqV;aAAA,AAAApV,4CAAAoV,gBAAA,rEAAcC;aAAd,AAAArV,4CAAAoV,gBAAA,rEAAqBE;IAEfI,WAAS,gBAAA,AAAA,2FAAIJ,3GAAiB/V;AAFpC,AAGE,GAAU,AAAO8V;AAAjB;;AAAA,AACE,IAAMO,gBAAc,AAACC,iDAAUpB,MAAMiB;IAArCC,cACuB,iCAAA,KAAA,pBAAUC,oBAAc,AAACvB,KAAK;AAAA,AAAO,OAAC/R,8CAAML,EAAEyT;;iBADrE,AAAAzP,4CAAA0P,YAAA,IAAA,zEACON;cADP,AAAApP,4CAAA0P,YAAA,IAAA,tEACcG;IACRC,iBAAe,kBAAM,iBAAArU,oBAAKoU;AAAL,AAAA,oBAAApU;AAAa,OAACyK,cAAIyJ;;AAAlBlU;;MAAN,oEAAA,pEAAwC,AAACmU,iDAAUnB,OAAOW;IACzEW,gBAAc,kBAAM,iBAAAtU,oBAAKoU;AAAL,AAAA,oBAAApU;AAAA,IAAAA,wBAAaiT;AAAb,AAAA,oBAAAjT;AAAmB,OAACyK,cAAI4J;;AAAxBrU;;;AAAAA;;MAAN,uKAAA,vKAA+C,uDAAA,vDAACmU,iDAAUlB,yFAAOe,SAASL;AAH9F,AAIE,IAAAY,YAAQ,qDAAA,rDAACxV,8CAAM6U,mFAAkBD;IAAjCY,gBAAA,kMAAAA,hLACEL,eAAc,8CAAAK,UAAA,xDAACxV,kJAAwBmV;IADzCK,gBAAA,0MAAAA,xLAEEF,gBAAe,8CAAAE,cAAA,5DAACxV,wJAAyBsV;IAF3CE,gBAAA,uMAAAA,rLAGED,eAAc,8CAAAC,cAAA,5DAACxV,uJAAwBuV;AAHzC,AAAA,oBAIE,AAACE,qBAAWb;sDAAY,+CAAAY,cAAA,7DAAC7S,sHAAe8S,5KAAY,kMAAA,3LAAChJ;;AAJvD+I;;;;;AAjBxB,AAsBE,oBAAI,AAACrK,0BAAiBtM;AACpB,OAACiV,MAAMjV;;AACP,oBAAI,AAAC6W,mCAAoB7W;AACvB,IAAM8W,WAAS,4CAAA,WAAAC,vDAAC5P;AAAD,AAAM,sEAAA4P,/DAAClC,iFAAmBjV;GAAS,AAACoX,oCAA2BhX;AAA9E,AACE,kBAAKiX;AAAL,qBAAsB,6CAAA,WAAAC,xDAACzQ,rBAAa,OAAC0Q;AAAf,AAAO,QAAAD,kDAAAA,qDAAAA,LAAGD,iCAAAA;GAAnBH;;;AACf,4DAAA,yHAAA,2CAAA,zNAAC7V,8QAA0C,AAACmW,iBAAQpX;;;;;AA9B7D,CAAA,2DAAA,3DAAM0U;;AAAN,AAgCA,AAAA,wBAAA,gCAAApP,xDAAMgS;AAAN,AAAA,IAAAD,YAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,oDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA7R,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,sDAAA,tDAAM6R,iEACFrE,cAAQtQ;AADZ,AACe,2EAAA,pEAAC4U,oDAAMtE,cAAQtQ;;;AAD9B,CAAA,sDAAA,tDAAM2U,iEAEFrE,cAAQtQ,EAAE/C;AAFd,AAGG,IAAMI,SAAO,AAACmT,gDAASF,cAAQrT;AAA/B,AACE,OAAC2W,iDAAU,kCAAA,WAAAiB,7CAACC,2BAAkBzX;AAAnB,AAA2B,qDAAAwX,kBAAA,hEAACrW,gKAA6BuT;IAAmB/R;;;AAJ5F,CAAA,gDAAA,hDAAM2U;;AAAN","names":["malli$generator$Generator$_generator$dyn","x__5373__auto__","m__5374__auto__","malli.generator/-generator","goog/typeOf","m__5372__auto__","cljs.core/missing-protocol","malli.generator/Generator","this","options","malli.generator/nil-gen","clojure.test.check.generators/return","malli.generator/-child","schema","cljs.core/first","malli.core.children","malli.generator/-child-gen","G__106987","G__106988","malli.generator/generator","p__106989","map__106990","cljs.core/--destructure-map","cljs.core.get","malli.generator/-never-gen","original-generator-schema","_options","cljs.core/with-meta","clojure.test.check.generators/sized","_","malli.core._fail_BANG_","G__106992","cljs.core.assoc","malli.generator/-unreachable-gen?","g","cljs.core/meta","cljs.core/boolean","malli.generator/-not-unreachable","malli.generator/-unreachable","malli.generator/-random","seed","clojure.test.check.random.make_random","malli.generator/-min-max","map__107000","min","max","gen-min","gen-max","malli.core.properties","and__5023__auto__","or__5025__auto__","malli.generator/inf-nan","map__107003","infinite?","NaN?","malli.generator/gen-fmap","f","gen","clojure.test.check.generators/fmap","malli.generator/gen-fcat","p1__107007#","cljs.core.apply","cljs.core/concat","malli.generator/gen-tuple","gens","cljs.core/some","clojure.test.check.generators/tuple","malli.generator/gen-maybe","clojure.test.check.generators/one-of","malli.generator/double-default","malli.generator/gen-double","opts","clojure.test.check.generators/double*","cljs.core.into","p1__107013#","cljs.core.update","G__107016","p1__107014#","G__107018","p__107022","map__107023","malli.generator/gen-vector","cljs.core._EQ_","clojure.test.check.generators.vector","cljs.core.vary_meta","p1__107019#","cljs.core/assoc","p__107027","map__107028","malli.generator/gen-vector-distinct-by","m","clojure.test.check.generators.vector_distinct_by","p1__107025#","cljs.core/max","clojure.set/rename-keys","malli.core/-exception","malli.generator/-string-gen","clojure.string/join","clojure.test.check.generators/char-alphanumeric","var_args","G__107033","malli.generator/-coll-gen","js/Error","malli.generator._coll_gen","cljs.core/identity","malli.generator/gen-vector-distinct","malli.generator/-coll-distinct-gen","p1__107037#","malli.generator/->such-that-opts","malli.generator/gen-such-that","pred","clojure.test.check.generators.such_that","malli.generator/-and-gen","malli.core.validator","malli.generator/gen-one-of","gs","temp__5825__auto__","cljs.core/not-empty","cljs.core.keep","cljs.core/count","cljs.core.nth","malli.generator/-seqable-gen","map__107048","el","G__107050","cljs.core.conj","p1__107047#","p1__107046#","cljs.core.map","cljs.core/vec","cljs.core/eduction","cljs.core.into_array","cljs.core/set","G__107049","malli.core.type","vec__107052","k","v","G__107055","G__107056","malli.generator/-or-gen","p1__107057#","malli.generator/-merge-keyword-dispatch-map-into-entries","dispatch","G__107059","cljs.core/Keyword","p1__107058#","malli.util.transform_entries","p__107060","vec__107061","e","G__107064","cljs.core.not_EQ_","malli.util/merge","malli.core.options","malli.generator/-multi-gen","p1__107065#","G__107066","G__107067","cljs.core/last","malli.core.entries","malli.generator/-build-map","kvs","cljs.core/persistent!","cljs.core.reduce","p__107068","vec__107069","acc","cljs.core/map?","cljs.core/reduce-kv","cljs.core/assoc!","cljs.core.assoc_BANG_","cljs.core/transient","p__107073","vec__107074","malli.generator/-entry-gen","s","G__107077","p1__107072#","malli.generator/-map-gen","p1__107079#","malli.generator/-map-of-gen","p1__107080#","p1__107081#","p1__107082#","malli.generator/-identify-ref-schema","malli.core/-options","malli.core._registry","malli.registry/-schemas","malli.core/-ref","malli.generator/-ref-gen","ref-id","cljs.core/force","cljs.core.get_in","scalar-ref-gen","cljs.core/Delay","dschema","malli.core.deref","G__107084","G__107085","G__107086","cljs.core/assoc-in","cljs.core/realized?","p1__107083#","clojure.test.check.generators/recursive-gen","G__107090","G__107091","malli.generator/-=>-gen","output-generator","G__107092","G__107093","malli.core/-function-info","malli.core._instrument","malli.generator/generate","malli.generator/-function-gen","p1__107094#","malli.generator/-regex-generator","G__107095","cljs.core/not","malli.core/-regex-op?","cljs.core/PersistentVector","malli.generator/-re-entry-gen","cljs.core/vector?","malli.generator/-cat-gen","p1__107096#","malli.generator/-alt-gen","p1__107097#","malli.generator/-?-gen","child","malli.generator/-*-gen","G__107098","G__107099","G__107100","cljs.core.dissoc","malli.generator/-+-gen","malli.generator/-repeat-gen","G__107101","G__107102","malli.generator/-qualified-ident-gen","mk-value-with-ns","value-with-ns-gen-size","temp__5821__auto__","namespace-unparsed","G__107107","G__107108","cljs.core/name","malli.generator/-qualified-keyword-gen","cljs.core/keyword","clojure.test.check.generators/keyword","cljs.core/qualified-keyword?","clojure.test.check.generators/keyword-ns","malli.generator/-qualified-symbol-gen","cljs.core/symbol","clojure.test.check.generators/symbol","cljs.core/qualified-symbol?","clojure.test.check.generators/symbol-ns","malli.generator/gen-elements","es","clojure.test.check.generators/elements","malli.generator/double-gen","cljs.core.merge","props","p1__107109#","G__107112","p1__107110#","G__107113","js/malli","js/malli.generator","js/malli.generator.-schema-generator","method-table__5622__auto__","cljs.core.atom","prefer-table__5623__auto__","method-cache__5624__auto__","cached-hierarchy__5625__auto__","hierarchy__5626__auto__","fexpr__107114","cljs.core/MultiFn","cljs.core.symbol","malli.generator/-schema-generator","cljs.spec.gen.alpha/gen-for-pred","p1__107115#","clojure.test.check.generators/any-printable","cljs.core/inc","clojure.test.check.generators/nat","cljs.core.comp","cljs.core/dec","cljs.core/-","cljs.core/any?","malli.core.into_schema","p1__107116#","clojure.test.check.generators/large-integer*","clojure.test.check.generators/boolean","clojure.test.check.generators/uuid","G__107117","G__107118","G__107119","G__107120","G__107121","G__107122","G__107123","G__107124","G__107125","G__107126","malli.generator/-create-from-return","cljs.core/contains?","malli.generator/-create-from-elements","G__107127","malli.generator/-create-from-gen","malli.generator/-create-from-schema","G__107129","malli.generator/-create-from-fmap","temp__5827__auto__","fmap","malli.core.eval","malli.generator/-create","malli.impl.util/-merge","malli.core.type_properties","G__107132","?schema","malli.generator.generator","malli.core.schema","p1__107130#","malli.core/-cached","G__107134","p__107136","map__107137","?gen-or-schema","malli.generator.generate","size","clojure.test.check.generators/generator?","clojure.test.check.rose-tree/root","clojure.test.check.generators/call-gen","G__107141","malli.generator/sample","p__107142","map__107143","malli.generator.sample","clojure.test.check.generators/make-size-range-seq","p1__107138#","p2__107139#","clojure.test.check.generators/lazy-random-states","cljs.core.take","G__107148","malli.generator/function-checker","p__107149","map__107150","malli.generator.function_checker","=>iterations","-try","e107151","check","map__107152","input","output","guard","input-generator","valid-output?","valid-guard?","cljs.core/constantly","validate","args","$","G__107153","map__107154","result","shrunk","p1__107144#","clojure.test.check.properties/for-all*","clojure.test.check/quick-check","smallest","vec__107155","explain-input","malli.core.explain","success","explain-output","explain-guard","G__107158","cljs.core/ex-message","malli.core/-function-schema?","checkers","p1__107145#","malli.core/-function-schema-arities","x","p1__107146#","cljs.core/seq","malli.core/-type","G__107161","malli.generator/check","malli.generator.check","p1__107159#","malli.core/-update-options"],"sourcesContent":[";; See also `malli.generator-ast` for viewing generators as data\n(ns malli.generator\n  (:require [clojure.set :as set]\n            [clojure.spec.gen.alpha :as ga]\n            [clojure.string :as str]\n            [clojure.test.check :as check]\n            [clojure.test.check.generators :as gen]\n            [clojure.test.check.properties :as prop]\n            [clojure.test.check.random :as random]\n            [clojure.test.check.rose-tree :as rose]\n            [malli.core :as m]\n            [malli.registry :as mr]\n            [malli.util :as mu]\n            [malli.impl.util :refer [-last -merge]]\n            #?(:clj [borkdude.dynaload :as dynaload])))\n\n(declare generator generate -create gen-one-of gen-double)\n\n(defprotocol Generator\n  (-generator [this options] \"returns generator for schema\"))\n\n;;\n;; generators\n;;\n\n\n;; # Notes for implementors\n;;\n;; For the most part, -schema-generator is a pretty direct translation from schemas to generators.\n;; However, the naive implementation of recursive ref's (creating a generator for the dereferenced ref\n;; and cutting off the generation at a certain depth) tends to create exponentially large test cases.\n;;\n;; We use a more sophisticated algorithm to achieve linearly sized test cases with recursive refs.\n;; The next section describes the strategy implementors should use to participate in this improved behavior.\n;; The theory behind this strategy is described in the section below (\"Approach for recursive generators\").\n;;\n;; ## Implementation strategy\n;;\n;; Say you have a composite schema you want to generate values for. You should extend `-schema-generator` and\n;; call `generator` recursively on the `m/children`. Now, for every child generator, you need to consider the case\n;; that the child generator generates no values, and how this might change the final generator.\n;;\n;; Use `-unreachable-gen?` to test whether your child generator generates no values (we'll call this an \"unreachable\" schema/generator).\n;; If your parent generator cannot generate values, use `-never-gen` to return an unreachable generator.\n;; \n;; Here are a few examples---compare them with the logic in their respective -schema-generator methods:\n;;   [:maybe M] would generate like :nil if M were unreachable.\n;;   [:map [:a M]] would itself be unreachable if M were unreachable.\n;;   [:map [:a {:optional true} M]] would generate like [:map] if M were unreachable.\n;;   [:vector M] would generate like [:= []] if M were unreachable.\n;;   [:vector {:min 1} M] would itself be unreachable if M were unreachable.\n\n(def nil-gen (gen/return nil))\n\n(defn- -child [schema options] (first (m/children schema options)))\n(defn- -child-gen [schema options] (generator (-child schema options) options))\n\n(defn -never-gen\n  \"Return a generator of no values that is compatible with -unreachable-gen?.\"\n  [{::keys [original-generator-schema] :as _options}]\n  (with-meta (gen/sized (fn [_]\n                          (m/-fail! ::unsatisfiable-schema\n                                    (cond-> {}\n                                      original-generator-schema (assoc :schema original-generator-schema)))))\n             {::never-gen true\n              ::original-generator-schema original-generator-schema}))\n\n(defn -unreachable-gen?\n  \"Returns true iff generator g generators no values.\"\n  [g] (-> (meta g) ::never-gen boolean))\n\n(defn -not-unreachable [g] (when-not (-unreachable-gen? g) g))\n(defn -unreachable [g] (when (-unreachable-gen? g) g))\n\n(defn- -random [seed] (if seed (random/make-random seed) (random/make-random)))\n\n(defn -min-max [schema options]\n  (let [{:keys [min max] gen-min :gen/min gen-max :gen/max} (m/properties schema options)]\n    (when (and min gen-min (< gen-min min))\n      (m/-fail! ::invalid-property {:key :gen/min, :value gen-min, :min min}))\n    (when (and max gen-max (> gen-max max))\n      (m/-fail! ::invalid-property {:key :gen/max, :value gen-min, :max min}))\n    {:min (or gen-min min)\n     :max (or gen-max max)}))\n\n(defn- inf-nan [schema options]\n  (let [{:gen/keys [infinite? NaN?]} (m/properties schema)]\n    {:infinite? infinite? :NaN? NaN?}))\n\n(defn- gen-fmap [f gen] (or (-unreachable gen) (gen/fmap f gen)))\n(defn- gen-fcat [gen] (gen-fmap #(apply concat %) gen))\n(defn- gen-tuple [gens] (or (some -unreachable gens) (apply gen/tuple gens)))\n(defn- gen-maybe [g] (if (-unreachable-gen? g) nil-gen (gen/one-of [nil-gen g])))\n(def ^:private double-default {:infinite? false, :NaN? false})\n(defn- gen-double [opts] (gen/double* (-> (into double-default opts) (update :min #(some-> % double)) (update :max #(some-> % double)))))\n\n(defn- gen-vector [{:keys [min max]} g]\n  (cond\n    (-unreachable-gen? g) (if (zero? (or min 0)) (gen/return []) g)\n    (and min (= min max)) (gen/vector g min)\n    (and min max) (gen/vector g min max)\n    min (vary-meta (gen/sized #(gen/vector g min (+ min %))) assoc ::generator-ast {:op :vector-min :generator g :min min})\n    max (gen/vector g 0 max)\n    :else (gen/vector g)))\n\n(defn- gen-vector-distinct-by [schema {:keys [min] :as m} f g]\n  (if (-unreachable-gen? g)\n    (if (= 0 (or min 0)) (gen/return []) g)\n    (gen/vector-distinct-by f g (-> (assoc (if (and min (= min max))\n                                             {:num-elements min}\n                                             (set/rename-keys m {:min :min-elements :max :max-elements}))\n                                           :ex-fn #(m/-exception ::distinct-generator-failure (assoc % :schema schema)))))))\n\n(defn- -string-gen [schema options]\n  (gen-fmap str/join (gen-vector (-min-max schema options) gen/char-alphanumeric)))\n\n(defn- -coll-gen\n  ([schema options] (-coll-gen schema identity options))\n  ([schema f options] (gen-fmap f (gen-vector (-min-max schema options) (-child-gen schema options)))))\n\n(defn- gen-vector-distinct [schema m g] (gen-vector-distinct-by schema m identity g))\n\n(defn- -coll-distinct-gen [schema f options]\n  (gen-fmap f (gen-vector-distinct schema (-min-max schema options) (-child-gen schema options))))\n\n(defn- ->such-that-opts [schema] {:max-tries 100 :ex-fn #(m/-exception ::such-that-failure (assoc % :schema schema))})\n(defn- gen-such-that [schema pred gen] (or (-unreachable gen) (gen/such-that pred gen (->such-that-opts schema))))\n\n(defn -and-gen [schema options]\n  (gen-such-that schema (m/validator schema options) (-child-gen schema options)))\n\n(defn- gen-one-of [options gs]\n  (if-some [gs (not-empty (into [] (keep -not-unreachable) gs))]\n    (if (= 1 (count gs)) (nth gs 0) (gen/one-of gs))\n    (-never-gen options)))\n\n(defn- -seqable-gen [schema options]\n  (let [{:keys [min]} (-min-max schema options)\n        el (-child schema options)]\n    (gen-one-of\n     options\n     (-> []\n         (cond->\n           (or (nil? min) (zero? min))\n           (conj nil-gen))\n         (into (map #(-coll-gen schema % options))\n               [identity vec eduction #(into-array #?(:clj Object) %)])\n         (conj (-coll-distinct-gen schema set options))\n         (cond->\n           (and (= :tuple (m/type el))\n                (= 2 (count (m/children el))))\n           (conj (let [[k v] (m/children el)]\n                   (generator [:map-of (or (m/properties schema) {}) k v] options))))))))\n\n(defn -or-gen [schema options]\n  (gen-one-of options (map #(generator % options) (m/children schema options))))\n\n(defn- -merge-keyword-dispatch-map-into-entries [schema]\n  (let [dispatch (-> schema m/properties :dispatch)]\n    (cond-> schema\n      (keyword? dispatch)\n      (mu/transform-entries\n       #(map (fn [[k :as e]]\n               (cond-> e\n                 (not= ::m/default k)\n                 (update 2 mu/merge [:map [dispatch [:= nil k]]]))) %)\n       (m/options schema)))))\n\n(defn -multi-gen [schema options]\n  (gen-one-of options (map #(generator (last %) options) (m/entries (-merge-keyword-dispatch-map-into-entries schema) options))))\n\n(defn- -build-map [kvs]\n  (persistent!\n   (reduce\n    (fn [acc [k v]]\n      (cond (and (= k ::m/default) (map? v)) (reduce-kv assoc! acc v)\n            (nil? k) acc\n            :else (assoc! acc k v)))\n    (transient {}) kvs)))\n\n(defn- -entry-gen [[k s] options]\n  (cond->> (gen-fmap #(do [k %]) (generator s options)) (-> s m/properties :optional) gen-maybe))\n\n(defn -map-gen [schema options]\n  (->> schema m/entries (map #(-entry-gen % options)) gen-tuple (gen-fmap -build-map)))\n\n(defn -map-of-gen [schema options]\n  (->> (gen-tuple (map #(generator % options) (m/children schema options)))\n       (gen-vector-distinct-by schema (-min-max schema options) #(nth % 0))\n       (gen-fmap #(into {} %))))\n\n#?(:clj\n   (defn -re-gen [schema options]\n     ;; [com.gfredericks/test.chuck \"0.2.10\"+]\n     (if-let [string-from-regex @(dynaload/dynaload 'com.gfredericks.test.chuck.generators/string-from-regex {:default nil})]\n       (let [re (or (first (m/children schema options)) (m/form schema options))]\n         (string-from-regex (re-pattern (str/replace (str re) #\"^\\^?(.*?)(\\$?)$\" \"$1\"))))\n       (m/-fail! :test-chuck-not-available))))\n\n;; # Approach for recursive generators\n;;\n;; `-ref-gen` is the only place where recursive generators can be created, and we use `gen/recursive-gen`\n;; to handle the recursion. The challenge is that gen/recursive-gen requires _two_ arguments: the base\n;; case (scalar gen) and the recursive case (container gen). We need to automatically split the schema argument into\n;; these two cases.\n;;\n;; The main insight we use is that a base case for the schema cannot contain recursive references to itself.\n;; A particularly useful base case is simply to \"delete\" all recursive references. To simulate this, we have the concept of\n;; an \"unreachable\" generator, which represents a \"deleted\" recursive reference.\n;;\n;; For infinitely expanding schemas, this will return an unreachable generator--when the base case generator is used,\n;; the error message in `-never-gen` will advise users that their schema is infinite.\n;; \n;; \n;; Examples of base cases of some recursive schemas:\n;;\n;; Schema:    [:schema {:registry {::cons [:maybe [:vector [:tuple pos-int? [:ref ::cons]]]]}} ::cons]\n;; Base case: [:schema {:registry {::cons [:nil                                            ]}} ::cons]\n;;\n;; Schema:    [:schema\n;;             {:registry {::ping [:tuple [:= \"ping\"] [:maybe [:ref ::pong]]]\n;;                         ::pong [:tuple [:= \"pong\"] [:maybe [:ref ::ping]]]}}\n;;             ::ping]\n;; Base case: [:schema\n;;             {:registry {::ping [:tuple [:= \"ping\"] [:maybe [:ref ::pong]]]\n;;                         ::pong [:tuple [:= \"pong\"] :nil                  ]}}\n;;             ::ping]\n;;\n;; Once we have the base case, we first need determine if the schema is recursive---it's recursive\n;; if more than one recursive reference was successfully \"deleted\" while creating the base case (see below for how we determine recursive references).\n;; We can then construct the recursive case by providing `gen/recursive-gen` the base case\n;; (this is why this particular base case is so useful) and then propagate the (smaller) generator\n;; supplied by `gen/recursive-gen` to convert recursive references.\n\n;; ## Identifying schema recursion\n;; \n;; Refs are uniquely identified by their paired name and scope. If we see a ref with the\n;; same name and scope as another ref we've dereferenced previously, we know that this is a recursion\n;; point back to the previously seen ref. The rest of this section explains why.\n;; \n;; Refs resolve via dynamic scope, which means its dereferenced value is the latest binding found\n;; while expanding the schema until the point of finding the ref.\n;; This makes the (runtime) scope at the ref's location part of a ref's identity---if the scope\n;; is different, then it's (possibly) not the same ref because scope determines how schemas\n;; transitively expand.\n;;\n;; To illustrate why a ref's name is an insufficient identifier, here is a schema that is equivalent to `[:= 42]`:\n;; \n;;   [:schema {:registry {::a [:schema {:registry {::a [:= 42]}}\n;;                             ;; (2)\n;;                             [:ref ::a]]}}\n;;    ;; (1)\n;;    [:ref ::a]]\n;;\n;; If we identify refs just by name, we would have incorrectly detected (2) to be an (infinitely expanding) recursive\n;; reference.\n;;\n;; In studying the previous example, we might think that since (1) and (2) deref to different schemas, it might sufficient to identify refs just by their derefs.\n;; Unfortunately this just pushes the problem elsewhere.\n;;\n;; For example, here is another schema equivalent to `[:= 42]`:\n;;\n;;   [:schema {:registry {::a [:ref ::b] ;; (2)\n;;                        ::b [:schema {:registry {::a [:ref ::b] ;; (4)\n;;                                                 ::b [:= 42]}}\n;;                             ;; (3)\n;;                             [:ref ::a]]}}\n;;    ;; (1)\n;;    [:ref ::a]]\n;;\n;; If we identified ::a by its deref, it would look like (3) deref'ing to (4)\n;; is a recursion point after witnessing (1) deref'ing to (2), since (2) == (4). Except this\n;; is wrong since it's a different ::b at (2) and (4)! OTOH, if we identified (2) and (4) with their\n;; dynamic scopes along with their form, they would be clearly different. Indeed, this\n;; is another way to identify refs: pairing their derefs with their deref's scopes.\n;; It is slightly more direct to use the ref's direct name and scope, which is why\n;; we choose that identifier. The more general insight is that any schema is identified by its form+scope\n;; (note: but only after trimming the scope of irrelevant bindings, see next pararaph).\n;; That insight may be useful for detecting recursion at places other than refs.\n;; \n;; Ref identifiers could be made smarter by trimming irrelevant entries in identifying scope.\n;; Not all scope differences are relevant, so generators may expand more than strictly necessary\n;; in the quest to find the \"same\" ref schema again. It could skip over refs that generate exactly the\n;; same values, but their scopes are uninterestingly different (eg., unused bindings are different).\n;;\n;; For example, the following schema is recursive \"in spirit\" between (1) and (2), but since ::b\n;; changes, the scope will differ, so the recursion will be detected between (2) and itself instead\n;; (where the scope is constant):\n;;\n;;   [:schema {:registry {::a [:schema {:registry {::b :boolean}}\n;;                             ;; (2)\n;;                             [:or [:ref ::a] [:ref ::b]]]}}\n;;    [:schema {:registry {::b :int}}\n;;     ;; (1)\n;;     [:or [:ref ::a] [:ref ::b]]]]\n\n(defn- -identify-ref-schema [schema]\n  {:scope (-> schema m/-options m/-registry mr/-schemas)\n   :name (m/-ref schema)})\n\n(defn -ref-gen [schema options]\n  (let [ref-id (-identify-ref-schema schema)]\n    (or (force (get-in options [::rec-gen ref-id]))\n        (let [scalar-ref-gen (delay (-never-gen options))\n              dschema (m/deref schema)]\n          (cond->> (generator dschema (assoc-in options [::rec-gen ref-id] scalar-ref-gen))\n            (realized? scalar-ref-gen) (gen/recursive-gen\n                                        #(generator dschema (assoc-in options [::rec-gen ref-id] %))))))))\n\n(defn -=>-gen [schema options]\n  (let [output-generator (generator (:output (m/-function-info schema)) options)]\n    (gen/return (m/-instrument {:schema schema} (fn [& _] (generate output-generator options))))))\n\n(defn -function-gen [schema options]\n  (gen/return (m/-instrument {:schema schema, :gen #(generate % options)} nil options)))\n\n(defn -regex-generator [schema options]\n  (cond-> (generator schema options) (not (m/-regex-op? schema)) (-> vector gen-tuple)))\n\n(defn- -re-entry-gen [e options] (-regex-generator (if (vector? e) (get e 2) e) options))\n\n(defn -cat-gen [schema options]\n  (->> (m/children schema options) (map #(-re-entry-gen % options)) gen-tuple gen-fcat))\n\n(defn -alt-gen [schema options]\n  (->> (m/children schema options) (map #(-re-entry-gen % options)) (gen-one-of options)))\n\n(defn -?-gen [schema options]\n  (let [child (-child schema options)]\n    (if-some [g (-not-unreachable (generator child options))]\n      (if (m/-regex-op? child)\n        (gen/one-of [g (gen/return ())])\n        (gen/vector g 0 1))\n      (gen/return ()))))\n\n(defn -*-gen [schema options]\n  (let [child (-child schema options)]\n    (cond->> (gen-vector (when (= :+ (::-*-gen-mode options)) {:min 1}) (generator child (dissoc options ::-*-gen-mode)))\n      (m/-regex-op? child) gen-fcat)))\n\n(defn -+-gen [schema options]\n  (-*-gen schema (assoc options ::-*-gen-mode :+)))\n\n(defn -repeat-gen [schema options]\n  (or (some-> (-coll-gen schema options) -not-unreachable (cond-> (m/-regex-op? (-child schema options)) gen-fcat))\n      (gen/return ())))\n\n(defn -qualified-ident-gen [schema mk-value-with-ns value-with-ns-gen-size pred gen]\n  (if-let [namespace-unparsed (:namespace (m/properties schema))]\n    (gen-fmap (fn [k] (mk-value-with-ns (name namespace-unparsed) (name k))) value-with-ns-gen-size)\n    (gen-such-that schema pred gen)))\n\n(defn -qualified-keyword-gen [schema]\n  (-qualified-ident-gen schema keyword gen/keyword qualified-keyword? gen/keyword-ns))\n\n(defn -qualified-symbol-gen [schema]\n  (-qualified-ident-gen schema symbol gen/symbol qualified-symbol? gen/symbol-ns))\n\n(defn- gen-elements [es]\n  (if (= 1 (count es))\n    (gen/return (first es))\n    (gen/elements es)))\n\n(defn- double-gen [schema options]\n  (gen/double* (merge (let [props (m/properties schema options)]\n                        {:infinite? (get props :gen/infinite? false)\n                         :NaN? (get props :gen/NaN? false)})\n                      (-> (-min-max schema options)\n                          (update :min #(some-> % double))\n                          (update :max #(some-> % double))))))\n\n(defmulti -schema-generator (fn [schema options] (m/type schema options)) :default ::default)\n\n(defmethod -schema-generator ::default [schema options] (ga/gen-for-pred (m/validator schema options)))\n\n(defmethod -schema-generator :> [schema options] (gen-double {:min (inc (-child schema options))}))\n(defmethod -schema-generator :>= [schema options] (gen-double {:min (-child schema options)}))\n(defmethod -schema-generator :< [schema options] (gen-double {:max (dec (-child schema options))}))\n(defmethod -schema-generator :<= [schema options] (gen-double {:max (-child schema options)}))\n(defmethod -schema-generator := [schema options] (gen/return (-child schema options)))\n(defmethod -schema-generator :not= [schema options] (gen-such-that schema #(not= % (-child schema options)) gen/any-printable))\n(defmethod -schema-generator 'pos? [_ options] (gen/one-of [(gen-double {:min 0.00001}) (gen-fmap inc gen/nat)]))\n(defmethod -schema-generator 'neg? [_ options] (gen/one-of [(gen-double {:max -0.00001}) (gen-fmap (comp dec -) gen/nat)]))\n(defmethod -schema-generator :not [schema options] (gen-such-that schema (m/validator schema options) (ga/gen-for-pred any?)))\n(defmethod -schema-generator :and [schema options] (-and-gen schema options))\n(defmethod -schema-generator :or [schema options] (-or-gen schema options))\n(defmethod -schema-generator :orn [schema options] (-or-gen (m/into-schema :or (m/properties schema) (map last (m/children schema)) (m/options schema)) options))\n(defmethod -schema-generator ::m/val [schema options] (-child-gen schema options))\n(defmethod -schema-generator :map [schema options] (-map-gen schema options))\n(defmethod -schema-generator :map-of [schema options] (-map-of-gen schema options))\n(defmethod -schema-generator :multi [schema options] (-multi-gen schema options))\n(defmethod -schema-generator :vector [schema options] (-coll-gen schema options))\n(defmethod -schema-generator :sequential [schema options] (-coll-gen schema options))\n(defmethod -schema-generator :set [schema options] (-coll-distinct-gen schema set options))\n(defmethod -schema-generator :enum [schema options] (gen-elements (m/children schema options)))\n(defmethod -schema-generator :seqable [schema options] (-seqable-gen schema options))\n(defmethod -schema-generator :every [schema options] (-seqable-gen schema options)) ;;infinite seqs?\n(defmethod -schema-generator :maybe [schema options] (gen-maybe (-child-gen schema options)))\n(defmethod -schema-generator :tuple [schema options] (gen-tuple (map #(generator % options) (m/children schema options))))\n#?(:clj (defmethod -schema-generator :re [schema options] (-re-gen schema options)))\n(defmethod -schema-generator :any [_ _] (ga/gen-for-pred any?))\n(defmethod -schema-generator :some [_ _] gen/any-printable)\n(defmethod -schema-generator :nil [_ _] nil-gen)\n(defmethod -schema-generator :string [schema options] (-string-gen schema options))\n(defmethod -schema-generator :int [schema options] (gen/large-integer* (-min-max schema options)))\n(defmethod -schema-generator :double [schema options] (double-gen schema options))\n(defmethod -schema-generator :float [schema options] (double-gen schema options))\n(defmethod -schema-generator :boolean [_ _] gen/boolean)\n(defmethod -schema-generator :keyword [_ _] gen/keyword)\n(defmethod -schema-generator :symbol [_ _] gen/symbol)\n(defmethod -schema-generator :qualified-keyword [schema _] (-qualified-keyword-gen schema))\n(defmethod -schema-generator :qualified-symbol [schema _] (-qualified-symbol-gen schema))\n(defmethod -schema-generator :uuid [_ _] gen/uuid)\n\n(defmethod -schema-generator :=> [schema options] (-=>-gen schema options))\n(defmethod -schema-generator :-> [schema options] (-=>-gen schema options))\n(defmethod -schema-generator :function [schema options] (-function-gen schema options))\n(defmethod -schema-generator 'ifn? [_ _] gen/keyword)\n(defmethod -schema-generator :ref [schema options] (-ref-gen schema options))\n(defmethod -schema-generator :schema [schema options] (generator (m/deref schema) options))\n(defmethod -schema-generator ::m/schema [schema options] (generator (m/deref schema) options))\n\n(defmethod -schema-generator :merge [schema options] (generator (m/deref schema) options))\n(defmethod -schema-generator :union [schema options] (generator (m/deref schema) options))\n(defmethod -schema-generator :select-keys [schema options] (generator (m/deref schema) options))\n\n(defmethod -schema-generator :cat [schema options] (-cat-gen schema options))\n(defmethod -schema-generator :catn [schema options] (-cat-gen schema options))\n(defmethod -schema-generator :alt [schema options] (-alt-gen schema options))\n(defmethod -schema-generator :altn [schema options] (-alt-gen schema options))\n\n(defmethod -schema-generator :? [schema options] (-?-gen schema options))\n(defmethod -schema-generator :* [schema options] (-*-gen schema options))\n(defmethod -schema-generator :+ [schema options] (-+-gen schema options))\n(defmethod -schema-generator :repeat [schema options] (-repeat-gen schema options))\n\n;;\n;; Creating a generator by different means, centralized under [[-create]]\n;;\n\n(defn- -create-from-return [props]\n  (when (contains? props :gen/return)\n    (gen/return (:gen/return props))))\n\n(defn- -create-from-elements [props]\n  (some-> (:gen/elements props) gen-elements))\n\n(extend-protocol Generator\n  #?(:clj Object, :cljs default)\n  (-generator [schema options]\n    (-schema-generator schema (assoc options ::original-generator-schema schema))))\n\n(defn- -create-from-gen\n  [props schema options]\n  (or (:gen/gen props)\n      (when-not (:gen/elements props)\n        (-generator schema options))))\n\n(defn- -create-from-schema [props options]\n  (some-> (:gen/schema props) (generator options)))\n\n(defn- -create-from-fmap [gen props schema options]\n  (when-some [fmap (:gen/fmap props)]\n    (gen/fmap (m/eval fmap (or options (m/options schema)))\n              gen)))\n\n(defn- -create [schema options]\n  (let [props (-merge (m/type-properties schema)\n                      (m/properties schema))\n        gen (or (-create-from-return props)\n                (-create-from-elements props)\n                (-create-from-schema props options)\n                (-create-from-gen props schema options)\n                (m/-fail! ::no-generator {:options options\n                                          :schema schema}))]\n    (or (-create-from-fmap gen props schema options)\n        gen)))\n\n;;\n;; public api\n;;\n\n(defn generator\n  ([?schema]\n   (generator ?schema nil))\n  ([?schema options]\n   (if (::rec-gen options)\n     ;; disable cache while calculating recursive schemas. caches don't distinguish options.\n     (-create (m/schema ?schema options) options)\n     (m/-cached (m/schema ?schema options) :generator #(-create % options)))))\n\n(defn generate\n  ([?gen-or-schema]\n   (generate ?gen-or-schema nil))\n  ([?gen-or-schema {:keys [seed size] :or {size 30} :as options}]\n   (let [gen (if (gen/generator? ?gen-or-schema) ?gen-or-schema (generator ?gen-or-schema options))]\n     (rose/root (gen/call-gen gen (-random seed) size)))))\n\n(defn sample\n  ([?gen-or-schema]\n   (sample ?gen-or-schema nil))\n  ([?gen-or-schema {:keys [seed size] :or {size 10} :as options}]\n   (let [gen (if (gen/generator? ?gen-or-schema) ?gen-or-schema (generator ?gen-or-schema options))]\n     (->> (gen/make-size-range-seq size)\n          (map #(rose/root (gen/call-gen gen %1 %2))\n               (gen/lazy-random-states (-random seed)))\n          (take size)))))\n\n;;\n;; functions\n;;\n\n(defn function-checker\n  ([?schema] (function-checker ?schema nil))\n  ([?schema {::keys [=>iterations] :or {=>iterations 100} :as options}]\n   (let [schema (m/schema ?schema options)\n         -try (fn [f] (try [(f) true] (catch #?(:clj Exception, :cljs js/Error) e [e false])))\n         check (fn [schema]\n                 (let [{:keys [input output guard]} (m/-function-info schema)\n                       input-generator (generator input options)\n                       valid-output? (m/validator output options)\n                       valid-guard? (if guard (m/validator guard options) (constantly true))\n                       validate (fn [f args] (as-> (apply f args) $ (and (valid-output? $) (valid-guard? [args $]))))]\n                   (fn [f]\n                     (let [{:keys [result shrunk]} (->> (prop/for-all* [input-generator] #(validate f %))\n                                                        (check/quick-check =>iterations))\n                           smallest (-> shrunk :smallest first)]\n                       (when-not (true? result)\n                         (let [explain-input (m/explain input smallest)\n                               [result success] (when-not explain-input (-try (fn [] (apply f smallest))))\n                               explain-output (when (and success (not explain-input)) (m/explain output result))\n                               explain-guard (when (and success guard (not explain-output)) (m/explain guard [smallest result]))]\n                           (cond-> (assoc shrunk ::m/result result)\n                             explain-input (assoc ::m/explain-input explain-input)\n                             explain-output (assoc ::m/explain-output explain-output)\n                             explain-guard (assoc ::m/explain-guard explain-guard)\n                             (ex-message result) (-> (update :result ex-message) (dissoc :result-data)))))))))]\n     (if (m/-function-info schema)\n       (check schema)\n       (if (m/-function-schema? schema)\n         (let [checkers (map #(function-checker % options) (m/-function-schema-arities schema))]\n           (fn [x] (->> checkers (keep #(% x)) (seq))))\n         (m/-fail! ::invalid-function-schema {:type (m/-type schema)}))))))\n\n(defn check\n  ([?schema f] (check ?schema f nil))\n  ([?schema f options]\n   (let [schema (m/schema ?schema options)]\n     (m/explain (m/-update-options schema #(assoc % ::m/function-checker function-checker)) f))))\n"],"x_google_ignoreList":[0]}