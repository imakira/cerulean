{"version":3,"sources":["stylefy/generic_dom/dom.cljs"],"mappings":"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","names":["stylefy.generic-dom.dom/styles-in-dom","cljs.core.atom","stylefy.generic-dom.dom/styles-as-css","stylefy.generic-dom.dom/keyframes-in-use","stylefy.generic-dom.dom/font-faces-in-use","stylefy.generic-dom.dom/custom-tags-in-use","stylefy.generic-dom.dom/custom-classes-in-use","stylefy.generic-dom.dom/style-by-hash","style-hash","cljs.core/deref","cljs.core.get","stylefy.generic-dom.dom/update-style-tags!","node-stylefy","node-stylefy-constant","styles-in-css","cljs.core.map","cljs.core.comp","cljs.core/keys","keyframes-in-css","cljs.core/vals","font-faces-in-use","custom-tags-in-use","custom-classes-in-use","new-style-constant-css","cljs.core.apply","cljs.core/str","cljs.core.concat","new-style-css","cljs.core._EQ_","dommy.core/text","dommy.core/set-text!","stylefy.generic-dom.dom/mark-all-styles-added-in-dom!","seq__46851","cljs.core/seq","chunk__46852","count__46853","i__46854","temp__5823__auto__","cljs.core/chunked-seq?","c__5525__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","cljs.core/reset!","stylefy.generic-dom.dom/update-dom","stylefy.impl.dom/get-stylefy-node","stylefy.impl.dom/stylefy-node-id","stylefy.impl.dom/stylefy-base-node","stylefy.impl.dom/stylefy-instance-id","stylefy.impl.dom/stylefy-constant-node-id","and__5000__auto__","e46867","stylefy.impl.cache.cache_styles","e","stylefy.impl.log/warn","stylefy.impl.cache.clear_styles","stylefy.impl.log/error","stylefy.generic-dom.dom/load-cache","cached-styles","stylefy.impl.cache/read-cache-value","stylefy.impl.cache/cache-key-styles","or__5002__auto__","cljs.core/merge","p1__46868#","p__46869","map__46870","cljs.core/--destructure-map","stylefy.generic-dom.dom/add-style","css","hash","_style","js/Error","style-to-be-saved","cljs.core.swap_BANG_","cljs.core/assoc","stylefy.generic-dom.dom/style-in-dom?","cljs.core/boolean","stylefy.generic-dom.dom/add-keyframes","identifier","keyframes-as-css","stylefy.generic-dom.dom/add-font-face","font-faces-as-css","cljs.core/conj","stylefy.generic-dom.dom/add-tag","tag-css","stylefy.generic-dom.dom/add-class","class-as-css","stylefy.generic-dom.dom/load-uninitialised-styles","uninitialised-styles","seq__46871","chunk__46872","count__46873","i__46874","tag","seq__46875","chunk__46876","count__46877","i__46878","class","seq__46879","chunk__46880","count__46881","i__46882","vec__46891","cljs.core.nth","vec__46896","keyframes","seq__46899","chunk__46900","count__46901","i__46902","font-face","seq__46903","chunk__46904","count__46905","i__46906","style","this__5300__auto__","k__5301__auto__","this__5302__auto__","k46916","else__5303__auto__","G__46920","__extmap","this__5320__auto__","f__5321__auto__","init__5322__auto__","cljs.core.reduce","ret__5323__auto__","p__46921","vec__46922","k__5324__auto__","v__5325__auto__","this__5315__auto__","writer__5316__auto__","opts__5317__auto__","pr-pair__5318__auto__","keyval__5319__auto__","cljs.core/pr-sequential-writer","G__46915","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__5298__auto__","__meta","this__5295__auto__","__hash","this__5304__auto__","this__5296__auto__","h__5111__auto__","coll__5297__auto__","cljs.core/hash-unordered-coll","this46917","other46918","cljs.core/PROTOCOL_SENTINEL","this__5310__auto__","k__5311__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__5307__auto__","this__5308__auto__","k__5309__auto__","pred__46942","cljs.core/keyword-identical?","expr__46943","cljs.core.assoc","this__5313__auto__","this__5299__auto__","this__5305__auto__","entry__5306__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","stylefy.generic-dom.dom/GenericDom","this__5346__auto__","cljs.core/List","writer__5347__auto__","cljs.core/-write","G__46919","extmap__5342__auto__","G__46947","cljs.core/record?","stylefy.generic-dom.dom/->GenericDom","stylefy.generic-dom.dom/map->GenericDom","this","tag-as-css","font-face-as-css"],"sourcesContent":["(ns stylefy.generic-dom.dom\n  \"Generic DOM updates styles always synchronously.\n   This makes sure the DOM is always up-to-date, but it can be up to 20x slower\n   compared to asynchronous updating. However, this solution works virtually everywhere.\n\n   It is highly recommended to use caching with this generic DOM module.\"\n  (:require [dommy.core :as dommy]\n            [stylefy.impl.cache :as cache]\n            [stylefy.impl.log :as log]\n            [stylefy.impl.dom :as dom]))\n\n(def styles-in-dom (atom {})) ; style hash -> atom with boolean value\n(def styles-as-css (atom {})) ; style hash -> map containing keys: :css\n(def keyframes-in-use (atom {})) ; keyframe identifier -> map containing keys: :css\n(def font-faces-in-use (atom [])) ; Vector of maps containing keys: :css\n(def custom-tags-in-use (atom [])) ; Vector of maps containing keys: :css\n(def custom-classes-in-use (atom [])) ; Vector of maps containing keys: :css\n\n(defn style-by-hash [style-hash]\n  (when style-hash\n    (get @styles-as-css style-hash)))\n\n(defn- update-style-tags!\n  [node-stylefy node-stylefy-constant]\n  (let [styles-in-css (map (comp :css style-by-hash) (keys @styles-as-css))\n        keyframes-in-css (map :css (vals @keyframes-in-use))\n        font-faces-in-use (map :css @font-faces-in-use)\n        custom-tags-in-use (map :css @custom-tags-in-use)\n        custom-classes-in-use (map :css @custom-classes-in-use)\n        new-style-constant-css (apply str (concat font-faces-in-use\n                                                  keyframes-in-css\n                                                  custom-tags-in-use\n                                                  custom-classes-in-use))\n        new-style-css (apply str styles-in-css)]\n    ; Do not update this node contents if there are no new styles to be added.\n    ; This is important, because even if setting the same contents should have no effect,\n    ; it can cause font flickering in some browsers.\n    (when-not (= (dommy/text node-stylefy-constant) new-style-constant-css)\n      (dommy/set-text! node-stylefy-constant new-style-constant-css))\n\n    (dommy/set-text! node-stylefy new-style-css)))\n\n(defn- mark-all-styles-added-in-dom! []\n  (doseq [style-hash (keys @styles-in-dom)]\n    (reset! (get @styles-in-dom style-hash) true)))\n\n(defn update-dom\n  []\n  (let [node-stylefy (dom/get-stylefy-node dom/stylefy-node-id @dom/stylefy-base-node @dom/stylefy-instance-id)\n        node-stylefy-constant (dom/get-stylefy-node dom/stylefy-constant-node-id @dom/stylefy-base-node @dom/stylefy-instance-id)]\n    (if (and node-stylefy node-stylefy-constant)\n      (do (update-style-tags! node-stylefy node-stylefy-constant)\n\n          (try\n            (cache/cache-styles @styles-as-css @dom/stylefy-instance-id)\n            (catch :default e\n              (log/warn (str \"Unable to cache styles, error: \" e))\n              (cache/clear-styles @dom/stylefy-instance-id)\n              e))\n\n          (mark-all-styles-added-in-dom!))\n      (log/error \"stylefy is unable to find the required <style> tags!\"))))\n\n(defn load-cache []\n  (when-let [cached-styles (cache/read-cache-value\n                             (cache/cache-key-styles @dom/stylefy-instance-id))]\n    (reset! styles-as-css (or cached-styles {}))\n    (reset! styles-in-dom (apply merge (map\n                                         #(-> {% (atom false)})\n                                         (keys cached-styles))))))\n\n(defn add-style\n  [{:keys [css hash] :as _style}]\n  (assert css \"Unable to save empty style!\")\n  (assert hash \"Unable to save style without hash!\")\n  (let [style-to-be-saved {:css css}]\n    (swap! styles-as-css assoc hash style-to-be-saved)\n    (swap! styles-in-dom assoc hash (atom true))\n    (update-dom)))\n\n(defn style-in-dom? [style-hash]\n  (boolean @(get @styles-in-dom style-hash)))\n\n(defn add-keyframes [identifier keyframes-as-css]\n  (swap! keyframes-in-use assoc identifier {:css keyframes-as-css})\n  (update-dom)\n  nil)\n\n(defn add-font-face [font-faces-as-css]\n  (swap! font-faces-in-use conj {:css font-faces-as-css})\n  (update-dom)\n  nil)\n\n(defn add-tag [tag-css]\n  (swap! custom-tags-in-use conj {:css tag-css})\n  (update-dom)\n  nil)\n\n(defn add-class [class-as-css]\n  (swap! custom-classes-in-use conj {:css class-as-css})\n  (update-dom)\n  nil)\n\n(defn load-uninitialised-styles [uninitialised-styles]\n  (doseq [tag (:tag uninitialised-styles)]\n    (add-tag tag))\n\n  (doseq [class (:class uninitialised-styles)]\n    (add-class class))\n\n  (doseq [[identifier keyframes] (:keyframes uninitialised-styles)]\n    (add-keyframes identifier keyframes))\n\n  (doseq [font-face (:font-face uninitialised-styles)]\n    (add-font-face font-face))\n\n  (doseq [style (:style uninitialised-styles)]\n    (add-style style)))\n\n(defrecord GenericDom []\n  dom/Dom\n  (load-uninitialised-styles [this uninitialised-styles] (load-uninitialised-styles uninitialised-styles))\n  (load-cache [this] (load-cache))\n\n  (add-style [this style] (add-style style))\n  (add-class [this class-as-css] (add-class class-as-css))\n  (add-tag [this tag-as-css] (add-tag tag-as-css))\n  (add-font-face [this font-face-as-css] (add-font-face font-face-as-css))\n  (add-keyframes [this identifier keyframes-as-css] (add-keyframes identifier keyframes-as-css))\n\n  (update-dom [this] (update-dom))\n  (update-dom-if-needed [this] (update-dom))\n  (style-in-dom? [this style-hash] (style-in-dom? style-hash))\n  (style-by-hash [this style-hash] (style-by-hash style-hash)))"],"x_google_ignoreList":[0]}