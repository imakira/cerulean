{"version":3,"sources":["app/client.cljs"],"mappings":";AASA,GAAA,QAAAA,gCAAAC,uCAAAC;AAAA;AAAA,AAAA,AAASC,kBACP,KAAAC,gBAAA;AAAA,AAAO,OAACC,kDAAoB,wBAAA,xBAACC;GAA7B;;AAEF,oBAAA,pBAAMC;AAAN,AACE,gGAAA,AAAAC,zFAACC,oBAAoB,AAAAC,0DAAA,CAAA,MAAA,5BAAGC,gDAAYR;;AAEtC,kBAAA,lBAAeS;AAAf,AACE,oBAAIC;AACF,OAACC,mDAAiB,wBAAA,xBAACR,gCACD,AAAAI,0DAAA,CAAA,2CAAA,kGAAA,nKAAGC,wIAA0BI;;AAC/C,OAACR","names":["js/app","js/app.client","js/app.client.root","app.client/root","cljs.core/Delay","uix.dom.create_root","js/document.getElementById","app.client/render","cljs.core/deref","uix.dom/render-root","uix.compiler.alpha/component-element","app.common.pages/app","app.client/init","js/window.__cerulean_rehydrate","uix.dom.hydrate_root","js/location.pathname"],"sourcesContent":["(ns app.client\n  (:require\n   [cljs.spec.alpha :as s]\n   [clojure.edn :as edn]\n   [uix.core :as uix :refer [defui $ use-state use-effect]]\n   [uix.dom :as dom]\n   [app.common.pages :as pages]\n   [clojure.core.async :as a]))\n\n(defonce root\n  (delay (uix.dom/create-root (js/document.getElementById \"root\"))))\n\n(defn render []\n  (uix.dom/render-root ($ pages/app) @root))\n\n(defn ^:export init []\n  (if js/window.__cerulean_rehydrate\n    (dom/hydrate-root (js/document.getElementById \"root\")\n                      ($ pages/app {:initial-route js/location.pathname}))\n    (render)))\n"]}