{"version":3,"sources":["stylefy/impl/conversion.cljc"],"mappings":"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","names":["stylefy.impl.conversion/garden-units->css","props","cljs.core.reduce","result","next-key","value","stylefy.impl.utils/is-garden-value?","cljs.core.assoc","garden.compiler/render-css","cljs.core/keys","stylefy.impl.conversion/convert-stylefy-vendors-to-garden","temp__5823__auto__","vendors","stylefy.impl.conversion/convert-stylefy-modes-to-garden","modes","handle-mode","mode-name","mode-props","js/Error","cljs.core/Keyword","clojure.string/starts-with?","cljs.core.pr_str","cljs.core/count","clojure.string.split","stylefy.impl.log/warn","cljs.core.keyword","cljs.core/map?","p1__106445#","cljs.core.mapv","cljs.core.get","cljs.core/vector?","p1__106446#","cljs.core/first","cljs.core/second","stylefy.impl.conversion/class-selector","hash","p__106454","map__106455","cljs.core/--destructure-map","stylefy.impl.conversion/convert-base-style-into-class","custom-selector","_style","options","css-props","stylefy.impl.utils/remove-special-keywords","css-selector","or__5025__auto__","garden-class-definition","garden-pseudo-classes","garden-vendors","garden-options","cljs.core.merge","css-class","garden.core.css","cljs.core.into","stylefy.impl.conversion/prepare-manual-style-map","style-map","p1__106458#","clojure.walk/walk","cljs.core/identity","stylefy.impl.conversion/handle-scoped-style-map","scope","scoped-style","stylefy-manual-styles","cljs.core.apply","cljs.core/conj","cljs.core.concat","stylefy.impl.conversion/find-and-handle-scoped-style-map","item","p1__106463#","p__106466","map__106467","stylefy.impl.conversion/convert-scoped-styles","stylefy-scoped-styles","css-parent-selector","css-scoped-styles","cljs.core.map","scoping-rule","selector-and-props","cljs.core/str","p__106480","map__106481","stylefy.impl.conversion/convert-media-queries","media-queries","handle-media-query","media-query","media-query-props","media-query-css-props","scoped-styles-garden","garden.stylesheet.at_media","css-media-queries","p1__106478#","p1__106479#","p__106514","map__106516","stylefy.impl.conversion/convert-feature-queries","supports-rules","handle-supports-rule","supports-query","supports-props","G__106531","G__106532","stylefy.impl.conversion/style->css","css-supports","p1__106507#","p1__106508#","p__106557","map__106559","stylefy.impl.conversion/convert-manual-styles","css-manual-styles","manual-style","var_args","G__106586","style","stylefy.impl.conversion.style__GT_css","css-feature-queries"],"sourcesContent":["(ns stylefy.impl.conversion\n  (:require\n    [clojure.walk :refer [walk]]\n    [garden.core :refer [css]]\n    [stylefy.impl.utils :as utils]\n    [garden.stylesheet :refer [at-media]]\n    [stylefy.impl.log :as log]\n    [clojure.string :as str]\n    [garden.compiler :as compiler]))\n\n(declare style->css)\n\n(defn garden-units->css\n  \"Checks all values in the map and converts all Garden units to CSS.\"\n  [props]\n  (reduce\n    (fn [result next-key]\n      (let [value (next-key props)]\n        (if (utils/is-garden-value? value)\n          (assoc result next-key (compiler/render-css value))\n          result)))\n    props\n    (keys props)))\n\n(defn- convert-stylefy-vendors-to-garden [props]\n  (when-let [vendors (:stylefy.core/vendors props)]\n    {:vendors vendors\n     :auto-prefix (:stylefy.core/auto-prefix props)}))\n\n(defn- convert-stylefy-modes-to-garden [props]\n  (let [modes (:stylefy.core/mode props)\n        handle-mode (fn [mode-name mode-props]\n                      (assert (or (keyword? mode-name)\n                                  (and (string? mode-name)\n                                       (str/starts-with? mode-name \":\")))\n                              (str \"Mode must be specified as a keyword or string beginning with a colon, got: \" (pr-str mode-name)))\n                      (when (and (string? mode-name)\n                                 (> (count (str/split mode-name \" \")) 1))\n                        (log/warn (str \"Incorrect mode detected, should not contain spaces. Mode was: \" (pr-str mode-name))))\n                      [(keyword (str \"&\" mode-name)) mode-props])]\n    (cond\n      (map? modes) (mapv #(handle-mode % (get modes %)) (keys modes))\n      (vector? modes) (mapv #(handle-mode (first %) (second %)) modes))))\n\n(defn class-selector [hash]\n  (keyword (str \".\" hash)))\n\n(defn- convert-base-style-into-class\n  \"Converts Clojure style map into CSS class.\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (let [css-props (utils/remove-special-keywords props)\n        css-selector (or custom-selector (class-selector hash))\n        garden-class-definition [css-selector css-props]\n        garden-pseudo-classes (convert-stylefy-modes-to-garden props)\n        garden-vendors (convert-stylefy-vendors-to-garden props)\n        garden-options (or (merge options garden-vendors) {})\n        css-class (css garden-options (into garden-class-definition\n                                            garden-pseudo-classes))]\n    css-class))\n\n(defn prepare-manual-style-map [style-map]\n  (walk #(if (map? %)\n           (utils/remove-special-keywords %)\n           %)\n        identity\n        style-map))\n\n(defn- handle-scoped-style-map [props scope]\n  (let [scoped-style [scope (utils/remove-special-keywords props)]\n        garden-pseudo-classes (convert-stylefy-modes-to-garden props)\n        stylefy-manual-styles (:stylefy.core/manual props)]\n    (apply conj scoped-style\n           (concat\n             garden-pseudo-classes\n             (mapv prepare-manual-style-map stylefy-manual-styles)))))\n\n(defn- find-and-handle-scoped-style-map [item scope]\n  (cond\n    (map? item)\n    (handle-scoped-style-map item scope)\n\n    (vector? item)\n    (mapv #(find-and-handle-scoped-style-map % scope) item)\n\n    :else item))\n\n(defn- convert-scoped-styles\n  \"Converts stylefy/scope definition into CSS selector.\n\n  stylefy features supported in scoped style map:\n  - modes\n  - manual mode\n  - vendor prefixes (must be defined in the parent style map)\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (when-let [stylefy-scoped-styles (:stylefy.core/scope props)]\n    (let [css-parent-selector (or custom-selector (class-selector hash))\n          css-scoped-styles (map\n                              (fn [scoping-rule]\n                                (let [selector-and-props (find-and-handle-scoped-style-map scoping-rule css-parent-selector)\n                                      garden-vendors (convert-stylefy-vendors-to-garden props)\n                                      garden-options (or (merge options garden-vendors) {})\n                                      css-selector (css garden-options selector-and-props)]\n                                  css-selector))\n                              stylefy-scoped-styles)]\n      (apply str css-scoped-styles))))\n\n(defn- convert-media-queries\n  \"Converts stylefy/media definition into CSS media query.\n\n  stylefy features supported in media query style map:\n  - modes\n  - scope\n  - vendor prefixes\n\n  ::stylefy/manual is not supported here since one can use it to create\n  media queries.\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (when-let [media-queries (:stylefy.core/media props)]\n    (let [css-selector (or custom-selector (class-selector hash))\n          handle-media-query (fn [media-query media-query-props]\n                               (let [media-query-css-props (utils/remove-special-keywords media-query-props)\n                                     scoped-styles-garden (map\n                                                            (fn [scoping-rule]\n                                                              (find-and-handle-scoped-style-map scoping-rule css-selector))\n                                                            (:stylefy.core/scope media-query-props))\n                                     garden-class-definition [css-selector media-query-css-props]\n                                     garden-pseudo-classes (convert-stylefy-modes-to-garden media-query-props)\n                                     garden-vendors (convert-stylefy-vendors-to-garden media-query-props)\n                                     garden-options (or (merge options garden-vendors) {})]\n                                 (css garden-options [(at-media media-query (into garden-class-definition\n                                                                                  garden-pseudo-classes))\n                                                      (at-media media-query scoped-styles-garden)])))\n          css-media-queries (cond\n                              (map? media-queries) (mapv #(handle-media-query % (get media-queries %)) (keys media-queries))\n                              (vector? media-queries) (mapv #(handle-media-query (first %) (second %)) media-queries))]\n      (apply str css-media-queries))))\n\n(defn- convert-feature-queries\n  \"Converts stylefy/supports definition into CSS feature query.\"\n  [{:keys [hash props custom-selector] :as _style} options]\n  (when-let [supports-rules (:stylefy.core/supports props)]\n    (let [handle-supports-rule (fn [supports-query supports-props]\n                                     (str \"@supports (\" supports-query \") {\"\n                                          (style->css {:props supports-props\n                                                       :hash hash ; Hash of the whole map\n                                                       :custom-selector custom-selector}\n                                                      options)\n                                          \"}\"))\n          css-supports (cond\n                         (map? supports-rules) (mapv #(handle-supports-rule % (get supports-rules %)) (keys supports-rules))\n                         (vector? supports-rules) (mapv #(handle-supports-rule (first %) (second %)) supports-rules))]\n      (apply str css-supports))))\n\n(defn- convert-manual-styles\n  \"Converts stylefy/manual definition into CSS.\n\n   stylefy's special keywords are not supported here.\n\n   Manually written selectors can contain media queries, those will be correctly nested by Garden\n   (media query will be defined first in CSS).\"\n  [{:keys [props hash custom-selector] :as _style} options]\n  (when-let [stylefy-manual-styles (:stylefy.core/manual props)]\n    (let [css-parent-selector (or custom-selector (class-selector hash))\n          css-manual-styles (map\n                              (fn [manual-style]\n                                (let [selector-and-props (into [css-parent-selector] [(prepare-manual-style-map manual-style)])\n                                      css-class (css options selector-and-props)]\n                                  css-class))\n                              stylefy-manual-styles)]\n      (apply str css-manual-styles))))\n\n(defn style->css\n  \"Converts the given style to CSS. Options are sent directly to Garden\"\n  ([style] (style->css style {}))\n  ([style options]\n   (let [css-class (convert-base-style-into-class style options)\n         css-media-queries (convert-media-queries style options)\n         css-feature-queries (convert-feature-queries style options)\n         css-scoped-styles (convert-scoped-styles style options)\n         css-manual-styles (convert-manual-styles style options)]\n     ; Order is important so that more specific styles properly overwrite the previous ones.\n     (str\n       ; Base style definition comes first:\n       css-class\n       ; Scoped rules:\n       css-scoped-styles\n       ; Media queries themselves have no specificity, but they appear after class and scope so that\n       ; these rules can be overwritten with the same selectors.\n       css-media-queries\n       ; Feature queries:\n       css-feature-queries\n       ; Manual mode appears last. It is usually used to create some specific rules.\n       ; It can also be used to generate at-rules (media queries, feature queries etc.)\n       css-manual-styles))))\n"],"x_google_ignoreList":[0]}