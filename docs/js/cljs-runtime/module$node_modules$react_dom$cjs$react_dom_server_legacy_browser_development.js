shadow$provide.module$node_modules$react_dom$cjs$react_dom_server_legacy_browser_development = function(global, require, module, exports) {
  (function() {
    function warn(format) {
      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }
      printWarning("warn", format, args);
    }
    function error(format) {
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      printWarning("error", format, args);
    }
    function printWarning(level, format, args) {
      var stack = ReactSharedInternals.ReactDebugCurrentFrame.getStackAddendum();
      stack !== "" && (format += "%s", args = args.concat([stack]));
      args = args.map(function(item) {
        return String(item);
      });
      args.unshift("Warning: " + format);
      Function.prototype.apply.call(console[level], console, args);
    }
    function stringToChunk(content) {
      return content;
    }
    function typeName(value) {
      return typeof Symbol === "function" && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
    }
    function willCoercionThrow(value) {
      try {
        return !1;
      } catch (e) {
        return !0;
      }
    }
    function checkAttributeStringCoercion(value, attributeName) {
      if (willCoercionThrow(value)) {
        return error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value)), "" + value;
      }
    }
    function checkCSSPropertyStringCoercion(value, propName) {
      if (willCoercionThrow(value)) {
        return error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value)), "" + value;
      }
    }
    function checkHtmlStringCoercion(value) {
      if (willCoercionThrow(value)) {
        return error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value)), "" + value;
      }
    }
    function isAttributeNameSafe(attributeName) {
      if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
        return !0;
      }
      if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
        return !1;
      }
      if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
        return validatedAttributeNameCache[attributeName] = !0;
      }
      illegalAttributeNameCache[attributeName] = !0;
      error("Invalid attribute name: `%s`", attributeName);
      return !1;
    }
    function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
      if (propertyInfo !== null && propertyInfo.type === 0) {
        return !1;
      }
      switch(typeof value) {
        case "function":
        case "symbol":
          return !0;
        case "boolean":
          if (isCustomComponentTag) {
            return !1;
          }
          if (propertyInfo !== null) {
            return !propertyInfo.acceptsBooleans;
          }
          name = name.toLowerCase().slice(0, 5);
          return name !== "data-" && name !== "aria-";
        default:
          return !1;
      }
    }
    function getPropertyInfo(name) {
      return properties.hasOwnProperty(name) ? properties[name] : null;
    }
    function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
      this.acceptsBooleans = type === 2 || type === 3 || type === 4;
      this.attributeName = attributeName;
      this.attributeNamespace = attributeNamespace;
      this.mustUseProperty = mustUseProperty;
      this.propertyName = name;
      this.type = type;
      this.sanitizeURL = sanitizeURL;
      this.removeEmptyString = removeEmptyString;
    }
    function checkControlledValueProps(tagName, props) {
      hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null || error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
      props.onChange || props.readOnly || props.disabled || props.checked == null || error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
    }
    function isCustomComponent(tagName, props) {
      if (tagName.indexOf("-") === -1) {
        return typeof props.is === "string";
      }
      switch(tagName) {
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return !1;
        default:
          return !0;
      }
    }
    function validateProperty(tagName, name) {
      if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
        return !0;
      }
      if (rARIACamel.test(name)) {
        tagName = "aria-" + name.slice(4).toLowerCase();
        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
        if (tagName == null) {
          return error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name), warnedProperties[name] = !0;
        }
        if (name !== tagName) {
          return error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, tagName), warnedProperties[name] = !0;
        }
      }
      if (rARIA.test(name)) {
        tagName = name.toLowerCase();
        tagName = ariaProperties.hasOwnProperty(tagName) ? tagName : null;
        if (tagName == null) {
          return warnedProperties[name] = !0, !1;
        }
        name !== tagName && (error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, tagName), warnedProperties[name] = !0);
      }
      return !0;
    }
    function warnInvalidARIAProps(type, props) {
      var invalidProps = [], key;
      for (key in props) {
        validateProperty(type, key) || invalidProps.push(key);
      }
      props = invalidProps.map(function(prop) {
        return "`" + prop + "`";
      }).join(", ");
      invalidProps.length === 1 ? error("Invalid aria prop %s on \x3c%s\x3e tag. For details, see https://reactjs.org/link/invalid-aria-props", props, type) : invalidProps.length > 1 && error("Invalid aria props %s on \x3c%s\x3e tag. For details, see https://reactjs.org/link/invalid-aria-props", props, type);
    }
    function escapeTextForBrowser(text) {
      if (typeof text === "boolean" || typeof text === "number") {
        return "" + text;
      }
      checkHtmlStringCoercion(text);
      text = "" + text;
      var match = matchHtmlRegExp.exec(text);
      if (match) {
        var html = "", index, lastIndex = 0;
        for (index = match.index; index < text.length; index++) {
          switch(text.charCodeAt(index)) {
            case 34:
              match = "\x26quot;";
              break;
            case 38:
              match = "\x26amp;";
              break;
            case 39:
              match = "\x26#x27;";
              break;
            case 60:
              match = "\x26lt;";
              break;
            case 62:
              match = "\x26gt;";
              break;
            default:
              continue;
          }
          lastIndex !== index && (html += text.substring(lastIndex, index));
          lastIndex = index + 1;
          html += match;
        }
        text = lastIndex !== index ? html + text.substring(lastIndex, index) : html;
      }
      return text;
    }
    function createFormatContext(insertionMode, selectedValue) {
      return {insertionMode, selectedValue};
    }
    function getChildFormatContext(parentContext, type, props) {
      switch(type) {
        case "select":
          return createFormatContext(1, props.value != null ? props.value : props.defaultValue);
        case "svg":
          return createFormatContext(2, null);
        case "math":
          return createFormatContext(3, null);
        case "foreignObject":
          return createFormatContext(1, null);
        case "table":
          return createFormatContext(4, null);
        case "thead":
        case "tbody":
        case "tfoot":
          return createFormatContext(5, null);
        case "colgroup":
          return createFormatContext(7, null);
        case "tr":
          return createFormatContext(6, null);
      }
      return parentContext.insertionMode >= 4 || parentContext.insertionMode === 0 ? createFormatContext(1, null) : parentContext;
    }
    function pushStyle(target, responseState, style) {
      if (typeof style !== "object") {
        throw Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style\x3d{{marginRight: spacing + 'em'}} when using JSX.");
      }
      responseState = !0;
      for (var styleName in style) {
        if (hasOwnProperty.call(style, styleName)) {
          var styleValue = style[styleName];
          if (styleValue != null && typeof styleValue !== "boolean" && styleValue !== "") {
            if (styleName.indexOf("--") === 0) {
              var nameChunk = stringToChunk(escapeTextForBrowser(styleName));
              checkCSSPropertyStringCoercion(styleValue, styleName);
              styleValue = stringToChunk(escapeTextForBrowser(("" + styleValue).trim()));
            } else {
              warnValidStyle$1(styleName, styleValue);
              nameChunk = styleName;
              var chunk = styleNameCache.get(nameChunk);
              chunk !== void 0 ? nameChunk = chunk : (chunk = escapeTextForBrowser(nameChunk.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern$1, "-ms-")), styleNameCache.set(nameChunk, chunk), nameChunk = chunk);
              typeof styleValue === "number" ? styleValue = styleValue === 0 || hasOwnProperty.call(isUnitlessNumber, styleName) ? "" + styleValue : styleValue + "px" : (checkCSSPropertyStringCoercion(styleValue, styleName), styleValue = stringToChunk(escapeTextForBrowser(("" + styleValue).trim())));
            }
            responseState ? (responseState = !1, target.push(' style\x3d"', nameChunk, ":", styleValue)) : target.push(";", nameChunk, ":", styleValue);
          }
        }
      }
      responseState || target.push(attributeEnd);
    }
    function pushAttribute(target, responseState, name, value) {
      switch(name) {
        case "style":
          pushStyle(target, responseState, value);
          return;
        case "defaultValue":
        case "defaultChecked":
        case "innerHTML":
        case "suppressContentEditableWarning":
        case "suppressHydrationWarning":
          return;
      }
      if (!(name.length > 2) || name[0] !== "o" && name[0] !== "O" || name[1] !== "n" && name[1] !== "N") {
        if (responseState = getPropertyInfo(name), responseState !== null) {
          switch(typeof value) {
            case "function":
            case "symbol":
              return;
            case "boolean":
              if (!responseState.acceptsBooleans) {
                return;
              }
          }
          name = responseState.attributeName;
          switch(responseState.type) {
            case 3:
              value && target.push(" ", name, '\x3d""');
              break;
            case 4:
              value === !0 ? target.push(" ", name, '\x3d""') : value !== !1 && target.push(" ", name, '\x3d"', stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              break;
            case 5:
              isNaN(value) || target.push(" ", name, '\x3d"', stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              break;
            case 6:
              !isNaN(value) && value >= 1 && target.push(" ", name, '\x3d"', stringToChunk(escapeTextForBrowser(value)), attributeEnd);
              break;
            default:
              responseState.sanitizeURL && (checkAttributeStringCoercion(value, name), responseState = value = "" + value, !didWarn && isJavaScriptProtocol.test(responseState) && (didWarn = !0, error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(responseState)))), target.push(" ", name, '\x3d"', stringToChunk(escapeTextForBrowser(value)), 
              attributeEnd);
          }
        } else if (isAttributeNameSafe(name)) {
          switch(typeof value) {
            case "function":
            case "symbol":
              return;
            case "boolean":
              if (responseState = name.toLowerCase().slice(0, 5), responseState !== "data-" && responseState !== "aria-") {
                return;
              }
          }
          target.push(" ", name, '\x3d"', stringToChunk(escapeTextForBrowser(value)), attributeEnd);
        }
      }
    }
    function pushInnerHTML(target, innerHTML, children) {
      if (innerHTML != null) {
        if (children != null) {
          throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
        }
        if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
          throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
        }
        innerHTML = innerHTML.__html;
        innerHTML !== null && innerHTML !== void 0 && (checkHtmlStringCoercion(innerHTML), target.push("" + innerHTML));
      }
    }
    function checkSelectProp(props, propName) {
      var value = props[propName];
      value != null && (value = isArrayImpl(value), props.multiple && !value ? error("The `%s` prop supplied to \x3cselect\x3e must be an array if `multiple` is true.", propName) : !props.multiple && value && error("The `%s` prop supplied to \x3cselect\x3e must be a scalar value if `multiple` is false.", propName));
    }
    function flattenOptionChildren(children) {
      var content = "";
      React.Children.forEach(children, function(child) {
        child != null && (content += child, didWarnInvalidOptionChildren || typeof child === "string" || typeof child === "number" || (didWarnInvalidOptionChildren = !0, error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to \x3coption\x3e.")));
      });
      return content;
    }
    function pushStartGenericElement(target, props, tag, responseState) {
      target.push(startChunkForTag(tag));
      var innerHTML = tag = null, propKey;
      for (propKey in props) {
        if (hasOwnProperty.call(props, propKey)) {
          var propValue = props[propKey];
          if (propValue != null) {
            switch(propKey) {
              case "children":
                tag = propValue;
                break;
              case "dangerouslySetInnerHTML":
                innerHTML = propValue;
                break;
              default:
                pushAttribute(target, responseState, propKey, propValue);
            }
          }
        }
      }
      target.push("\x3e");
      pushInnerHTML(target, innerHTML, tag);
      return typeof tag === "string" ? (target.push(stringToChunk(escapeTextForBrowser(tag))), null) : tag;
    }
    function startChunkForTag(tag) {
      var tagStartChunk = validatedTagCache.get(tag);
      if (tagStartChunk === void 0) {
        if (!VALID_TAG_REGEX.test(tag)) {
          throw Error("Invalid tag: " + tag);
        }
        tagStartChunk = "\x3c" + tag;
        validatedTagCache.set(tag, tagStartChunk);
      }
      return tagStartChunk;
    }
    function pushStartInstance(target, type, props, responseState, formatContext) {
      isCustomComponent(type, props) || warnInvalidARIAProps(type, props);
      type !== "input" && type !== "textarea" && type !== "select" || props == null || props.value !== null || didWarnValueNull || (didWarnValueNull = !0, type === "select" && props.multiple ? error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type) : error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", 
      type));
      isCustomComponent(type, props) || warnUnknownProperties(type, props, null);
      !props.suppressContentEditableWarning && props.contentEditable && props.children != null && error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
      formatContext.insertionMode !== 2 && formatContext.insertionMode !== 3 && type.indexOf("-") === -1 && typeof props.is !== "string" && type.toLowerCase() !== type && error("\x3c%s /\x3e is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
      switch(type) {
        case "select":
          checkControlledValueProps("select", props);
          checkSelectProp(props, "value");
          checkSelectProp(props, "defaultValue");
          props.value === void 0 || props.defaultValue === void 0 || didWarnDefaultSelectValue || (error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultSelectValue = !0);
          target.push(startChunkForTag("select"));
          var children = null, innerHTML = null;
          for (propKey in props) {
            if (hasOwnProperty.call(props, propKey)) {
              var propValue = props[propKey];
              if (propValue != null) {
                switch(propKey) {
                  case "children":
                    children = propValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    innerHTML = propValue;
                    break;
                  case "defaultValue":
                  case "value":
                    break;
                  default:
                    pushAttribute(target, responseState, propKey, propValue);
                }
              }
            }
          }
          target.push("\x3e");
          pushInnerHTML(target, innerHTML, children);
          return children;
        case "option":
          innerHTML = formatContext.selectedValue;
          target.push(startChunkForTag("option"));
          var value = propValue = null, selected = null;
          var propKey = null;
          for (children in props) {
            if (hasOwnProperty.call(props, children)) {
              var propValue$jscomp$0 = props[children];
              if (propValue$jscomp$0 != null) {
                switch(children) {
                  case "children":
                    propValue = propValue$jscomp$0;
                    break;
                  case "selected":
                    selected = propValue$jscomp$0;
                    didWarnSelectedSetOnOption || (error("Use the `defaultValue` or `value` props on \x3cselect\x3e instead of setting `selected` on \x3coption\x3e."), didWarnSelectedSetOnOption = !0);
                    break;
                  case "dangerouslySetInnerHTML":
                    propKey = propValue$jscomp$0;
                    break;
                  case "value":
                    value = propValue$jscomp$0;
                  default:
                    pushAttribute(target, responseState, children, propValue$jscomp$0);
                }
              }
            }
          }
          if (innerHTML != null) {
            if (value !== null ? (checkAttributeStringCoercion(value, "value"), props = "" + value) : (propKey === null || didWarnInvalidOptionInnerHTML || (didWarnInvalidOptionInnerHTML = !0, error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.")), props = flattenOptionChildren(propValue)), isArrayImpl(innerHTML)) {
              for (responseState = 0; responseState < innerHTML.length; responseState++) {
                if (checkAttributeStringCoercion(innerHTML[responseState], "value"), "" + innerHTML[responseState] === props) {
                  target.push(' selected\x3d""');
                  break;
                }
              }
            } else {
              checkAttributeStringCoercion(innerHTML, "select.value"), "" + innerHTML === props && target.push(' selected\x3d""');
            }
          } else {
            selected && target.push(' selected\x3d""');
          }
          target.push("\x3e");
          pushInnerHTML(target, propKey, propValue);
          return propValue;
        case "textarea":
          checkControlledValueProps("textarea", props);
          props.value === void 0 || props.defaultValue === void 0 || didWarnDefaultTextareaValue || (error("Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components"), didWarnDefaultTextareaValue = !0);
          target.push(startChunkForTag("textarea"));
          propKey = innerHTML = children = null;
          for (propValue in props) {
            if (hasOwnProperty.call(props, propValue) && (value = props[propValue], value != null)) {
              switch(propValue) {
                case "children":
                  propKey = value;
                  break;
                case "value":
                  children = value;
                  break;
                case "defaultValue":
                  innerHTML = value;
                  break;
                case "dangerouslySetInnerHTML":
                  throw Error("`dangerouslySetInnerHTML` does not make sense on \x3ctextarea\x3e.");
                default:
                  pushAttribute(target, responseState, propValue, value);
              }
            }
          }
          children === null && innerHTML !== null && (children = innerHTML);
          target.push("\x3e");
          if (propKey != null) {
            error("Use the `defaultValue` or `value` props instead of setting children on \x3ctextarea\x3e.");
            if (children != null) {
              throw Error("If you supply `defaultValue` on a \x3ctextarea\x3e, do not pass children.");
            }
            if (isArrayImpl(propKey)) {
              if (propKey.length > 1) {
                throw Error("\x3ctextarea\x3e can only have at most one child.");
              }
              checkHtmlStringCoercion(propKey[0]);
            }
            checkHtmlStringCoercion(propKey);
            children = "" + propKey;
          }
          typeof children === "string" && children[0] === "\n" && target.push(leadingNewline);
          children !== null && (checkAttributeStringCoercion(children, "value"), target.push(stringToChunk(escapeTextForBrowser("" + children))));
          return null;
        case "input":
          checkControlledValueProps("input", props);
          props.checked === void 0 || props.defaultChecked === void 0 || didWarnDefaultChecked || (error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultChecked = 
          !0);
          props.value === void 0 || props.defaultValue === void 0 || didWarnDefaultInputValue || (error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", "A component", props.type), didWarnDefaultInputValue = 
          !0);
          target.push(startChunkForTag("input"));
          value = propKey = propValue = children = null;
          for (innerHTML in props) {
            if (hasOwnProperty.call(props, innerHTML) && (selected = props[innerHTML], selected != null)) {
              switch(innerHTML) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error("input is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                case "defaultChecked":
                  value = selected;
                  break;
                case "defaultValue":
                  propValue = selected;
                  break;
                case "checked":
                  propKey = selected;
                  break;
                case "value":
                  children = selected;
                  break;
                default:
                  pushAttribute(target, responseState, innerHTML, selected);
              }
            }
          }
          propKey !== null ? pushAttribute(target, responseState, "checked", propKey) : value !== null && pushAttribute(target, responseState, "checked", value);
          children !== null ? pushAttribute(target, responseState, "value", children) : propValue !== null && pushAttribute(target, responseState, "value", propValue);
          target.push("/\x3e");
          return null;
        case "menuitem":
          target.push(startChunkForTag("menuitem"));
          for (var propKey$jscomp$0 in props) {
            if (hasOwnProperty.call(props, propKey$jscomp$0) && (children = props[propKey$jscomp$0], children != null)) {
              switch(propKey$jscomp$0) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error("menuitems cannot have `children` nor `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, responseState, propKey$jscomp$0, children);
              }
            }
          }
          target.push("\x3e");
          return null;
        case "title":
          target.push(startChunkForTag("title"));
          children = null;
          for (propValue$jscomp$0 in props) {
            if (hasOwnProperty.call(props, propValue$jscomp$0) && (innerHTML = props[propValue$jscomp$0], innerHTML != null)) {
              switch(propValue$jscomp$0) {
                case "children":
                  children = innerHTML;
                  break;
                case "dangerouslySetInnerHTML":
                  throw Error("`dangerouslySetInnerHTML` does not make sense on \x3ctitle\x3e.");
                default:
                  pushAttribute(target, responseState, propValue$jscomp$0, innerHTML);
              }
            }
          }
          target.push("\x3e");
          target = Array.isArray(children) && children.length < 2 ? children[0] || null : children;
          Array.isArray(children) && children.length > 1 ? error("A title element received an array with more than 1 element as children. In browsers title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : target != null && target.$$typeof != null ? error("A title element received a React element for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering") : 
          target != null && typeof target !== "string" && typeof target !== "number" && error("A title element received a value that was not a string or number for children. In the browser title Elements can only have Text Nodes as children. If the children being rendered output more than a single text node in aggregate the browser will display markup and comments as text in the title and hydration will likely fail and fall back to client rendering");
          return children;
        case "listing":
        case "pre":
          target.push(startChunkForTag(type));
          innerHTML = children = null;
          for (value in props) {
            if (hasOwnProperty.call(props, value) && (propValue = props[value], propValue != null)) {
              switch(value) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                default:
                  pushAttribute(target, responseState, value, propValue);
              }
            }
          }
          target.push("\x3e");
          if (innerHTML != null) {
            if (children != null) {
              throw Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof innerHTML !== "object" || !("__html" in innerHTML)) {
              throw Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
            props = innerHTML.__html;
            props !== null && props !== void 0 && (typeof props === "string" && props.length > 0 && props[0] === "\n" ? target.push(leadingNewline, props) : (checkHtmlStringCoercion(props), target.push("" + props)));
          }
          typeof children === "string" && children[0] === "\n" && target.push(leadingNewline);
          return children;
        case "area":
        case "base":
        case "br":
        case "col":
        case "embed":
        case "hr":
        case "img":
        case "keygen":
        case "link":
        case "meta":
        case "param":
        case "source":
        case "track":
        case "wbr":
          target.push(startChunkForTag(type));
          for (var propKey$jscomp$1 in props) {
            if (hasOwnProperty.call(props, propKey$jscomp$1) && (children = props[propKey$jscomp$1], children != null)) {
              switch(propKey$jscomp$1) {
                case "children":
                case "dangerouslySetInnerHTML":
                  throw Error(type + " is a self-closing tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
                default:
                  pushAttribute(target, responseState, propKey$jscomp$1, children);
              }
            }
          }
          target.push("/\x3e");
          return null;
        case "annotation-xml":
        case "color-profile":
        case "font-face":
        case "font-face-src":
        case "font-face-uri":
        case "font-face-format":
        case "font-face-name":
        case "missing-glyph":
          return pushStartGenericElement(target, props, type, responseState);
        case "html":
          return formatContext.insertionMode === 0 && target.push("\x3c!DOCTYPE html\x3e"), pushStartGenericElement(target, props, type, responseState);
        default:
          if (type.indexOf("-") === -1 && typeof props.is !== "string") {
            return pushStartGenericElement(target, props, type, responseState);
          }
          target.push(startChunkForTag(type));
          innerHTML = children = null;
          for (selected in props) {
            if (hasOwnProperty.call(props, selected) && (propValue = props[selected], propValue != null)) {
              switch(selected) {
                case "children":
                  children = propValue;
                  break;
                case "dangerouslySetInnerHTML":
                  innerHTML = propValue;
                  break;
                case "style":
                  pushStyle(target, responseState, propValue);
                  break;
                case "suppressContentEditableWarning":
                case "suppressHydrationWarning":
                  break;
                default:
                  isAttributeNameSafe(selected) && typeof propValue !== "function" && typeof propValue !== "symbol" && target.push(" ", selected, '\x3d"', stringToChunk(escapeTextForBrowser(propValue)), attributeEnd);
              }
            }
          }
          target.push("\x3e");
          pushInnerHTML(target, innerHTML, children);
          return children;
      }
    }
    function writeStartPendingSuspenseBoundary(destination, responseState, id) {
      destination.push('\x3c!--$?--\x3e\x3ctemplate id\x3d"');
      if (id === null) {
        throw Error("An ID must have been assigned before we can complete the boundary.");
      }
      destination.push(id);
      return destination.push('"\x3e\x3c/template\x3e');
    }
    function writeStartSegment(destination, responseState, formatContext, id) {
      switch(formatContext.insertionMode) {
        case 0:
        case 1:
          return destination.push('\x3cdiv hidden id\x3d"'), destination.push(responseState.segmentPrefix), responseState = stringToChunk(id.toString(16)), destination.push(responseState), destination.push('"\x3e');
        case 2:
          return destination.push('\x3csvg aria-hidden\x3d"true" style\x3d"display:none" id\x3d"'), destination.push(responseState.segmentPrefix), responseState = stringToChunk(id.toString(16)), destination.push(responseState), destination.push('"\x3e');
        case 3:
          return destination.push('\x3cmath aria-hidden\x3d"true" style\x3d"display:none" id\x3d"'), destination.push(responseState.segmentPrefix), responseState = stringToChunk(id.toString(16)), destination.push(responseState), destination.push('"\x3e');
        case 4:
          return destination.push('\x3ctable hidden id\x3d"'), destination.push(responseState.segmentPrefix), responseState = stringToChunk(id.toString(16)), destination.push(responseState), destination.push('"\x3e');
        case 5:
          return destination.push('\x3ctable hidden\x3e\x3ctbody id\x3d"'), destination.push(responseState.segmentPrefix), responseState = stringToChunk(id.toString(16)), destination.push(responseState), destination.push('"\x3e');
        case 6:
          return destination.push('\x3ctable hidden\x3e\x3ctr id\x3d"'), destination.push(responseState.segmentPrefix), responseState = stringToChunk(id.toString(16)), destination.push(responseState), destination.push('"\x3e');
        case 7:
          return destination.push('\x3ctable hidden\x3e\x3ccolgroup id\x3d"'), destination.push(responseState.segmentPrefix), responseState = stringToChunk(id.toString(16)), destination.push(responseState), destination.push('"\x3e');
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    function writeEndSegment(destination, formatContext) {
      switch(formatContext.insertionMode) {
        case 0:
        case 1:
          return destination.push("\x3c/div\x3e");
        case 2:
          return destination.push("\x3c/svg\x3e");
        case 3:
          return destination.push("\x3c/math\x3e");
        case 4:
          return destination.push("\x3c/table\x3e");
        case 5:
          return destination.push("\x3c/tbody\x3e\x3c/table\x3e");
        case 6:
          return destination.push("\x3c/tr\x3e\x3c/table\x3e");
        case 7:
          return destination.push("\x3c/colgroup\x3e\x3c/table\x3e");
        default:
          throw Error("Unknown insertion mode. This is a bug in React.");
      }
    }
    function escapeJSStringsForInstructionScripts(input) {
      return JSON.stringify(input).replace(regexForJSStringsInScripts, function(match) {
        switch(match) {
          case "\x3c":
            return "\\u003c";
          case " ":
            return "\\u2028";
          case " ":
            return "\\u2029";
          default:
            throw Error("escapeJSStringsForInstructionScripts encountered a match it does not know how to replace. this means the match regex and the replacement characters are no longer in sync. This is a bug in React");
        }
      });
    }
    function createResponseState$1(generateStaticMarkup, identifierPrefix) {
      identifierPrefix = identifierPrefix === void 0 ? "" : identifierPrefix;
      return {bootstrapChunks:[], startInlineScript:"\x3cscript\x3e", placeholderPrefix:identifierPrefix + "P:", segmentPrefix:identifierPrefix + "S:", boundaryPrefix:identifierPrefix + "B:", idPrefix:identifierPrefix, nextSuspenseID:0, sentCompleteSegmentFunction:!1, sentCompleteBoundaryFunction:!1, sentClientRenderFunction:!1, generateStaticMarkup};
    }
    function pushTextInstance$1(target, text, responseState, textEmbedded) {
      if (responseState.generateStaticMarkup) {
        return target.push(stringToChunk(escapeTextForBrowser(text))), !1;
      }
      text === "" ? target = textEmbedded : (textEmbedded && target.push("\x3c!-- --\x3e"), target.push(stringToChunk(escapeTextForBrowser(text))), target = !0);
      return target;
    }
    function getComponentNameFromType(type) {
      if (type == null) {
        return null;
      }
      typeof type.tag === "number" && error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
      if (typeof type === "function") {
        return type.displayName || type.name || null;
      }
      if (typeof type === "string") {
        return type;
      }
      switch(type) {
        case REACT_FRAGMENT_TYPE:
          return "Fragment";
        case REACT_PORTAL_TYPE:
          return "Portal";
        case REACT_PROFILER_TYPE:
          return "Profiler";
        case REACT_STRICT_MODE_TYPE:
          return "StrictMode";
        case REACT_SUSPENSE_TYPE:
          return "Suspense";
        case REACT_SUSPENSE_LIST_TYPE:
          return "SuspenseList";
      }
      if (typeof type === "object") {
        switch(type.$$typeof) {
          case REACT_CONTEXT_TYPE:
            return (type.displayName || "Context") + ".Consumer";
          case REACT_PROVIDER_TYPE:
            return (type._context.displayName || "Context") + ".Provider";
          case REACT_FORWARD_REF_TYPE:
            var innerType = type.render;
            type = type.displayName;
            type || (type = innerType.displayName || innerType.name || "", type = type !== "" ? "ForwardRef(" + type + ")" : "ForwardRef");
            return type;
          case REACT_MEMO_TYPE:
            return innerType = type.displayName || null, innerType !== null ? innerType : getComponentNameFromType(type.type) || "Memo";
          case REACT_LAZY_TYPE:
            innerType = type._payload;
            type = type._init;
            try {
              return getComponentNameFromType(type(innerType));
            } catch (x) {
            }
        }
      }
      return null;
    }
    function disabledLog() {
    }
    function disableLogs() {
      if (disabledDepth === 0) {
        prevLog = console.log;
        prevInfo = console.info;
        prevWarn = console.warn;
        prevError = console.error;
        prevGroup = console.group;
        prevGroupCollapsed = console.groupCollapsed;
        prevGroupEnd = console.groupEnd;
        var props = {configurable:!0, enumerable:!0, value:disabledLog, writable:!0};
        Object.defineProperties(console, {info:props, log:props, warn:props, error:props, group:props, groupCollapsed:props, groupEnd:props});
      }
      disabledDepth++;
    }
    function reenableLogs() {
      disabledDepth--;
      if (disabledDepth === 0) {
        var props = {configurable:!0, enumerable:!0, writable:!0};
        Object.defineProperties(console, {log:assign({}, props, {value:prevLog}), info:assign({}, props, {value:prevInfo}), warn:assign({}, props, {value:prevWarn}), error:assign({}, props, {value:prevError}), group:assign({}, props, {value:prevGroup}), groupCollapsed:assign({}, props, {value:prevGroupCollapsed}), groupEnd:assign({}, props, {value:prevGroupEnd})});
      }
      disabledDepth < 0 && error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name, source, ownerFn) {
      if (prefix === void 0) {
        try {
          throw Error();
        } catch (x) {
          prefix = (source = x.stack.trim().match(/\n( *(at )?)/)) && source[1] || "";
        }
      }
      return "\n" + prefix + name;
    }
    function describeNativeComponentFrame(fn, construct) {
      if (!fn || reentry) {
        return "";
      }
      var frame = componentFrameCache.get(fn);
      if (frame !== void 0) {
        return frame;
      }
      reentry = !0;
      frame = Error.prepareStackTrace;
      Error.prepareStackTrace = void 0;
      var previousDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = null;
      disableLogs();
      try {
        if (construct) {
          if (construct = function() {
            throw Error();
          }, Object.defineProperty(construct.prototype, "props", {set:function() {
            throw Error();
          }}), typeof Reflect === "object" && Reflect.construct) {
            try {
              Reflect.construct(construct, []);
            } catch (x) {
              var control = x;
            }
            Reflect.construct(fn, [], construct);
          } else {
            try {
              construct.call();
            } catch (x) {
              control = x;
            }
            fn.call(construct.prototype);
          }
        } else {
          try {
            throw Error();
          } catch (x) {
            control = x;
          }
          fn();
        }
      } catch (sample) {
        if (sample && control && typeof sample.stack === "string") {
          for (var sampleLines = sample.stack.split("\n"), controlLines = control.stack.split("\n"), s = sampleLines.length - 1, c = controlLines.length - 1; s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c];) {
            c--;
          }
          for (; s >= 1 && c >= 0; s--, c--) {
            if (sampleLines[s] !== controlLines[c]) {
              if (s !== 1 || c !== 1) {
                do {
                  if (s--, c--, c < 0 || sampleLines[s] !== controlLines[c]) {
                    var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                    fn.displayName && _frame.includes("\x3canonymous\x3e") && (_frame = _frame.replace("\x3canonymous\x3e", fn.displayName));
                    typeof fn === "function" && componentFrameCache.set(fn, _frame);
                    return _frame;
                  }
                } while (s >= 1 && c >= 0);
              }
              break;
            }
          }
        }
      } finally {
        reentry = !1, ReactCurrentDispatcher.current = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
      }
      control = (control = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(control) : "";
      typeof fn === "function" && componentFrameCache.set(fn, control);
      return control;
    }
    function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
      if (type == null) {
        return "";
      }
      if (typeof type === "function") {
        return source = type.prototype, describeNativeComponentFrame(type, !(!source || !source.isReactComponent));
      }
      if (typeof type === "string") {
        return describeBuiltInComponentFrame(type);
      }
      switch(type) {
        case REACT_SUSPENSE_TYPE:
          return describeBuiltInComponentFrame("Suspense");
        case REACT_SUSPENSE_LIST_TYPE:
          return describeBuiltInComponentFrame("SuspenseList");
      }
      if (typeof type === "object") {
        switch(type.$$typeof) {
          case REACT_FORWARD_REF_TYPE:
            return describeNativeComponentFrame(type.render, !1);
          case REACT_MEMO_TYPE:
            return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
          case REACT_LAZY_TYPE:
            var payload = type._payload;
            type = type._init;
            try {
              return describeUnknownElementTypeFrameInDEV(type(payload), source, ownerFn);
            } catch (x) {
            }
        }
      }
      return "";
    }
    function setCurrentlyValidatingElement(element) {
      if (element) {
        var owner = element._owner;
        element = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
        ReactDebugCurrentFrame.setExtraStackFrame(element);
      } else {
        ReactDebugCurrentFrame.setExtraStackFrame(null);
      }
    }
    function checkPropTypes(typeSpecs, values, location, componentName, element) {
      var has = Function.call.bind(hasOwnProperty), typeSpecName;
      for (typeSpecName in typeSpecs) {
        if (has(typeSpecs, typeSpecName)) {
          var error$1 = void 0;
          try {
            if (typeof typeSpecs[typeSpecName] !== "function") {
              var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
              err.name = "Invariant Violation";
              throw err;
            }
            error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
          } catch (ex) {
            error$1 = ex;
          }
          !error$1 || error$1 instanceof Error || (setCurrentlyValidatingElement(element), error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1), setCurrentlyValidatingElement(null));
          error$1 instanceof Error && !(error$1.message in loggedTypeFailures) && (loggedTypeFailures[error$1.message] = !0, setCurrentlyValidatingElement(element), error("Failed %s type: %s", location, error$1.message), setCurrentlyValidatingElement(null));
        }
      }
    }
    function getMaskedContext(type, unmaskedContext) {
      var contextTypes = type.contextTypes;
      if (!contextTypes) {
        return emptyContextObject;
      }
      var context = {}, key;
      for (key in contextTypes) {
        context[key] = unmaskedContext[key];
      }
      type = getComponentNameFromType(type) || "Unknown";
      checkPropTypes(contextTypes, context, "context", type);
      return context;
    }
    function popToNearestCommonAncestor(prev, next) {
      if (prev !== next) {
        prev.context._currentValue2 = prev.parentValue;
        prev = prev.parent;
        var parentNext = next.parent;
        if (prev === null) {
          if (parentNext !== null) {
            throw Error("The stacks must reach the root at the same time. This is a bug in React.");
          }
        } else {
          if (parentNext === null) {
            throw Error("The stacks must reach the root at the same time. This is a bug in React.");
          }
          popToNearestCommonAncestor(prev, parentNext);
        }
        next.context._currentValue2 = next.value;
      }
    }
    function popAllPrevious(prev) {
      prev.context._currentValue2 = prev.parentValue;
      prev = prev.parent;
      prev !== null && popAllPrevious(prev);
    }
    function pushAllNext(next) {
      var parentNext = next.parent;
      parentNext !== null && pushAllNext(parentNext);
      next.context._currentValue2 = next.value;
    }
    function popPreviousToCommonLevel(prev, next) {
      prev.context._currentValue2 = prev.parentValue;
      prev = prev.parent;
      if (prev === null) {
        throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
      }
      prev.depth === next.depth ? popToNearestCommonAncestor(prev, next) : popPreviousToCommonLevel(prev, next);
    }
    function popNextToCommonLevel(prev, next) {
      var parentNext = next.parent;
      if (parentNext === null) {
        throw Error("The depth must equal at least at zero before reaching the root. This is a bug in React.");
      }
      prev.depth === parentNext.depth ? popToNearestCommonAncestor(prev, parentNext) : popNextToCommonLevel(prev, parentNext);
      next.context._currentValue2 = next.value;
    }
    function switchContext(newSnapshot) {
      var prev = currentActiveSnapshot;
      prev !== newSnapshot && (prev === null ? pushAllNext(newSnapshot) : newSnapshot === null ? popAllPrevious(prev) : prev.depth === newSnapshot.depth ? popToNearestCommonAncestor(prev, newSnapshot) : prev.depth > newSnapshot.depth ? popPreviousToCommonLevel(prev, newSnapshot) : popNextToCommonLevel(prev, newSnapshot), currentActiveSnapshot = newSnapshot);
    }
    function warnNoop(publicInstance, callerName) {
      publicInstance = (publicInstance = publicInstance.constructor) && getComponentNameFromType(publicInstance) || "ReactClass";
      var warningKey = publicInstance + "." + callerName;
      didWarnAboutNoopUpdateForComponent[warningKey] || (error("%s(...): Can only update a mounting component. This usually means you called %s() outside componentWillMount() on the server. This is a no-op.\n\nPlease check the code for the %s component.", callerName, callerName, publicInstance), didWarnAboutNoopUpdateForComponent[warningKey] = !0);
    }
    function mountClassInstance(instance, ctor, newProps, maskedLegacyContext) {
      var name = getComponentNameFromType(ctor) || "Component";
      instance.render || (ctor.prototype && typeof ctor.prototype.render === "function" ? error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name) : error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name));
      !instance.getInitialState || instance.getInitialState.isReactClassApproved || instance.state || error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
      instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved && error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
      instance.propTypes && error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
      instance.contextType && error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
      instance.contextTypes && error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
      ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor) && (didWarnAboutContextTypeAndContextTypes.add(ctor), error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name));
      typeof instance.componentShouldUpdate === "function" && error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
      ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined" && error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
      typeof instance.componentDidUnmount === "function" && error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
      typeof instance.componentDidReceiveProps === "function" && error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
      typeof instance.componentWillRecieveProps === "function" && error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
      typeof instance.UNSAFE_componentWillRecieveProps === "function" && error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
      var hasMutatedProps = instance.props !== newProps;
      instance.props !== void 0 && hasMutatedProps && error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
      instance.defaultProps && error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
      typeof instance.getSnapshotBeforeUpdate !== "function" || typeof instance.componentDidUpdate === "function" || didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor) || (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor), error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor)));
      typeof instance.getDerivedStateFromProps === "function" && error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
      typeof instance.getDerivedStateFromError === "function" && error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
      typeof ctor.getSnapshotBeforeUpdate === "function" && error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
      (hasMutatedProps = instance.state) && (typeof hasMutatedProps !== "object" || isArrayImpl(hasMutatedProps)) && error("%s.state: must be set to an object or null", name);
      typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object" && error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
      hasMutatedProps = instance.state !== void 0 ? instance.state : null;
      instance.updater = classComponentUpdater;
      instance.props = newProps;
      instance.state = hasMutatedProps;
      name = {queue:[], replace:!1};
      instance._reactInternals = name;
      var contextType = ctor.contextType;
      instance.context = typeof contextType === "object" && contextType !== null ? contextType._currentValue2 : maskedLegacyContext;
      instance.state === newProps && (contextType = getComponentNameFromType(ctor) || "Component", didWarnAboutDirectlyAssigningPropsToState.has(contextType) || (didWarnAboutDirectlyAssigningPropsToState.add(contextType), error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", contextType)));
      contextType = ctor.getDerivedStateFromProps;
      typeof contextType === "function" && (contextType = contextType(newProps, hasMutatedProps), warnOnUndefinedDerivedState(ctor, contextType), hasMutatedProps = contextType === null || contextType === void 0 ? hasMutatedProps : assign({}, hasMutatedProps, contextType), instance.state = hasMutatedProps);
      if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
        if (hasMutatedProps = instance.state, typeof instance.componentWillMount === "function" && (instance.componentWillMount.__suppressDeprecationWarning !== !0 && (contextType = getComponentNameFromType(ctor) || "Unknown", didWarnAboutDeprecatedWillMount[contextType] || (warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code from componentWillMount to componentDidMount (preferred in most cases) or the constructor.\n\nPlease update the following components: %s", 
        contextType), didWarnAboutDeprecatedWillMount[contextType] = !0)), instance.componentWillMount()), typeof instance.UNSAFE_componentWillMount === "function" && instance.UNSAFE_componentWillMount(), hasMutatedProps !== instance.state && (error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromType(ctor) || "Component"), classComponentUpdater.enqueueReplaceState(instance, instance.state, 
        null)), name.queue !== null && name.queue.length > 0) {
          if (ctor = name.queue, contextType = name.replace, name.queue = null, name.replace = !1, contextType && ctor.length === 1) {
            instance.state = ctor[0];
          } else {
            name = contextType ? ctor[0] : instance.state;
            hasMutatedProps = !0;
            for (contextType = contextType ? 1 : 0; contextType < ctor.length; contextType++) {
              var partial = ctor[contextType];
              partial = typeof partial === "function" ? partial.call(instance, name, newProps, maskedLegacyContext) : partial;
              partial != null && (hasMutatedProps ? (hasMutatedProps = !1, name = assign({}, name, partial)) : assign(name, partial));
            }
            instance.state = name;
          }
        } else {
          name.queue = null;
        }
      }
    }
    function pushTreeContext(baseContext, totalChildren, index) {
      var baseIdWithLeadingBit = baseContext.id;
      baseContext = baseContext.overflow;
      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
      baseIdWithLeadingBit &= ~(1 << baseLength);
      index += 1;
      var length = 32 - clz32(totalChildren) + baseLength;
      if (length > 30) {
        var numberOfOverflowBits = baseLength - baseLength % 5;
        length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
        baseIdWithLeadingBit >>= numberOfOverflowBits;
        baseLength -= numberOfOverflowBits;
        return {id:1 << 32 - clz32(totalChildren) + baseLength | index << baseLength | baseIdWithLeadingBit, overflow:length + baseContext};
      }
      return {id:1 << length | index << baseLength | baseIdWithLeadingBit, overflow:baseContext};
    }
    function clz32Fallback(x) {
      x >>>= 0;
      return x === 0 ? 32 : 31 - (log(x) / LN2 | 0) | 0;
    }
    function is(x, y) {
      return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
    }
    function resolveCurrentlyRenderingComponent() {
      if (currentlyRenderingComponent === null) {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
      }
      isInHookUserCodeInDev && error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
      return currentlyRenderingComponent;
    }
    function createHook() {
      if (numberOfReRenders > 0) {
        throw Error("Rendered more hooks than during the previous render");
      }
      return {memoizedState:null, queue:null, next:null};
    }
    function createWorkInProgressHook() {
      workInProgressHook === null ? firstWorkInProgressHook === null ? (isReRender = !1, firstWorkInProgressHook = workInProgressHook = createHook()) : (isReRender = !0, workInProgressHook = firstWorkInProgressHook) : workInProgressHook.next === null ? (isReRender = !1, workInProgressHook = workInProgressHook.next = createHook()) : (isReRender = !0, workInProgressHook = workInProgressHook.next);
      return workInProgressHook;
    }
    function resetHooksState() {
      isInHookUserCodeInDev = !1;
      currentlyRenderingTask = currentlyRenderingComponent = null;
      didScheduleRenderPhaseUpdate = !1;
      firstWorkInProgressHook = null;
      numberOfReRenders = 0;
      workInProgressHook = renderPhaseUpdates = null;
    }
    function basicStateReducer(state, action) {
      return typeof action === "function" ? action(state) : action;
    }
    function useReducer(reducer, initialArg, init) {
      reducer !== basicStateReducer && (currentHookNameInDev = "useReducer");
      currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
      workInProgressHook = createWorkInProgressHook();
      if (isReRender) {
        init = workInProgressHook.queue;
        initialArg = init.dispatch;
        if (renderPhaseUpdates !== null) {
          var firstRenderPhaseUpdate = renderPhaseUpdates.get(init);
          if (firstRenderPhaseUpdate !== void 0) {
            renderPhaseUpdates.delete(init);
            init = workInProgressHook.memoizedState;
            do {
              var action = firstRenderPhaseUpdate.action;
              isInHookUserCodeInDev = !0;
              init = reducer(init, action);
              isInHookUserCodeInDev = !1;
              firstRenderPhaseUpdate = firstRenderPhaseUpdate.next;
            } while (firstRenderPhaseUpdate !== null);
            workInProgressHook.memoizedState = init;
            return [init, initialArg];
          }
        }
        return [workInProgressHook.memoizedState, initialArg];
      }
      isInHookUserCodeInDev = !0;
      reducer = reducer === basicStateReducer ? typeof initialArg === "function" ? initialArg() : initialArg : init !== void 0 ? init(initialArg) : initialArg;
      isInHookUserCodeInDev = !1;
      workInProgressHook.memoizedState = reducer;
      reducer = workInProgressHook.queue = {last:null, dispatch:null};
      reducer = reducer.dispatch = dispatchAction.bind(null, currentlyRenderingComponent, reducer);
      return [workInProgressHook.memoizedState, reducer];
    }
    function useMemo(nextCreate, deps) {
      currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
      workInProgressHook = createWorkInProgressHook();
      deps = deps === void 0 ? null : deps;
      if (workInProgressHook !== null) {
        var prevState = workInProgressHook.memoizedState;
        if (prevState !== null && deps !== null) {
          a: {
            var JSCompiler_inline_result = prevState[1];
            if (JSCompiler_inline_result === null) {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev), JSCompiler_inline_result = !1;
            } else {
              deps.length !== JSCompiler_inline_result.length && error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + deps.join(", ") + "]", "[" + JSCompiler_inline_result.join(", ") + "]");
              for (var i = 0; i < JSCompiler_inline_result.length && i < deps.length; i++) {
                if (!objectIs(deps[i], JSCompiler_inline_result[i])) {
                  JSCompiler_inline_result = !1;
                  break a;
                }
              }
              JSCompiler_inline_result = !0;
            }
          }
          if (JSCompiler_inline_result) {
            return prevState[0];
          }
        }
      }
      isInHookUserCodeInDev = !0;
      nextCreate = nextCreate();
      isInHookUserCodeInDev = !1;
      workInProgressHook.memoizedState = [nextCreate, deps];
      return nextCreate;
    }
    function dispatchAction(componentIdentity, queue, action) {
      if (numberOfReRenders >= 25) {
        throw Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
      }
      if (componentIdentity === currentlyRenderingComponent) {
        if (didScheduleRenderPhaseUpdate = !0, componentIdentity = {action, next:null}, renderPhaseUpdates === null && (renderPhaseUpdates = new Map()), action = renderPhaseUpdates.get(queue), action === void 0) {
          renderPhaseUpdates.set(queue, componentIdentity);
        } else {
          for (queue = action; queue.next !== null;) {
            queue = queue.next;
          }
          queue.next = componentIdentity;
        }
      }
    }
    function unsupportedStartTransition() {
      throw Error("startTransition cannot be called during server rendering.");
    }
    function noop() {
    }
    function defaultErrorHandler(error) {
      console.error(error);
      return null;
    }
    function noop$1() {
    }
    function createRequest(children, responseState, rootFormatContext, progressiveChunkSize, onError, onAllReady, onShellReady, onShellError, onFatalError) {
      var pingedTasks = [], abortSet = new Set();
      responseState = {destination:null, responseState, progressiveChunkSize:progressiveChunkSize === void 0 ? 12800 : progressiveChunkSize, status:0, fatalError:null, nextSegmentId:0, allPendingTasks:0, pendingRootTasks:0, completedRootSegment:null, abortableTasks:abortSet, pingedTasks, clientRenderedBoundaries:[], completedBoundaries:[], partialBoundaries:[], onError:onError === void 0 ? defaultErrorHandler : onError, onAllReady:onAllReady === void 0 ? noop$1 : onAllReady, onShellReady:onShellReady === 
      void 0 ? noop$1 : onShellReady, onShellError:onShellError === void 0 ? noop$1 : onShellError, onFatalError:onFatalError === void 0 ? noop$1 : onFatalError};
      rootFormatContext = createPendingSegment(responseState, 0, null, rootFormatContext, !1, !1);
      rootFormatContext.parentFlushed = !0;
      children = createTask(responseState, children, null, rootFormatContext, abortSet, emptyContextObject, null, emptyTreeContext);
      pingedTasks.push(children);
      return responseState;
    }
    function createTask(request, node, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext) {
      request.allPendingTasks++;
      blockedBoundary === null ? request.pendingRootTasks++ : blockedBoundary.pendingTasks++;
      var task = {node, ping:function() {
        var pingedTasks = request.pingedTasks;
        pingedTasks.push(task);
        pingedTasks.length === 1 && performWork(request);
      }, blockedBoundary, blockedSegment, abortSet, legacyContext, context, treeContext, componentStack:null};
      abortSet.add(task);
      return task;
    }
    function createPendingSegment(request, index, boundary, formatContext, lastPushedText, textEmbedded) {
      return {status:0, id:-1, index, parentFlushed:!1, chunks:[], children:[], formatContext, boundary, lastPushedText, textEmbedded};
    }
    function getCurrentStackInDEV() {
      if (currentTaskInDEV === null || currentTaskInDEV.componentStack === null) {
        return "";
      }
      a: {
        try {
          var info = "", node = currentTaskInDEV.componentStack;
          do {
            switch(node.tag) {
              case 0:
                info += describeBuiltInComponentFrame(node.type, null, null);
                break;
              case 1:
                info += describeNativeComponentFrame(node.type, !1);
                break;
              case 2:
                info += describeNativeComponentFrame(node.type, !0);
            }
            node = node.parent;
          } while (node);
          var JSCompiler_inline_result = info;
          break a;
        } catch (x) {
          JSCompiler_inline_result = "\nError generating stack: " + x.message + "\n" + x.stack;
          break a;
        }
        JSCompiler_inline_result = void 0;
      }
      return JSCompiler_inline_result;
    }
    function pushBuiltInComponentStackInDEV(task, type) {
      task.componentStack = {tag:0, parent:task.componentStack, type};
    }
    function popComponentStackInDEV(task) {
      task.componentStack === null ? error("Unexpectedly popped too many stack frames. This is a bug in React.") : task.componentStack = task.componentStack.parent;
    }
    function captureBoundaryErrorDetailsDev(boundary, error) {
      error = typeof error === "string" ? error : error && typeof error.message === "string" ? error.message : String(error);
      var errorComponentStack = lastBoundaryErrorComponentStackDev || getCurrentStackInDEV();
      lastBoundaryErrorComponentStackDev = null;
      boundary.errorMessage = error;
      boundary.errorComponentStack = errorComponentStack;
    }
    function logRecoverableError(request, error) {
      request = request.onError(error);
      if (request != null && typeof request !== "string") {
        throw Error('onError returned something with a type other than "string". onError should return a string and may return null or undefined but must not return anything else. It received something of type "' + typeof request + '" instead');
      }
      return request;
    }
    function fatalError(request, error) {
      var onShellError = request.onShellError;
      onShellError(error);
      onShellError = request.onFatalError;
      onShellError(error);
      request.destination !== null ? (request.status = 2, request.destination.destroy(error)) : (request.status = 1, request.fatalError = error);
    }
    function renderWithHooks(request, task, Component, props, secondArg) {
      currentlyRenderingComponent = {};
      currentlyRenderingTask = task;
      isInHookUserCodeInDev = !1;
      localIdCounter = 0;
      for (request = Component(props, secondArg); didScheduleRenderPhaseUpdate;) {
        didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, numberOfReRenders += 1, workInProgressHook = null, request = Component(props, secondArg);
      }
      resetHooksState();
      return request;
    }
    function finishClassComponent(request, task, instance, Component, props) {
      var nextChildren = instance.render();
      instance.props !== props && (didWarnAboutReassigningProps || error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromType(Component) || "a component"), didWarnAboutReassigningProps = !0);
      var childContextTypes = Component.childContextTypes;
      if (childContextTypes !== null && childContextTypes !== void 0) {
        props = task.legacyContext;
        if (typeof instance.getChildContext !== "function") {
          Component = getComponentNameFromType(Component) || "Unknown", warnedAboutMissingGetChildContext[Component] || (warnedAboutMissingGetChildContext[Component] = !0, error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", Component, Component)), Component = props;
        } else {
          instance = instance.getChildContext();
          for (var contextKey in instance) {
            if (!(contextKey in childContextTypes)) {
              throw Error((getComponentNameFromType(Component) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
            }
          }
          Component = getComponentNameFromType(Component) || "Unknown";
          checkPropTypes(childContextTypes, instance, "child context", Component);
          Component = assign({}, props, instance);
        }
        task.legacyContext = Component;
        renderNodeDestructive(request, task, nextChildren);
        task.legacyContext = props;
      } else {
        renderNodeDestructive(request, task, nextChildren);
      }
    }
    function resolveDefaultProps(Component, baseProps) {
      if (Component && Component.defaultProps) {
        baseProps = assign({}, baseProps);
        Component = Component.defaultProps;
        for (var propName in Component) {
          baseProps[propName] === void 0 && (baseProps[propName] = Component[propName]);
        }
        return baseProps;
      }
      return baseProps;
    }
    function renderElement(request, task, type, props, ref) {
      if (typeof type === "function") {
        if (type.prototype && type.prototype.isReactComponent) {
          task.componentStack = {tag:2, parent:task.componentStack, type};
          ref = getMaskedContext(type, task.legacyContext);
          var contextType = type.contextType;
          if ("contextType" in type && contextType !== null && (contextType === void 0 || contextType.$$typeof !== REACT_CONTEXT_TYPE || contextType._context !== void 0) && !didWarnAboutInvalidateContextType.has(type)) {
            didWarnAboutInvalidateContextType.add(type);
            var addendum = contextType === void 0 ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file." : typeof contextType !== "object" ? " However, it is set to a " + typeof contextType + "." : contextType.$$typeof === REACT_PROVIDER_TYPE ? " Did you accidentally pass the Context.Provider instead?" : contextType._context !== void 0 ? 
            " Did you accidentally pass the Context.Consumer instead?" : " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
            error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(type) || "Component", addendum);
          }
          contextType = new type(props, typeof contextType === "object" && contextType !== null ? contextType._currentValue2 : ref);
          typeof type.getDerivedStateFromProps !== "function" || contextType.state !== null && contextType.state !== void 0 || (addendum = getComponentNameFromType(type) || "Component", didWarnAboutUninitializedState.has(addendum) || (didWarnAboutUninitializedState.add(addendum), error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", 
          addendum, contextType.state === null ? "null" : "undefined", addendum)));
          if (typeof type.getDerivedStateFromProps === "function" || typeof contextType.getSnapshotBeforeUpdate === "function") {
            var foundWillReceivePropsName = addendum = null, foundWillUpdateName = null;
            typeof contextType.componentWillMount === "function" && contextType.componentWillMount.__suppressDeprecationWarning !== !0 ? addendum = "componentWillMount" : typeof contextType.UNSAFE_componentWillMount === "function" && (addendum = "UNSAFE_componentWillMount");
            typeof contextType.componentWillReceiveProps === "function" && contextType.componentWillReceiveProps.__suppressDeprecationWarning !== !0 ? foundWillReceivePropsName = "componentWillReceiveProps" : typeof contextType.UNSAFE_componentWillReceiveProps === "function" && (foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps");
            typeof contextType.componentWillUpdate === "function" && contextType.componentWillUpdate.__suppressDeprecationWarning !== !0 ? foundWillUpdateName = "componentWillUpdate" : typeof contextType.UNSAFE_componentWillUpdate === "function" && (foundWillUpdateName = "UNSAFE_componentWillUpdate");
            if (addendum !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
              var _componentName = getComponentNameFromType(type) || "Component", newApiName = typeof type.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
              didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName) || (didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName), error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, addendum !== null ? "\n  " + 
              addendum : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : ""));
            }
          }
          mountClassInstance(contextType, type, props, ref);
          finishClassComponent(request, task, contextType, type, props);
        } else {
          if (addendum = getMaskedContext(type, task.legacyContext), task.componentStack = {tag:1, parent:task.componentStack, type}, type.prototype && typeof type.prototype.render === "function" && (ref = getComponentNameFromType(type) || "Unknown", didWarnAboutBadClass[ref] || (error("The \x3c%s /\x3e component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", ref, ref), didWarnAboutBadClass[ref] = 
          !0)), ref = renderWithHooks(request, task, type, props, addendum), contextType = localIdCounter !== 0, typeof ref === "object" && ref !== null && typeof ref.render === "function" && ref.$$typeof === void 0 && (foundWillReceivePropsName = getComponentNameFromType(type) || "Unknown", didWarnAboutModulePatternComponent[foundWillReceivePropsName] || (error("The \x3c%s /\x3e component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype \x3d React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", 
          foundWillReceivePropsName, foundWillReceivePropsName, foundWillReceivePropsName), didWarnAboutModulePatternComponent[foundWillReceivePropsName] = !0)), typeof ref === "object" && ref !== null && typeof ref.render === "function" && ref.$$typeof === void 0) {
            contextType = getComponentNameFromType(type) || "Unknown", didWarnAboutModulePatternComponent[contextType] || (error("The \x3c%s /\x3e component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype \x3d React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", contextType, 
            contextType, contextType), didWarnAboutModulePatternComponent[contextType] = !0), mountClassInstance(ref, type, props, addendum), finishClassComponent(request, task, ref, type, props);
          } else {
            if (type && type.childContextTypes && error("%s(...): childContextTypes cannot be defined on a function component.", type.displayName || type.name || "Component"), type.defaultProps !== void 0 && (props = getComponentNameFromType(type) || "Unknown", didWarnAboutDefaultPropsOnFunctionComponent[props] || (error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", props), didWarnAboutDefaultPropsOnFunctionComponent[props] = 
            !0)), typeof type.getDerivedStateFromProps === "function" && (props = getComponentNameFromType(type) || "Unknown", didWarnAboutGetDerivedStateOnFunctionComponent[props] || (error("%s: Function components do not support getDerivedStateFromProps.", props), didWarnAboutGetDerivedStateOnFunctionComponent[props] = !0)), typeof type.contextType === "object" && type.contextType !== null && (props = getComponentNameFromType(type) || "Unknown", didWarnAboutContextTypeOnFunctionComponent[props] || 
            (error("%s: Function components do not support contextType.", props), didWarnAboutContextTypeOnFunctionComponent[props] = !0)), contextType) {
              props = task.treeContext;
              task.treeContext = pushTreeContext(props, 1, 0);
              try {
                renderNodeDestructive(request, task, ref);
              } finally {
                task.treeContext = props;
              }
            } else {
              renderNodeDestructive(request, task, ref);
            }
          }
        }
        popComponentStackInDEV(task);
      } else {
        if (typeof type === "string") {
          pushBuiltInComponentStackInDEV(task, type);
          ref = task.blockedSegment;
          contextType = pushStartInstance(ref.chunks, type, props, request.responseState, ref.formatContext);
          ref.lastPushedText = !1;
          addendum = ref.formatContext;
          ref.formatContext = getChildFormatContext(addendum, type, props);
          renderNode(request, task, contextType);
          ref.formatContext = addendum;
          switch(type) {
            case "area":
            case "base":
            case "br":
            case "col":
            case "embed":
            case "hr":
            case "img":
            case "input":
            case "keygen":
            case "link":
            case "meta":
            case "param":
            case "source":
            case "track":
            case "wbr":
              break;
            default:
              ref.chunks.push("\x3c/", type, "\x3e");
          }
          ref.lastPushedText = !1;
          popComponentStackInDEV(task);
        } else {
          switch(type) {
            case REACT_LEGACY_HIDDEN_TYPE:
            case REACT_DEBUG_TRACING_MODE_TYPE:
            case REACT_STRICT_MODE_TYPE:
            case REACT_PROFILER_TYPE:
            case REACT_FRAGMENT_TYPE:
              renderNodeDestructive(request, task, props.children);
              return;
            case REACT_SUSPENSE_LIST_TYPE:
              pushBuiltInComponentStackInDEV(task, "SuspenseList");
              renderNodeDestructive(request, task, props.children);
              popComponentStackInDEV(task);
              return;
            case REACT_SCOPE_TYPE:
              throw Error("ReactDOMServer does not yet support scope components.");
            case REACT_SUSPENSE_TYPE:
              a: {
                pushBuiltInComponentStackInDEV(task, "Suspense");
                type = task.blockedBoundary;
                ref = task.blockedSegment;
                contextType = props.fallback;
                props = props.children;
                addendum = new Set();
                foundWillReceivePropsName = {id:null, rootSegmentID:-1, parentFlushed:!1, pendingTasks:0, forceClientRender:!1, completedSegments:[], byteSize:0, fallbackAbortableTasks:addendum, errorDigest:null};
                foundWillUpdateName = createPendingSegment(request, ref.chunks.length, foundWillReceivePropsName, ref.formatContext, !1, !1);
                ref.children.push(foundWillUpdateName);
                ref.lastPushedText = !1;
                _componentName = createPendingSegment(request, 0, null, ref.formatContext, !1, !1);
                _componentName.parentFlushed = !0;
                task.blockedBoundary = foundWillReceivePropsName;
                task.blockedSegment = _componentName;
                try {
                  if (renderNode(request, task, props), request.responseState.generateStaticMarkup || _componentName.lastPushedText && _componentName.textEmbedded && _componentName.chunks.push("\x3c!-- --\x3e"), _componentName.status = 1, queueCompletedSegment(foundWillReceivePropsName, _componentName), foundWillReceivePropsName.pendingTasks === 0) {
                    popComponentStackInDEV(task);
                    break a;
                  }
                } catch (error) {
                  _componentName.status = 4, foundWillReceivePropsName.forceClientRender = !0, foundWillReceivePropsName.errorDigest = logRecoverableError(request, error), captureBoundaryErrorDetailsDev(foundWillReceivePropsName, error);
                } finally {
                  task.blockedBoundary = type, task.blockedSegment = ref;
                }
                props = createTask(request, contextType, type, foundWillUpdateName, addendum, task.legacyContext, task.context, task.treeContext);
                props.componentStack = task.componentStack;
                request.pingedTasks.push(props);
                popComponentStackInDEV(task);
              }
              return;
          }
          if (typeof type === "object" && type !== null) {
            switch(type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                task.componentStack = {tag:1, parent:task.componentStack, type:type.render};
                props = renderWithHooks(request, task, type.render, props, ref);
                if (localIdCounter !== 0) {
                  type = task.treeContext;
                  task.treeContext = pushTreeContext(type, 1, 0);
                  try {
                    renderNodeDestructive(request, task, props);
                  } finally {
                    task.treeContext = type;
                  }
                } else {
                  renderNodeDestructive(request, task, props);
                }
                popComponentStackInDEV(task);
                return;
              case REACT_MEMO_TYPE:
                type = type.type;
                props = resolveDefaultProps(type, props);
                renderElement(request, task, type, props, ref);
                return;
              case REACT_PROVIDER_TYPE:
                type = type._context;
                ref = props.value;
                contextType = props.children;
                props = task.context;
                addendum = type._currentValue2;
                type._currentValue2 = ref;
                type._currentRenderer2 !== void 0 && type._currentRenderer2 !== null && type._currentRenderer2 !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                type._currentRenderer2 = rendererSigil;
                foundWillReceivePropsName = currentActiveSnapshot;
                currentActiveSnapshot = ref = {parent:foundWillReceivePropsName, depth:foundWillReceivePropsName === null ? 0 : foundWillReceivePropsName.depth + 1, context:type, parentValue:addendum, value:ref};
                task.context = ref;
                renderNodeDestructive(request, task, contextType);
                request = currentActiveSnapshot;
                if (request === null) {
                  throw Error("Tried to pop a Context at the root of the app. This is a bug in React.");
                }
                request.context !== type && error("The parent context is not the expected context. This is probably a bug in React.");
                ref = request.parentValue;
                request.context._currentValue2 = ref === REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED ? request.context._defaultValue : ref;
                type._currentRenderer2 !== void 0 && type._currentRenderer2 !== null && type._currentRenderer2 !== rendererSigil && error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
                type._currentRenderer2 = rendererSigil;
                request = currentActiveSnapshot = request.parent;
                task.context = request;
                props !== task.context && error("Popping the context provider did not return back to the original snapshot. This is a bug in React.");
                return;
              case REACT_CONTEXT_TYPE:
                type._context === void 0 ? type === type.Consumer || hasWarnedAboutUsingContextAsConsumer || (hasWarnedAboutUsingContextAsConsumer = !0, error("Rendering \x3cContext\x3e directly is not supported and will be removed in a future major release. Did you mean to render \x3cContext.Consumer\x3e instead?")) : type = type._context;
                props = props.children;
                typeof props !== "function" && error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
                props = props(type._currentValue2);
                renderNodeDestructive(request, task, props);
                return;
              case REACT_LAZY_TYPE:
                pushBuiltInComponentStackInDEV(task, "Lazy");
                ref = type._init;
                type = ref(type._payload);
                props = resolveDefaultProps(type, props);
                renderElement(request, task, type, props, void 0);
                popComponentStackInDEV(task);
                return;
            }
          }
          task = "";
          if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
            task += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
          }
          throw Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + ((type == null ? type : typeof type) + "." + task));
        }
      }
    }
    function renderNodeDestructive(request, task, node) {
      try {
        a: {
          task.node = node;
          if (typeof node === "object" && node !== null) {
            switch(node.$$typeof) {
              case REACT_ELEMENT_TYPE:
                renderElement(request, task, node.type, node.props, node.ref);
                var JSCompiler_inline_result = void 0;
                break a;
              case REACT_PORTAL_TYPE:
                throw Error("Portals are not currently supported by the server renderer. Render them conditionally so that they only appear on the client render.");
              case REACT_LAZY_TYPE:
                var payload = node._payload, init = node._init;
                try {
                  var resolvedNode = init(payload);
                } catch (x) {
                  throw typeof x === "object" && x !== null && typeof x.then === "function" && pushBuiltInComponentStackInDEV(task, "Lazy"), x;
                }
                renderNodeDestructive(request, task, resolvedNode);
                JSCompiler_inline_result = void 0;
                break a;
            }
            if (isArrayImpl(node)) {
              renderChildrenArray(request, task, node);
              JSCompiler_inline_result = void 0;
              break a;
            }
            if (node === null || typeof node !== "object") {
              var iteratorFn = null;
            } else {
              var maybeIterator = MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL] || node["@@iterator"];
              iteratorFn = typeof maybeIterator === "function" ? maybeIterator : null;
            }
            if (iteratorFn) {
              payload = iteratorFn;
              typeof Symbol === "function" && node[Symbol.toStringTag] === "Generator" && (didWarnAboutGenerators || error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers."), didWarnAboutGenerators = !0);
              node.entries === payload && (didWarnAboutMaps || error("Using Maps as children is not supported. Use an array of keyed ReactElements instead."), didWarnAboutMaps = !0);
              var iterator = iteratorFn.call(node);
              if (iterator) {
                var step = iterator.next();
                if (!step.done) {
                  node = [];
                  do {
                    node.push(step.value), step = iterator.next();
                  } while (!step.done);
                  renderChildrenArray(request, task, node);
                }
                JSCompiler_inline_result = void 0;
                break a;
              }
            }
            var childString = Object.prototype.toString.call(node);
            throw Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(node).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
          }
          if (typeof node === "string") {
            var segment = task.blockedSegment;
            segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, node, request.responseState, segment.lastPushedText);
          } else {
            if (typeof node === "number") {
              var _segment = task.blockedSegment;
              _segment.lastPushedText = pushTextInstance$1(task.blockedSegment.chunks, "" + node, request.responseState, _segment.lastPushedText);
            } else {
              typeof node === "function" && error("Functions are not valid as a React child. This may happen if you return a Component instead of \x3cComponent /\x3e from render. Or maybe you meant to call this function rather than return it.");
            }
          }
          JSCompiler_inline_result = void 0;
        }
        return JSCompiler_inline_result;
      } catch (x) {
        if (typeof x !== "object" || x === null || typeof x.then !== "function") {
          lastBoundaryErrorComponentStackDev = lastBoundaryErrorComponentStackDev !== null ? lastBoundaryErrorComponentStackDev : getCurrentStackInDEV();
        }
        throw x;
      }
    }
    function renderChildrenArray(request, task, children) {
      for (var totalChildren = children.length, i = 0; i < totalChildren; i++) {
        var prevTreeContext = task.treeContext;
        task.treeContext = pushTreeContext(prevTreeContext, totalChildren, i);
        try {
          renderNode(request, task, children[i]);
        } finally {
          task.treeContext = prevTreeContext;
        }
      }
    }
    function renderNode(request, task, node) {
      var previousFormatContext = task.blockedSegment.formatContext, previousLegacyContext = task.legacyContext, previousContext = task.context;
      var previousComponentStack = task.componentStack;
      try {
        return renderNodeDestructive(request, task, node);
      } catch (x) {
        if (resetHooksState(), typeof x === "object" && x !== null && typeof x.then === "function") {
          node = x;
          var segment = task.blockedSegment, newSegment = createPendingSegment(request, segment.chunks.length, null, segment.formatContext, segment.lastPushedText, !0);
          segment.children.push(newSegment);
          segment.lastPushedText = !1;
          request = createTask(request, task.node, task.blockedBoundary, newSegment, task.abortSet, task.legacyContext, task.context, task.treeContext);
          task.componentStack !== null && (request.componentStack = task.componentStack.parent);
          request = request.ping;
          node.then(request, request);
          task.blockedSegment.formatContext = previousFormatContext;
          task.legacyContext = previousLegacyContext;
          task.context = previousContext;
          switchContext(previousContext);
          task.componentStack = previousComponentStack;
        } else {
          throw task.blockedSegment.formatContext = previousFormatContext, task.legacyContext = previousLegacyContext, task.context = previousContext, switchContext(previousContext), task.componentStack = previousComponentStack, x;
        }
      }
    }
    function abortTaskSoft(task) {
      var boundary = task.blockedBoundary;
      task = task.blockedSegment;
      task.status = 3;
      finishedTask(this, boundary, task);
    }
    function abortTask(task, request, reason) {
      var boundary = task.blockedBoundary;
      task.blockedSegment.status = 3;
      if (boundary === null) {
        request.allPendingTasks--, request.status !== 2 && (request.status = 2, request.destination !== null && request.destination.push(null));
      } else {
        boundary.pendingTasks--;
        if (!boundary.forceClientRender) {
          boundary.forceClientRender = !0;
          var _error = reason === void 0 ? Error("The render was aborted by the server without a reason.") : reason;
          boundary.errorDigest = request.onError(_error);
          _error = _error && typeof _error.message === "string" ? "The server did not finish this Suspense boundary: " + _error.message : "The server did not finish this Suspense boundary: " + String(_error);
          var previousTaskInDev = currentTaskInDEV;
          currentTaskInDEV = task;
          try {
            captureBoundaryErrorDetailsDev(boundary, _error);
          } finally {
            currentTaskInDEV = previousTaskInDev;
          }
          boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary);
        }
        boundary.fallbackAbortableTasks.forEach(function(fallbackTask) {
          return abortTask(fallbackTask, request, reason);
        });
        boundary.fallbackAbortableTasks.clear();
        request.allPendingTasks--;
        request.allPendingTasks === 0 && (task = request.onAllReady, task());
      }
    }
    function queueCompletedSegment(boundary, segment) {
      if (segment.chunks.length === 0 && segment.children.length === 1 && segment.children[0].boundary === null) {
        var childSegment = segment.children[0];
        childSegment.id = segment.id;
        childSegment.parentFlushed = !0;
        childSegment.status === 1 && queueCompletedSegment(boundary, childSegment);
      } else {
        boundary.completedSegments.push(segment);
      }
    }
    function finishedTask(request, boundary, segment) {
      if (boundary === null) {
        if (segment.parentFlushed) {
          if (request.completedRootSegment !== null) {
            throw Error("There can only be one root segment. This is a bug in React.");
          }
          request.completedRootSegment = segment;
        }
        request.pendingRootTasks--;
        request.pendingRootTasks === 0 && (request.onShellError = noop$1, boundary = request.onShellReady, boundary());
      } else {
        boundary.pendingTasks--, boundary.forceClientRender || (boundary.pendingTasks === 0 ? (segment.parentFlushed && segment.status === 1 && queueCompletedSegment(boundary, segment), boundary.parentFlushed && request.completedBoundaries.push(boundary), boundary.fallbackAbortableTasks.forEach(abortTaskSoft, request), boundary.fallbackAbortableTasks.clear()) : segment.parentFlushed && segment.status === 1 && (queueCompletedSegment(boundary, segment), boundary.completedSegments.length === 1 && boundary.parentFlushed && 
        request.partialBoundaries.push(boundary)));
      }
      request.allPendingTasks--;
      request.allPendingTasks === 0 && (request = request.onAllReady, request());
    }
    function performWork(request$jscomp$0) {
      if (request$jscomp$0.status !== 2) {
        var prevContext = currentActiveSnapshot, prevDispatcher = ReactCurrentDispatcher$1.current;
        ReactCurrentDispatcher$1.current = Dispatcher;
        var prevGetCurrentStackImpl = ReactDebugCurrentFrame$1.getCurrentStack;
        ReactDebugCurrentFrame$1.getCurrentStack = getCurrentStackInDEV;
        var prevResponseState = currentResponseState;
        currentResponseState = request$jscomp$0.responseState;
        try {
          var pingedTasks = request$jscomp$0.pingedTasks, i;
          for (i = 0; i < pingedTasks.length; i++) {
            var request = request$jscomp$0, task = pingedTasks[i], segment = task.blockedSegment;
            if (segment.status === 0) {
              switchContext(task.context);
              var prevTaskInDEV = null;
              prevTaskInDEV = currentTaskInDEV;
              currentTaskInDEV = task;
              try {
                renderNodeDestructive(request, task, task.node), request.responseState.generateStaticMarkup || segment.lastPushedText && segment.textEmbedded && segment.chunks.push("\x3c!-- --\x3e"), task.abortSet.delete(task), segment.status = 1, finishedTask(request, task.blockedBoundary, segment);
              } catch (x) {
                if (resetHooksState(), typeof x === "object" && x !== null && typeof x.then === "function") {
                  var ping = task.ping;
                  x.then(ping, ping);
                } else {
                  task.abortSet.delete(task);
                  segment.status = 4;
                  var boundary = task.blockedBoundary, error = x, errorDigest = logRecoverableError(request, error);
                  boundary === null ? fatalError(request, error) : (boundary.pendingTasks--, boundary.forceClientRender || (boundary.forceClientRender = !0, boundary.errorDigest = errorDigest, captureBoundaryErrorDetailsDev(boundary, error), boundary.parentFlushed && request.clientRenderedBoundaries.push(boundary)));
                  request.allPendingTasks--;
                  if (request.allPendingTasks === 0) {
                    var onAllReady = request.onAllReady;
                    onAllReady();
                  }
                }
              } finally {
                currentTaskInDEV = prevTaskInDEV;
              }
            }
          }
          pingedTasks.splice(0, i);
          request$jscomp$0.destination !== null && flushCompletedQueues(request$jscomp$0, request$jscomp$0.destination);
        } catch (error) {
          logRecoverableError(request$jscomp$0, error), fatalError(request$jscomp$0, error);
        } finally {
          currentResponseState = prevResponseState, ReactCurrentDispatcher$1.current = prevDispatcher, ReactDebugCurrentFrame$1.getCurrentStack = prevGetCurrentStackImpl, prevDispatcher === Dispatcher && switchContext(prevContext);
        }
      }
    }
    function flushSubtree(request, destination, segment) {
      segment.parentFlushed = !0;
      switch(segment.status) {
        case 0:
          var segmentID = segment.id = request.nextSegmentId++;
          segment.lastPushedText = !1;
          segment.textEmbedded = !1;
          request = request.responseState;
          destination.push('\x3ctemplate id\x3d"');
          destination.push(request.placeholderPrefix);
          request = stringToChunk(segmentID.toString(16));
          destination.push(request);
          return destination.push('"\x3e\x3c/template\x3e');
        case 1:
          segment.status = 2;
          var r = !0;
          segmentID = segment.chunks;
          var chunkIdx = 0;
          segment = segment.children;
          for (var childIdx = 0; childIdx < segment.length; childIdx++) {
            for (r = segment[childIdx]; chunkIdx < r.index; chunkIdx++) {
              destination.push(segmentID[chunkIdx]);
            }
            r = flushSegment(request, destination, r);
          }
          for (; chunkIdx < segmentID.length - 1; chunkIdx++) {
            destination.push(segmentID[chunkIdx]);
          }
          chunkIdx < segmentID.length && (r = destination.push(segmentID[chunkIdx]));
          return r;
        default:
          throw Error("Aborted, errored or already flushed boundaries should not be flushed again. This is a bug in React.");
      }
    }
    function flushSegment(request, destination, segment) {
      var boundary = segment.boundary;
      if (boundary === null) {
        return flushSubtree(request, destination, segment);
      }
      boundary.parentFlushed = !0;
      if (boundary.forceClientRender) {
        if (!request.responseState.generateStaticMarkup) {
          var errorDigest = boundary.errorDigest, errorMesssage = boundary.errorMessage;
          boundary = boundary.errorComponentStack;
          destination.push("\x3c!--$!--\x3e");
          destination.push("\x3ctemplate");
          errorDigest && (destination.push(' data-dgst\x3d"'), errorDigest = stringToChunk(escapeTextForBrowser(errorDigest)), destination.push(errorDigest), destination.push('"'));
          errorMesssage && (destination.push(' data-msg\x3d"'), errorMesssage = stringToChunk(escapeTextForBrowser(errorMesssage)), destination.push(errorMesssage), destination.push('"'));
          boundary && (destination.push(' data-stck\x3d"'), boundary = stringToChunk(escapeTextForBrowser(boundary)), destination.push(boundary), destination.push('"'));
          destination.push("\x3e\x3c/template\x3e");
        }
        flushSubtree(request, destination, segment);
        request = request.responseState.generateStaticMarkup ? !0 : destination.push("\x3c!--/$--\x3e");
        return request;
      }
      if (boundary.pendingTasks > 0) {
        return boundary.rootSegmentID = request.nextSegmentId++, boundary.completedSegments.length > 0 && request.partialBoundaries.push(boundary), errorMesssage = request.responseState, errorDigest = errorMesssage.nextSuspenseID++, errorMesssage = errorMesssage.boundaryPrefix + errorDigest.toString(16), boundary = boundary.id = errorMesssage, writeStartPendingSuspenseBoundary(destination, request.responseState, boundary), flushSubtree(request, destination, segment), destination.push("\x3c!--/$--\x3e");
      }
      if (boundary.byteSize > request.progressiveChunkSize) {
        return boundary.rootSegmentID = request.nextSegmentId++, request.completedBoundaries.push(boundary), writeStartPendingSuspenseBoundary(destination, request.responseState, boundary.id), flushSubtree(request, destination, segment), destination.push("\x3c!--/$--\x3e");
      }
      request.responseState.generateStaticMarkup || destination.push("\x3c!--$--\x3e");
      segment = boundary.completedSegments;
      if (segment.length !== 1) {
        throw Error("A previously unvisited boundary must have exactly one root segment. This is a bug in React.");
      }
      flushSegment(request, destination, segment[0]);
      request = request.responseState.generateStaticMarkup ? !0 : destination.push("\x3c!--/$--\x3e");
      return request;
    }
    function flushSegmentContainer(request, destination, segment) {
      writeStartSegment(destination, request.responseState, segment.formatContext, segment.id);
      flushSegment(request, destination, segment);
      return writeEndSegment(destination, segment.formatContext);
    }
    function flushCompletedBoundary(request, destination, boundary) {
      for (var completedSegments = boundary.completedSegments, i = 0; i < completedSegments.length; i++) {
        flushPartiallyCompletedSegment(request, destination, boundary, completedSegments[i]);
      }
      completedSegments.length = 0;
      request = request.responseState;
      completedSegments = boundary.id;
      boundary = boundary.rootSegmentID;
      destination.push(request.startInlineScript);
      request.sentCompleteBoundaryFunction ? destination.push('$RC("') : (request.sentCompleteBoundaryFunction = !0, destination.push('function $RC(a,b){a\x3ddocument.getElementById(a);b\x3ddocument.getElementById(b);b.parentNode.removeChild(b);if(a){a\x3da.previousSibling;var f\x3da.parentNode,c\x3da.nextSibling,e\x3d0;do{if(c\x26\x268\x3d\x3d\x3dc.nodeType){var d\x3dc.data;if("/$"\x3d\x3d\x3dd)if(0\x3d\x3d\x3de)break;else e--;else"$"!\x3d\x3dd\x26\x26"$?"!\x3d\x3dd\x26\x26"$!"!\x3d\x3dd||e++}d\x3dc.nextSibling;f.removeChild(c);c\x3dd}while(c);for(;b.firstChild;)f.insertBefore(b.firstChild,c);a.data\x3d"$";a._reactRetry\x26\x26a._reactRetry()}};$RC("'));
      if (completedSegments === null) {
        throw Error("An ID must have been assigned before we can complete the boundary.");
      }
      boundary = stringToChunk(boundary.toString(16));
      destination.push(completedSegments);
      destination.push('","');
      destination.push(request.segmentPrefix);
      destination.push(boundary);
      return destination.push('")\x3c/script\x3e');
    }
    function flushPartiallyCompletedSegment(request, destination, boundary, segment) {
      if (segment.status === 2) {
        return !0;
      }
      var segmentID = segment.id;
      if (segmentID === -1) {
        if ((segment.id = boundary.rootSegmentID) === -1) {
          throw Error("A root segment ID must have been assigned by now. This is a bug in React.");
        }
        return flushSegmentContainer(request, destination, segment);
      }
      flushSegmentContainer(request, destination, segment);
      request = request.responseState;
      destination.push(request.startInlineScript);
      request.sentCompleteSegmentFunction ? destination.push('$RS("') : (request.sentCompleteSegmentFunction = !0, destination.push('function $RS(a,b){a\x3ddocument.getElementById(a);b\x3ddocument.getElementById(b);for(a.parentNode.removeChild(a);a.firstChild;)b.parentNode.insertBefore(a.firstChild,b);b.parentNode.removeChild(b)};$RS("'));
      destination.push(request.segmentPrefix);
      segmentID = stringToChunk(segmentID.toString(16));
      destination.push(segmentID);
      destination.push('","');
      destination.push(request.placeholderPrefix);
      destination.push(segmentID);
      return destination.push('")\x3c/script\x3e');
    }
    function flushCompletedQueues(request, destination) {
      try {
        var completedRootSegment = request.completedRootSegment;
        if (completedRootSegment !== null && request.pendingRootTasks === 0) {
          flushSegment(request, destination, completedRootSegment);
          request.completedRootSegment = null;
          var bootstrapChunks = request.responseState.bootstrapChunks;
          for (completedRootSegment = 0; completedRootSegment < bootstrapChunks.length - 1; completedRootSegment++) {
            destination.push(bootstrapChunks[completedRootSegment]);
          }
          completedRootSegment < bootstrapChunks.length && destination.push(bootstrapChunks[completedRootSegment]);
        }
        var clientRenderedBoundaries = request.clientRenderedBoundaries, i;
        for (i = 0; i < clientRenderedBoundaries.length; i++) {
          var boundary = clientRenderedBoundaries[i];
          bootstrapChunks = destination;
          var responseState = request.responseState, boundaryID = boundary.id, errorDigest = boundary.errorDigest, errorMessage = boundary.errorMessage, errorComponentStack = boundary.errorComponentStack;
          bootstrapChunks.push(responseState.startInlineScript);
          responseState.sentClientRenderFunction ? bootstrapChunks.push('$RX("') : (responseState.sentClientRenderFunction = !0, bootstrapChunks.push('function $RX(b,c,d,e){var a\x3ddocument.getElementById(b);a\x26\x26(b\x3da.previousSibling,b.data\x3d"$!",a\x3da.dataset,c\x26\x26(a.dgst\x3dc),d\x26\x26(a.msg\x3dd),e\x26\x26(a.stck\x3de),b._reactRetry\x26\x26b._reactRetry())};$RX("'));
          if (boundaryID === null) {
            throw Error("An ID must have been assigned before we can complete the boundary.");
          }
          bootstrapChunks.push(boundaryID);
          bootstrapChunks.push('"');
          if (errorDigest || errorMessage || errorComponentStack) {
            bootstrapChunks.push(",");
            var chunk = stringToChunk(escapeJSStringsForInstructionScripts(errorDigest || ""));
            bootstrapChunks.push(chunk);
          }
          if (errorMessage || errorComponentStack) {
            bootstrapChunks.push(",");
            var chunk$jscomp$0 = stringToChunk(escapeJSStringsForInstructionScripts(errorMessage || ""));
            bootstrapChunks.push(chunk$jscomp$0);
          }
          if (errorComponentStack) {
            bootstrapChunks.push(",");
            var chunk$jscomp$1 = stringToChunk(escapeJSStringsForInstructionScripts(errorComponentStack));
            bootstrapChunks.push(chunk$jscomp$1);
          }
          if (!bootstrapChunks.push(")\x3c/script\x3e")) {
            request.destination = null;
            i++;
            clientRenderedBoundaries.splice(0, i);
            return;
          }
        }
        clientRenderedBoundaries.splice(0, i);
        var completedBoundaries = request.completedBoundaries;
        for (i = 0; i < completedBoundaries.length; i++) {
          if (!flushCompletedBoundary(request, destination, completedBoundaries[i])) {
            request.destination = null;
            i++;
            completedBoundaries.splice(0, i);
            return;
          }
        }
        completedBoundaries.splice(0, i);
        var partialBoundaries = request.partialBoundaries;
        for (i = 0; i < partialBoundaries.length; i++) {
          a: {
            clientRenderedBoundaries = request;
            boundary = destination;
            var boundary$jscomp$0 = partialBoundaries[i], completedSegments = boundary$jscomp$0.completedSegments;
            for (responseState = 0; responseState < completedSegments.length; responseState++) {
              if (!flushPartiallyCompletedSegment(clientRenderedBoundaries, boundary, boundary$jscomp$0, completedSegments[responseState])) {
                responseState++;
                completedSegments.splice(0, responseState);
                var JSCompiler_inline_result = !1;
                break a;
              }
            }
            completedSegments.splice(0, responseState);
            JSCompiler_inline_result = !0;
          }
          if (!JSCompiler_inline_result) {
            request.destination = null;
            i++;
            partialBoundaries.splice(0, i);
            return;
          }
        }
        partialBoundaries.splice(0, i);
        var largeBoundaries = request.completedBoundaries;
        for (i = 0; i < largeBoundaries.length; i++) {
          if (!flushCompletedBoundary(request, destination, largeBoundaries[i])) {
            request.destination = null;
            i++;
            largeBoundaries.splice(0, i);
            return;
          }
        }
        largeBoundaries.splice(0, i);
      } finally {
        request.allPendingTasks === 0 && request.pingedTasks.length === 0 && request.clientRenderedBoundaries.length === 0 && request.completedBoundaries.length === 0 && (request.abortableTasks.size !== 0 && error("There was still abortable task at the root when we closed. This is a bug in React."), destination.push(null));
      }
    }
    function startFlowing(request, destination) {
      if (request.status === 1) {
        request.status = 2, destination.destroy(request.fatalError);
      } else {
        if (request.status !== 2 && request.destination === null) {
          request.destination = destination;
          try {
            flushCompletedQueues(request, destination);
          } catch (error) {
            logRecoverableError(request, error), fatalError(request, error);
          }
        }
      }
    }
    function abort(request, reason) {
      try {
        var abortableTasks = request.abortableTasks;
        abortableTasks.forEach(function(task) {
          return abortTask(task, request, reason);
        });
        abortableTasks.clear();
        request.destination !== null && flushCompletedQueues(request, request.destination);
      } catch (error) {
        logRecoverableError(request, error), fatalError(request, error);
      }
    }
    function onError() {
    }
    function renderToStringImpl(children, options, generateStaticMarkup, abortReason) {
      var didFatal = !1, fatalError = null, result = "", readyToStream = !1;
      children = createRequest(children, createResponseState$1(generateStaticMarkup, options ? options.identifierPrefix : void 0), {insertionMode:1, selectedValue:null}, Infinity, onError, void 0, function() {
        readyToStream = !0;
      }, void 0, void 0);
      performWork(children);
      abort(children, abortReason);
      startFlowing(children, {push:function(chunk) {
        chunk !== null && (result += chunk);
        return !0;
      }, destroy:function(error) {
        didFatal = !0;
        fatalError = error;
      }});
      if (didFatal) {
        throw fatalError;
      }
      if (!readyToStream) {
        throw Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
      }
      return result;
    }
    var React = require("module$node_modules$react$index"), ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED, hasOwnProperty = Object.prototype.hasOwnProperty, VALID_ATTRIBUTE_NAME_REGEX = RegExp("^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), 
    illegalAttributeNameCache = {}, validatedAttributeNameCache = {}, properties = {};
    "children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 0, !1, name, null, !1, !1);
    });
    [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
      var name = _ref[0];
      properties[name] = new PropertyInfoRecord(name, 1, !1, _ref[1], null, !1, !1);
    });
    ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 2, !1, name.toLowerCase(), null, !1, !1);
    });
    ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 2, !1, name, null, !1, !1);
    });
    "allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 3, !1, name.toLowerCase(), null, !1, !1);
    });
    ["checked", "multiple", "muted", "selected"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 3, !0, name, null, !1, !1);
    });
    ["capture", "download"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 4, !1, name, null, !1, !1);
    });
    ["cols", "rows", "size", "span"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 6, !1, name, null, !1, !1);
    });
    ["rowSpan", "start"].forEach(function(name) {
      properties[name] = new PropertyInfoRecord(name, 5, !1, name.toLowerCase(), null, !1, !1);
    });
    var CAMELIZE = /[\-:]([a-z])/g, capitalize = function(token) {
      return token[1].toUpperCase();
    };
    "accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, 1, !1, attributeName, null, !1, !1);
    });
    "xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, 1, !1, attributeName, "http://www.w3.org/1999/xlink", !1, !1);
    });
    ["xml:base", "xml:lang", "xml:space"].forEach(function(attributeName) {
      var name = attributeName.replace(CAMELIZE, capitalize);
      properties[name] = new PropertyInfoRecord(name, 1, !1, attributeName, "http://www.w3.org/XML/1998/namespace", !1, !1);
    });
    ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, 1, !1, attributeName.toLowerCase(), null, !1, !1);
    });
    properties.xlinkHref = new PropertyInfoRecord("xlinkHref", 1, !1, "xlink:href", "http://www.w3.org/1999/xlink", !0, !1);
    ["src", "href", "action", "formAction"].forEach(function(attributeName) {
      properties[attributeName] = new PropertyInfoRecord(attributeName, 1, !1, attributeName.toLowerCase(), null, !0, !0);
    });
    var isUnitlessNumber = {animationIterationCount:!0, aspectRatio:!0, borderImageOutset:!0, borderImageSlice:!0, borderImageWidth:!0, boxFlex:!0, boxFlexGroup:!0, boxOrdinalGroup:!0, columnCount:!0, columns:!0, flex:!0, flexGrow:!0, flexPositive:!0, flexShrink:!0, flexNegative:!0, flexOrder:!0, gridArea:!0, gridRow:!0, gridRowEnd:!0, gridRowSpan:!0, gridRowStart:!0, gridColumn:!0, gridColumnEnd:!0, gridColumnSpan:!0, gridColumnStart:!0, fontWeight:!0, lineClamp:!0, lineHeight:!0, opacity:!0, order:!0, 
    orphans:!0, tabSize:!0, widows:!0, zIndex:!0, zoom:!0, fillOpacity:!0, floodOpacity:!0, stopOpacity:!0, strokeDasharray:!0, strokeDashoffset:!0, strokeMiterlimit:!0, strokeOpacity:!0, strokeWidth:!0}, prefixes = ["Webkit", "ms", "Moz", "O"];
    Object.keys(isUnitlessNumber).forEach(function(prop) {
      prefixes.forEach(function(prefix) {
        prefix = prefix + prop.charAt(0).toUpperCase() + prop.substring(1);
        isUnitlessNumber[prefix] = isUnitlessNumber[prop];
      });
    });
    var hasReadOnlyValue = {button:!0, checkbox:!0, image:!0, hidden:!0, radio:!0, reset:!0, submit:!0}, ariaProperties = {"aria-current":0, "aria-description":0, "aria-details":0, "aria-disabled":0, "aria-hidden":0, "aria-invalid":0, "aria-keyshortcuts":0, "aria-label":0, "aria-roledescription":0, "aria-autocomplete":0, "aria-checked":0, "aria-expanded":0, "aria-haspopup":0, "aria-level":0, "aria-modal":0, "aria-multiline":0, "aria-multiselectable":0, "aria-orientation":0, "aria-placeholder":0, 
    "aria-pressed":0, "aria-readonly":0, "aria-required":0, "aria-selected":0, "aria-sort":0, "aria-valuemax":0, "aria-valuemin":0, "aria-valuenow":0, "aria-valuetext":0, "aria-atomic":0, "aria-busy":0, "aria-live":0, "aria-relevant":0, "aria-dropeffect":0, "aria-grabbed":0, "aria-activedescendant":0, "aria-colcount":0, "aria-colindex":0, "aria-colspan":0, "aria-controls":0, "aria-describedby":0, "aria-errormessage":0, "aria-flowto":0, "aria-labelledby":0, "aria-owns":0, "aria-posinset":0, "aria-rowcount":0, 
    "aria-rowindex":0, "aria-rowspan":0, "aria-setsize":0}, warnedProperties = {}, rARIA = RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), rARIACamel = RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), 
    didWarnValueNull = !1, possibleStandardNames = {accept:"accept", acceptcharset:"acceptCharset", "accept-charset":"acceptCharset", accesskey:"accessKey", action:"action", allowfullscreen:"allowFullScreen", alt:"alt", as:"as", async:"async", autocapitalize:"autoCapitalize", autocomplete:"autoComplete", autocorrect:"autoCorrect", autofocus:"autoFocus", autoplay:"autoPlay", autosave:"autoSave", capture:"capture", cellpadding:"cellPadding", cellspacing:"cellSpacing", challenge:"challenge", charset:"charSet", 
    checked:"checked", children:"children", cite:"cite", class:"className", classid:"classID", classname:"className", cols:"cols", colspan:"colSpan", content:"content", contenteditable:"contentEditable", contextmenu:"contextMenu", controls:"controls", controlslist:"controlsList", coords:"coords", crossorigin:"crossOrigin", dangerouslysetinnerhtml:"dangerouslySetInnerHTML", data:"data", datetime:"dateTime", default:"default", defaultchecked:"defaultChecked", defaultvalue:"defaultValue", defer:"defer", 
    dir:"dir", disabled:"disabled", disablepictureinpicture:"disablePictureInPicture", disableremoteplayback:"disableRemotePlayback", download:"download", draggable:"draggable", enctype:"encType", enterkeyhint:"enterKeyHint", for:"htmlFor", form:"form", formmethod:"formMethod", formaction:"formAction", formenctype:"formEncType", formnovalidate:"formNoValidate", formtarget:"formTarget", frameborder:"frameBorder", headers:"headers", height:"height", hidden:"hidden", high:"high", href:"href", hreflang:"hrefLang", 
    htmlfor:"htmlFor", httpequiv:"httpEquiv", "http-equiv":"httpEquiv", icon:"icon", id:"id", imagesizes:"imageSizes", imagesrcset:"imageSrcSet", innerhtml:"innerHTML", inputmode:"inputMode", integrity:"integrity", is:"is", itemid:"itemID", itemprop:"itemProp", itemref:"itemRef", itemscope:"itemScope", itemtype:"itemType", keyparams:"keyParams", keytype:"keyType", kind:"kind", label:"label", lang:"lang", list:"list", loop:"loop", low:"low", manifest:"manifest", marginwidth:"marginWidth", marginheight:"marginHeight", 
    max:"max", maxlength:"maxLength", media:"media", mediagroup:"mediaGroup", method:"method", min:"min", minlength:"minLength", multiple:"multiple", muted:"muted", name:"name", nomodule:"noModule", nonce:"nonce", novalidate:"noValidate", open:"open", optimum:"optimum", pattern:"pattern", placeholder:"placeholder", playsinline:"playsInline", poster:"poster", preload:"preload", profile:"profile", radiogroup:"radioGroup", readonly:"readOnly", referrerpolicy:"referrerPolicy", rel:"rel", required:"required", 
    reversed:"reversed", role:"role", rows:"rows", rowspan:"rowSpan", sandbox:"sandbox", scope:"scope", scoped:"scoped", scrolling:"scrolling", seamless:"seamless", selected:"selected", shape:"shape", size:"size", sizes:"sizes", span:"span", spellcheck:"spellCheck", src:"src", srcdoc:"srcDoc", srclang:"srcLang", srcset:"srcSet", start:"start", step:"step", style:"style", summary:"summary", tabindex:"tabIndex", target:"target", title:"title", type:"type", usemap:"useMap", value:"value", width:"width", 
    wmode:"wmode", wrap:"wrap", about:"about", accentheight:"accentHeight", "accent-height":"accentHeight", accumulate:"accumulate", additive:"additive", alignmentbaseline:"alignmentBaseline", "alignment-baseline":"alignmentBaseline", allowreorder:"allowReorder", alphabetic:"alphabetic", amplitude:"amplitude", arabicform:"arabicForm", "arabic-form":"arabicForm", ascent:"ascent", attributename:"attributeName", attributetype:"attributeType", autoreverse:"autoReverse", azimuth:"azimuth", basefrequency:"baseFrequency", 
    baselineshift:"baselineShift", "baseline-shift":"baselineShift", baseprofile:"baseProfile", bbox:"bbox", begin:"begin", bias:"bias", by:"by", calcmode:"calcMode", capheight:"capHeight", "cap-height":"capHeight", clip:"clip", clippath:"clipPath", "clip-path":"clipPath", clippathunits:"clipPathUnits", cliprule:"clipRule", "clip-rule":"clipRule", color:"color", colorinterpolation:"colorInterpolation", "color-interpolation":"colorInterpolation", colorinterpolationfilters:"colorInterpolationFilters", 
    "color-interpolation-filters":"colorInterpolationFilters", colorprofile:"colorProfile", "color-profile":"colorProfile", colorrendering:"colorRendering", "color-rendering":"colorRendering", contentscripttype:"contentScriptType", contentstyletype:"contentStyleType", cursor:"cursor", cx:"cx", cy:"cy", d:"d", datatype:"datatype", decelerate:"decelerate", descent:"descent", diffuseconstant:"diffuseConstant", direction:"direction", display:"display", divisor:"divisor", dominantbaseline:"dominantBaseline", 
    "dominant-baseline":"dominantBaseline", dur:"dur", dx:"dx", dy:"dy", edgemode:"edgeMode", elevation:"elevation", enablebackground:"enableBackground", "enable-background":"enableBackground", end:"end", exponent:"exponent", externalresourcesrequired:"externalResourcesRequired", fill:"fill", fillopacity:"fillOpacity", "fill-opacity":"fillOpacity", fillrule:"fillRule", "fill-rule":"fillRule", filter:"filter", filterres:"filterRes", filterunits:"filterUnits", floodopacity:"floodOpacity", "flood-opacity":"floodOpacity", 
    floodcolor:"floodColor", "flood-color":"floodColor", focusable:"focusable", fontfamily:"fontFamily", "font-family":"fontFamily", fontsize:"fontSize", "font-size":"fontSize", fontsizeadjust:"fontSizeAdjust", "font-size-adjust":"fontSizeAdjust", fontstretch:"fontStretch", "font-stretch":"fontStretch", fontstyle:"fontStyle", "font-style":"fontStyle", fontvariant:"fontVariant", "font-variant":"fontVariant", fontweight:"fontWeight", "font-weight":"fontWeight", format:"format", from:"from", fx:"fx", 
    fy:"fy", g1:"g1", g2:"g2", glyphname:"glyphName", "glyph-name":"glyphName", glyphorientationhorizontal:"glyphOrientationHorizontal", "glyph-orientation-horizontal":"glyphOrientationHorizontal", glyphorientationvertical:"glyphOrientationVertical", "glyph-orientation-vertical":"glyphOrientationVertical", glyphref:"glyphRef", gradienttransform:"gradientTransform", gradientunits:"gradientUnits", hanging:"hanging", horizadvx:"horizAdvX", "horiz-adv-x":"horizAdvX", horizoriginx:"horizOriginX", "horiz-origin-x":"horizOriginX", 
    ideographic:"ideographic", imagerendering:"imageRendering", "image-rendering":"imageRendering", in2:"in2", in:"in", inlist:"inlist", intercept:"intercept", k1:"k1", k2:"k2", k3:"k3", k4:"k4", k:"k", kernelmatrix:"kernelMatrix", kernelunitlength:"kernelUnitLength", kerning:"kerning", keypoints:"keyPoints", keysplines:"keySplines", keytimes:"keyTimes", lengthadjust:"lengthAdjust", letterspacing:"letterSpacing", "letter-spacing":"letterSpacing", lightingcolor:"lightingColor", "lighting-color":"lightingColor", 
    limitingconeangle:"limitingConeAngle", local:"local", markerend:"markerEnd", "marker-end":"markerEnd", markerheight:"markerHeight", markermid:"markerMid", "marker-mid":"markerMid", markerstart:"markerStart", "marker-start":"markerStart", markerunits:"markerUnits", markerwidth:"markerWidth", mask:"mask", maskcontentunits:"maskContentUnits", maskunits:"maskUnits", mathematical:"mathematical", mode:"mode", numoctaves:"numOctaves", offset:"offset", opacity:"opacity", operator:"operator", order:"order", 
    orient:"orient", orientation:"orientation", origin:"origin", overflow:"overflow", overlineposition:"overlinePosition", "overline-position":"overlinePosition", overlinethickness:"overlineThickness", "overline-thickness":"overlineThickness", paintorder:"paintOrder", "paint-order":"paintOrder", panose1:"panose1", "panose-1":"panose1", pathlength:"pathLength", patterncontentunits:"patternContentUnits", patterntransform:"patternTransform", patternunits:"patternUnits", pointerevents:"pointerEvents", 
    "pointer-events":"pointerEvents", points:"points", pointsatx:"pointsAtX", pointsaty:"pointsAtY", pointsatz:"pointsAtZ", prefix:"prefix", preservealpha:"preserveAlpha", preserveaspectratio:"preserveAspectRatio", primitiveunits:"primitiveUnits", property:"property", r:"r", radius:"radius", refx:"refX", refy:"refY", renderingintent:"renderingIntent", "rendering-intent":"renderingIntent", repeatcount:"repeatCount", repeatdur:"repeatDur", requiredextensions:"requiredExtensions", requiredfeatures:"requiredFeatures", 
    resource:"resource", restart:"restart", result:"result", results:"results", rotate:"rotate", rx:"rx", ry:"ry", scale:"scale", security:"security", seed:"seed", shaperendering:"shapeRendering", "shape-rendering":"shapeRendering", slope:"slope", spacing:"spacing", specularconstant:"specularConstant", specularexponent:"specularExponent", speed:"speed", spreadmethod:"spreadMethod", startoffset:"startOffset", stddeviation:"stdDeviation", stemh:"stemh", stemv:"stemv", stitchtiles:"stitchTiles", stopcolor:"stopColor", 
    "stop-color":"stopColor", stopopacity:"stopOpacity", "stop-opacity":"stopOpacity", strikethroughposition:"strikethroughPosition", "strikethrough-position":"strikethroughPosition", strikethroughthickness:"strikethroughThickness", "strikethrough-thickness":"strikethroughThickness", string:"string", stroke:"stroke", strokedasharray:"strokeDasharray", "stroke-dasharray":"strokeDasharray", strokedashoffset:"strokeDashoffset", "stroke-dashoffset":"strokeDashoffset", strokelinecap:"strokeLinecap", "stroke-linecap":"strokeLinecap", 
    strokelinejoin:"strokeLinejoin", "stroke-linejoin":"strokeLinejoin", strokemiterlimit:"strokeMiterlimit", "stroke-miterlimit":"strokeMiterlimit", strokewidth:"strokeWidth", "stroke-width":"strokeWidth", strokeopacity:"strokeOpacity", "stroke-opacity":"strokeOpacity", suppresscontenteditablewarning:"suppressContentEditableWarning", suppresshydrationwarning:"suppressHydrationWarning", surfacescale:"surfaceScale", systemlanguage:"systemLanguage", tablevalues:"tableValues", targetx:"targetX", targety:"targetY", 
    textanchor:"textAnchor", "text-anchor":"textAnchor", textdecoration:"textDecoration", "text-decoration":"textDecoration", textlength:"textLength", textrendering:"textRendering", "text-rendering":"textRendering", to:"to", transform:"transform", typeof:"typeof", u1:"u1", u2:"u2", underlineposition:"underlinePosition", "underline-position":"underlinePosition", underlinethickness:"underlineThickness", "underline-thickness":"underlineThickness", unicode:"unicode", unicodebidi:"unicodeBidi", "unicode-bidi":"unicodeBidi", 
    unicoderange:"unicodeRange", "unicode-range":"unicodeRange", unitsperem:"unitsPerEm", "units-per-em":"unitsPerEm", unselectable:"unselectable", valphabetic:"vAlphabetic", "v-alphabetic":"vAlphabetic", values:"values", vectoreffect:"vectorEffect", "vector-effect":"vectorEffect", version:"version", vertadvy:"vertAdvY", "vert-adv-y":"vertAdvY", vertoriginx:"vertOriginX", "vert-origin-x":"vertOriginX", vertoriginy:"vertOriginY", "vert-origin-y":"vertOriginY", vhanging:"vHanging", "v-hanging":"vHanging", 
    videographic:"vIdeographic", "v-ideographic":"vIdeographic", viewbox:"viewBox", viewtarget:"viewTarget", visibility:"visibility", vmathematical:"vMathematical", "v-mathematical":"vMathematical", vocab:"vocab", widths:"widths", wordspacing:"wordSpacing", "word-spacing":"wordSpacing", writingmode:"writingMode", "writing-mode":"writingMode", x1:"x1", x2:"x2", x:"x", xchannelselector:"xChannelSelector", xheight:"xHeight", "x-height":"xHeight", xlinkactuate:"xlinkActuate", "xlink:actuate":"xlinkActuate", 
    xlinkarcrole:"xlinkArcrole", "xlink:arcrole":"xlinkArcrole", xlinkhref:"xlinkHref", "xlink:href":"xlinkHref", xlinkrole:"xlinkRole", "xlink:role":"xlinkRole", xlinkshow:"xlinkShow", "xlink:show":"xlinkShow", xlinktitle:"xlinkTitle", "xlink:title":"xlinkTitle", xlinktype:"xlinkType", "xlink:type":"xlinkType", xmlbase:"xmlBase", "xml:base":"xmlBase", xmllang:"xmlLang", "xml:lang":"xmlLang", xmlns:"xmlns", "xml:space":"xmlSpace", xmlnsxlink:"xmlnsXlink", "xmlns:xlink":"xmlnsXlink", xmlspace:"xmlSpace", 
    y1:"y1", y2:"y2", y:"y", ychannelselector:"yChannelSelector", z:"z", zoomandpan:"zoomAndPan"}, validateProperty$1 = function() {
    }, warnedProperties$1 = {}, EVENT_NAME_REGEX = /^on./, INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/, rARIA$1 = RegExp("^(aria)-[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"), rARIACamel$1 = RegExp("^(aria)[A-Z][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$");
    validateProperty$1 = function(tagName, name, value, eventRegistry) {
      if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
        return !0;
      }
      tagName = name.toLowerCase();
      if (tagName === "onfocusin" || tagName === "onfocusout") {
        return error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React."), warnedProperties$1[name] = !0;
      }
      if (eventRegistry != null) {
        var possibleRegistrationNames = eventRegistry.possibleRegistrationNames;
        if (eventRegistry.registrationNameDependencies.hasOwnProperty(name)) {
          return !0;
        }
        eventRegistry = possibleRegistrationNames.hasOwnProperty(tagName) ? possibleRegistrationNames[tagName] : null;
        if (eventRegistry != null) {
          return error("Invalid event handler property `%s`. Did you mean `%s`?", name, eventRegistry), warnedProperties$1[name] = !0;
        }
        if (EVENT_NAME_REGEX.test(name)) {
          return error("Unknown event handler property `%s`. It will be ignored.", name), warnedProperties$1[name] = !0;
        }
      } else if (EVENT_NAME_REGEX.test(name)) {
        return INVALID_EVENT_NAME_REGEX.test(name) && error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name), warnedProperties$1[name] = !0;
      }
      if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
        return !0;
      }
      if (tagName === "innerhtml") {
        return error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`."), warnedProperties$1[name] = !0;
      }
      if (tagName === "aria") {
        return error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead."), warnedProperties$1[name] = !0;
      }
      if (tagName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
        return error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value), warnedProperties$1[name] = !0;
      }
      if (typeof value === "number" && isNaN(value)) {
        return error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name), warnedProperties$1[name] = !0;
      }
      eventRegistry = getPropertyInfo(name);
      possibleRegistrationNames = eventRegistry !== null && eventRegistry.type === 0;
      if (possibleStandardNames.hasOwnProperty(tagName)) {
        if (tagName = possibleStandardNames[tagName], tagName !== name) {
          return error("Invalid DOM property `%s`. Did you mean `%s`?", name, tagName), warnedProperties$1[name] = !0;
        }
      } else if (!possibleRegistrationNames && name !== tagName) {
        return error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, tagName), warnedProperties$1[name] = !0;
      }
      if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, eventRegistry, !1)) {
        return value ? error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s\x3d"%s" or %s\x3d{value.toString()}.', value, name, name, value, name) : error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s\x3d"%s" or %s\x3d{value.toString()}.\n\nIf you used to conditionally omit it with %s\x3d{condition \x26\x26 value}, pass %s\x3d{condition ? value : undefined} instead.', 
        value, name, name, value, name, name, name), warnedProperties$1[name] = !0;
      }
      if (possibleRegistrationNames) {
        return !0;
      }
      if (shouldRemoveAttributeWithWarning(name, value, eventRegistry, !1)) {
        return warnedProperties$1[name] = !0, !1;
      }
      value !== "false" && value !== "true" || eventRegistry === null || eventRegistry.type !== 3 || (error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s\x3d{%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value), warnedProperties$1[name] = !0);
      return !0;
    };
    var warnUnknownProperties = function(type, props, eventRegistry) {
      var unknownProps = [], key;
      for (key in props) {
        validateProperty$1(type, key, props[key], eventRegistry) || unknownProps.push(key);
      }
      props = unknownProps.map(function(prop) {
        return "`" + prop + "`";
      }).join(", ");
      unknownProps.length === 1 ? error("Invalid value for prop %s on \x3c%s\x3e tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", props, type) : unknownProps.length > 1 && error("Invalid values for props %s on \x3c%s\x3e tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", props, 
      type);
    }, warnValidStyle = function() {
    }, badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/, msPattern = /^-ms-/, hyphenPattern = /-(.)/g, badStyleValueWithSemicolonPattern = /;\s*$/, warnedStyleNames = {}, warnedStyleValues = {}, warnedForNaNValue = !1, warnedForInfinityValue = !1, camelize = function(string) {
      return string.replace(hyphenPattern, function(_, character) {
        return character.toUpperCase();
      });
    }, warnValidStyle$1 = warnValidStyle = function(name, value) {
      name.indexOf("-") > -1 ? warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error("Unsupported style property %s. Did you mean %s?", name, camelize(name.replace(msPattern, "ms-")))) : badVendoredStyleNamePattern.test(name) ? warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name] || (warnedStyleNames[name] = !0, error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1))) : 
      badStyleValueWithSemicolonPattern.test(value) && (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value] || (warnedStyleValues[value] = !0, error('Style property values shouldn\'t contain a semicolon. Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ""))));
      typeof value === "number" && (isNaN(value) ? warnedForNaNValue || (warnedForNaNValue = !0, error("`NaN` is an invalid value for the `%s` css style property.", name)) : isFinite(value) || warnedForInfinityValue || (warnedForInfinityValue = !0, error("`Infinity` is an invalid value for the `%s` css style property.", name)));
    }, matchHtmlRegExp = /["'&<>]/, uppercasePattern = /([A-Z])/g, msPattern$1 = /^ms-/, isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i, didWarn = !1, isArrayImpl = Array.isArray, styleNameCache = new Map(), attributeEnd = '"', didWarnDefaultInputValue = !1, didWarnDefaultChecked = !1, didWarnDefaultSelectValue = !1, didWarnDefaultTextareaValue = !1, didWarnInvalidOptionChildren = !1, didWarnInvalidOptionInnerHTML = 
    !1, didWarnSelectedSetOnOption = !1, leadingNewline = "\n", VALID_TAG_REGEX = /^[a-zA-Z][a-zA-Z:_\.\-\d]*$/, validatedTagCache = new Map(), regexForJSStringsInScripts = /[<\u2028\u2029]/g, assign = Object.assign, REACT_ELEMENT_TYPE = Symbol.for("react.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler"), REACT_PROVIDER_TYPE = Symbol.for("react.provider"), 
    REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_SCOPE_TYPE = Symbol.for("react.scope"), REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode"), REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden"), REACT_SERVER_CONTEXT_DEFAULT_VALUE_NOT_LOADED = 
    Symbol.for("react.default_value"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = !0;
    var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher, prefix, reentry = !1;
    var componentFrameCache = new (typeof WeakMap === "function" ? WeakMap : Map)();
    var loggedTypeFailures = {}, ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var warnedAboutMissingGetChildContext = {};
    var emptyContextObject = {};
    Object.freeze(emptyContextObject);
    var rendererSigil = {};
    var currentActiveSnapshot = null, didWarnAboutNoopUpdateForComponent = {}, didWarnAboutDeprecatedWillMount = {};
    var didWarnAboutUninitializedState = new Set();
    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
    var didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
    var didWarnAboutDirectlyAssigningPropsToState = new Set();
    var didWarnAboutUndefinedDerivedState = new Set();
    var didWarnAboutContextTypeAndContextTypes = new Set();
    var didWarnAboutInvalidateContextType = new Set();
    var didWarnOnInvalidCallback = new Set();
    var warnOnInvalidCallback = function(callback, callerName) {
      if (callback !== null && typeof callback !== "function") {
        var key = callerName + "_" + callback;
        didWarnOnInvalidCallback.has(key) || (didWarnOnInvalidCallback.add(key), error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback));
      }
    };
    var warnOnUndefinedDerivedState = function(type, partialState) {
      partialState === void 0 && (type = getComponentNameFromType(type) || "Component", didWarnAboutUndefinedDerivedState.has(type) || (didWarnAboutUndefinedDerivedState.add(type), error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", type)));
    };
    var classComponentUpdater = {isMounted:function(inst) {
      return !1;
    }, enqueueSetState:function(inst, payload, callback) {
      var internals = inst._reactInternals;
      internals.queue === null ? warnNoop(inst, "setState") : (internals.queue.push(payload), callback !== void 0 && callback !== null && warnOnInvalidCallback(callback, "setState"));
    }, enqueueReplaceState:function(inst, payload, callback) {
      inst = inst._reactInternals;
      inst.replace = !0;
      inst.queue = [payload];
      callback !== void 0 && callback !== null && warnOnInvalidCallback(callback, "setState");
    }, enqueueForceUpdate:function(inst, callback) {
      inst._reactInternals.queue === null ? warnNoop(inst, "forceUpdate") : callback !== void 0 && callback !== null && warnOnInvalidCallback(callback, "setState");
    }}, emptyTreeContext = {id:1, overflow:""}, clz32 = Math.clz32 ? Math.clz32 : clz32Fallback, log = Math.log, LN2 = Math.LN2, objectIs = typeof Object.is === "function" ? Object.is : is, currentlyRenderingComponent = null, currentlyRenderingTask = null, firstWorkInProgressHook = null, workInProgressHook = null, isReRender = !1, didScheduleRenderPhaseUpdate = !1, localIdCounter = 0, renderPhaseUpdates = null, numberOfReRenders = 0, isInHookUserCodeInDev = !1, currentHookNameInDev, Dispatcher = 
    {readContext:function(context) {
      isInHookUserCodeInDev && error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
      return context._currentValue2;
    }, useContext:function(context) {
      currentHookNameInDev = "useContext";
      resolveCurrentlyRenderingComponent();
      return context._currentValue2;
    }, useMemo, useReducer, useRef:function(initialValue) {
      currentlyRenderingComponent = resolveCurrentlyRenderingComponent();
      workInProgressHook = createWorkInProgressHook();
      var previousRef = workInProgressHook.memoizedState;
      return previousRef === null ? (initialValue = {current:initialValue}, Object.seal(initialValue), workInProgressHook.memoizedState = initialValue) : previousRef;
    }, useState:function(initialState) {
      currentHookNameInDev = "useState";
      return useReducer(basicStateReducer, initialState);
    }, useInsertionEffect:noop, useLayoutEffect:function(create, inputs) {
      currentHookNameInDev = "useLayoutEffect";
      error("useLayoutEffect does nothing on the server, because its effect cannot be encoded into the server renderer's output format. This will lead to a mismatch between the initial, non-hydrated UI and the intended UI. To avoid this, useLayoutEffect should only be used in components that render exclusively on the client. See https://reactjs.org/link/uselayouteffect-ssr for common fixes.");
    }, useCallback:function(callback, deps) {
      return useMemo(function() {
        return callback;
      }, deps);
    }, useImperativeHandle:noop, useEffect:noop, useDebugValue:noop, useDeferredValue:function(value) {
      resolveCurrentlyRenderingComponent();
      return value;
    }, useTransition:function() {
      resolveCurrentlyRenderingComponent();
      return [!1, unsupportedStartTransition];
    }, useId:function() {
      var treeId = currentlyRenderingTask.treeContext;
      var overflow = treeId.overflow;
      treeId = treeId.id;
      treeId = (treeId & ~(1 << 32 - clz32(treeId) - 1)).toString(32) + overflow;
      var responseState = currentResponseState;
      if (responseState === null) {
        throw Error("Invalid hook call. Hooks can only be called inside of the body of a function component.");
      }
      overflow = localIdCounter++;
      treeId = ":" + responseState.idPrefix + "R" + treeId;
      overflow > 0 && (treeId += "H" + overflow.toString(32));
      return treeId + ":";
    }, useMutableSource:function(source, getSnapshot, subscribe) {
      resolveCurrentlyRenderingComponent();
      return getSnapshot(source._source);
    }, useSyncExternalStore:function(subscribe, getSnapshot, getServerSnapshot) {
      if (getServerSnapshot === void 0) {
        throw Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
      }
      return getServerSnapshot();
    }}, currentResponseState = null, ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame, currentTaskInDEV = null, lastBoundaryErrorComponentStackDev = null, didWarnAboutBadClass = {}, didWarnAboutModulePatternComponent = {}, didWarnAboutContextTypeOnFunctionComponent = {}, didWarnAboutGetDerivedStateOnFunctionComponent = {}, didWarnAboutReassigningProps = !1, didWarnAboutDefaultPropsOnFunctionComponent = {}, 
    didWarnAboutGenerators = !1, didWarnAboutMaps = !1, hasWarnedAboutUsingContextAsConsumer = !1;
    exports.renderToNodeStream = function() {
      throw Error("ReactDOMServer.renderToNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToString() instead.");
    };
    exports.renderToStaticMarkup = function(children, options) {
      return renderToStringImpl(children, options, !0, 'The server used "renderToStaticMarkup" which does not support Suspense. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
    };
    exports.renderToStaticNodeStream = function() {
      throw Error("ReactDOMServer.renderToStaticNodeStream(): The streaming API is not available in the browser. Use ReactDOMServer.renderToStaticMarkup() instead.");
    };
    exports.renderToString = function(children, options) {
      return renderToStringImpl(children, options, !1, 'The server used "renderToString" which does not support Suspense. If you intended for this Suspense boundary to render the fallback content on the server consider throwing an Error somewhere within the Suspense boundary. If you intended to have the server wait for the suspended component please switch to "renderToReadableStream" which supports Suspense on the server');
    };
    exports.version = "18.3.1";
  })();
};

//# sourceMappingURL=module$node_modules$react_dom$cjs$react_dom_server_legacy_browser_development.js.map
