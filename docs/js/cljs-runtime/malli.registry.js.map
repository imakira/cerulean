{"version":3,"sources":["malli/registry.cljc"],"mappings":"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","names":["js/goog.define","malli.registry/mode","malli.registry/type","malli$registry$Registry$_schema$dyn","x__5373__auto__","m__5374__auto__","malli.registry/-schema","goog/typeOf","m__5372__auto__","cljs.core/missing-protocol","malli$registry$Registry$_schemas$dyn","malli.registry/-schemas","malli.registry/Registry","this","type","malli.registry/registry?","x","cljs.core/PROTOCOL_SENTINEL","malli.registry/fast-registry","m","fm","malli.registry/t_malli$registry101276","_","malli.registry/simple-registry","malli.registry/t_malli$registry101284","malli.registry/registry","?registry","cljs.core/map?","cljs.core/native-satisfies?","malli.registry/registry*","cljs.core.atom","malli.registry/set-default-registry!","cljs.core/reset!","cljs.core.ex_info","malli.registry/custom-default-registry","malli.registry/t_malli$registry101324","cljs.core/deref","var_args","args__5755__auto__","len__5749__auto__","i__5750__auto__","argseq__5756__auto__","cljs.core/IndexedSeq","malli.registry/composite-registry","seq101351","self__5735__auto__","cljs.core/seq","?registries","registries","cljs.core.mapv","malli.registry/t_malli$registry101359","p1__101347#","cljs.core/some","cljs.core.reduce","cljs.core/merge","cljs.core.map","cljs.core/reverse","malli.registry/mutable-registry","db","malli.registry/t_malli$registry101417","malli.registry/var-registry","malli.registry/t_malli$registry101468","cljs.core/var?","malli.registry/*registry*","malli.registry/dynamic-registry","malli.registry/t_malli$registry101496","malli.registry/lazy-registry","default-registry","provider","cache*","registry*","malli.registry.composite_registry","malli.registry/t_malli$registry101514","name","or__5025__auto__","fexpr__101527","temp__5823__auto__","schema","G__101528","G__101529","cljs.core.swap_BANG_","cljs.core/assoc","malli.registry/schema","registry","malli.registry/schemas"],"sourcesContent":["(ns malli.registry\n  (:refer-clojure :exclude [type])\n  #?(:clj (:import (java.util HashMap Map))))\n\n#?(:cljs (goog-define mode \"default\")\n   :clj  (def mode (or (System/getProperty \"malli.registry/mode\") \"default\")))\n\n#?(:cljs (goog-define type \"default\")\n   :clj  (def type (or (System/getProperty \"malli.registry/type\") \"default\")))\n\n(defprotocol Registry\n  (-schema [this type] \"returns the schema from a registry\")\n  (-schemas [this] \"returns all schemas from a registry\"))\n\n(defn registry? [x] (#?(:clj instance?, :cljs implements?) malli.registry.Registry x))\n\n(defn fast-registry [m]\n  (let [fm #?(:clj (doto (HashMap. 1024 0.25) (.putAll ^Map m)), :cljs m)]\n    (reify\n      Registry\n      (-schema [_ type] (.get fm type))\n      (-schemas [_] m))))\n\n(defn simple-registry [m]\n  (reify\n    Registry\n    (-schema [_ type] (m type))\n    (-schemas [_] m)))\n\n(defn registry [?registry]\n  (cond (nil? ?registry) nil\n        (registry? ?registry) ?registry\n        (map? ?registry) (simple-registry ?registry)\n        (satisfies? Registry ?registry) ?registry))\n\n;;\n;; custom\n;;\n\n(def ^:private registry* (atom (simple-registry {})))\n\n(defn set-default-registry! [?registry]\n  (if-not #?(:cljs (identical? mode \"strict\")\n             :default (= mode \"strict\"))\n    (reset! registry* (registry ?registry))\n    (throw (ex-info \"can't set default registry, invalid mode\" {:mode mode, :type type}))))\n\n(defn ^:no-doc custom-default-registry []\n  (reify\n    Registry\n    (-schema [_ type] (-schema @registry* type))\n    (-schemas [_] (-schemas @registry*))))\n\n(defn composite-registry [& ?registries]\n  (let [registries (mapv registry ?registries)]\n    (reify\n      Registry\n      (-schema [_ type] (some #(-schema % type) registries))\n      (-schemas [_] (reduce merge (map -schemas (reverse registries)))))))\n\n(defn mutable-registry [db]\n  (reify\n    Registry\n    (-schema [_ type] (-schema (registry @db) type))\n    (-schemas [_] (-schemas (registry @db)))))\n\n(defn var-registry []\n  (reify\n    Registry\n    (-schema [_ type] (if (var? type) @type))\n    (-schemas [_])))\n\n(def ^:dynamic *registry* {})\n\n(defn dynamic-registry []\n  (reify\n    Registry\n    (-schema [_ type] (-schema (registry *registry*) type))\n    (-schemas [_] (-schemas (registry *registry*)))))\n\n(defn lazy-registry [default-registry provider]\n  (let [cache* (atom {})\n        registry* (atom default-registry)]\n    (reset!\n     registry*\n     (composite-registry\n      default-registry\n      (reify\n        Registry\n        (-schema [_ name]\n          (or (@cache* name)\n              (when-let [schema (provider name @registry*)]\n                (swap! cache* assoc name schema)\n                schema)))\n        (-schemas [_] @cache*))))))\n\n(defn schema\n  \"finds a schema from a registry\"\n  [registry type]\n  (-schema registry type))\n\n(defn schemas\n  \"finds all schemas from a registry\"\n  [registry]\n  (-schemas registry))\n"],"x_google_ignoreList":[0]}