{"version":3,"sources":["shadow/remote/runtime/eval_support.cljs"],"mappings":"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","names":["shadow.remote.runtime.eval-support/obj-support-inst","shadow.remote.runtime.eval-support/get-ref","oid","cljs.core.ex_info","shadow.remote.runtime.obj-support/get-ref","p__100985","p__100986","map__100989","cljs.core/--destructure-map","cljs.core.get","map__100990","shadow.remote.runtime.eval-support/cljs-eval","runtime","obj-support","svc","input","msg","shadow.remote.runtime.api/cljs-eval","p__100991","map__100992","result","info","G__100993","cljs.core/Keyword","map__100994","ex-client-id","ex-oid","report","shadow.remote.runtime.shared/reply","map__100995","ex","shadow.remote.runtime.obj-support/register","map__100996","warnings","map__100997","results","time-start","time-finish","val","cljs.core._EQ_","cljs.core/count","cljs.core/first","ref-oid","js/console.error","p__101008","p__101009","map__101010","map__101011","shadow.remote.runtime.eval-support/js-eval","code","shadow.remote.runtime.api/js-eval","res","e","shadow.remote.runtime.eval-support/start","p1__101019#","p1__101020#","shadow.remote.runtime.shared/add-extension","p__101028","map__101029","shadow.remote.runtime.eval-support/stop","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.eval-support\n  (:require\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.obj-support :as obj-support]\n    ))\n\n(def ^:dynamic obj-support-inst nil)\n\n(defn get-ref [oid]\n  (when-not obj-support-inst\n    (throw (ex-info \"obj-support not bound, can only call this from eval\" {:oid oid})))\n  (obj-support/get-ref obj-support-inst oid))\n\n(defn cljs-eval\n  [{:keys [^Runtime runtime obj-support] :as svc} {:keys [input] :as msg}]\n  ;; can't use binding because this has to go async\n  ;; required for $o in the UI to work, would be good to have a cleaner API for this\n  (set! obj-support-inst obj-support)\n  (p/cljs-eval runtime input\n    ;; {:code \"1 2 3\"} would trigger 3 results\n    (fn [{:keys [result] :as info}]\n      (set! obj-support-inst nil) ;; cleanup\n\n      ;; (js/console.log \"cljs-eval\" info msg)\n\n      (case result\n        :compile-error\n        (let [{:keys [ex-client-id ex-oid report]} info]\n          (shared/reply runtime msg\n            {:op :eval-compile-error\n             :ex-client-id ex-client-id\n             :ex-oid ex-oid\n             :report report}))\n\n        :runtime-error\n        (let [{:keys [ex]} info\n              ex-oid (obj-support/register obj-support ex {:msg input})]\n          (shared/reply runtime msg\n            {:op :eval-runtime-error\n             :ex-oid ex-oid}))\n\n        :warnings\n        (let [{:keys [warnings]} info]\n          (shared/reply runtime msg\n            {:op :eval-compile-warnings\n             :warnings warnings}))\n\n        :ok\n        (let [{:keys [results warnings time-start time-finish]} info\n              val\n              (if (= 1 (count results))\n                (first results)\n                results)]\n          ;; pretending to be one result always\n          ;; don't want to send multiple results in case code contained multiple forms\n          (let [ref-oid (obj-support/register obj-support val {:msg input})]\n            (shared/reply runtime msg\n              {:op :eval-result-ref\n               :ref-oid ref-oid\n               :eval-ms (- time-finish time-start)\n               :eval-ns (:ns info)\n               :warnings warnings})))\n\n        (js/console.error \"Unhandled cljs-eval result\" info)))))\n\n(defn js-eval\n  [{:keys [^Runtime runtime obj-support] :as svc} {:keys [code] :as msg}]\n\n  (p/js-eval runtime code\n    (fn eval-success [res]\n      (let [ref-oid (obj-support/register obj-support res {:js-code code})]\n\n        (shared/reply runtime msg\n          ;; FIXME: separate result ops for :cljs-eval :js-eval :clj-eval?\n          {:op :eval-result-ref\n           :ref-oid ref-oid})))\n    (fn eval-fail [e]\n      (shared/reply runtime msg\n        {:op :eval-error\n         :e (.-message e)})\n      )))\n\n(defn start [runtime obj-support]\n  (let [svc\n        {:runtime runtime\n         :obj-support obj-support}]\n\n    (shared/add-extension runtime\n      ::ext\n      {:ops\n       {:js-eval #(js-eval svc %)\n        :cljs-eval #(cljs-eval svc %)}})\n\n    svc))\n\n(defn stop [{:keys [runtime] :as svc}]\n  (p/del-extension runtime ::ext))"],"x_google_ignoreList":[0]}